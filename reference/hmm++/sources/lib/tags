!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ADDR	sqlite3.c	8283;"	d	file:
AGGREGATE	sqlite3.c	9660;"	d	file:
ALWAYS	sqlite3.c	111876;"	d	file:
ALWAYS	sqlite3.c	111879;"	d	file:
ALWAYS	sqlite3.c	511;"	d	file:
ALWAYS	sqlite3.c	514;"	d	file:
ALWAYS	sqlite3.c	517;"	d	file:
AM	CRandom.cpp	/^const double CRandom::AM=1.0\/IM;$/;"	m	class:CRandom	file:
AdjustTree	sqlite3.c	/^static int AdjustTree($/;"	f	file:
AggInfo	sqlite3.c	/^struct AggInfo {$/;"	s	file:
AggInfo	sqlite3.c	/^typedef struct AggInfo AggInfo;$/;"	t	typeref:struct:AggInfo	file:
AggInfo_col	sqlite3.c	/^  struct AggInfo_col {    \/* For each column used in source tables *\/$/;"	s	struct:AggInfo	file:
AggInfo_func	sqlite3.c	/^  struct AggInfo_func {   \/* For each aggregate function *\/$/;"	s	struct:AggInfo	file:
AreFileApisANSI	sqlite3.c	31494;"	d	file:
ArraySize	sqlite3.c	7777;"	d	file:
AssignCells	sqlite3.c	124466;"	d	file:
AssignCells	sqlite3.c	124471;"	d	file:
AssignCells	sqlite3.c	124474;"	d	file:
AttachKey	sqlite3.c	/^struct AttachKey { int type;  Token key; };$/;"	s	file:
AuthContext	sqlite3.c	/^struct AuthContext {$/;"	s	file:
AuthContext	sqlite3.c	/^typedef struct AuthContext AuthContext;$/;"	t	typeref:struct:AuthContext	file:
AutoincInfo	sqlite3.c	/^struct AutoincInfo {$/;"	s	file:
AutoincInfo	sqlite3.c	/^typedef struct AutoincInfo AutoincInfo;$/;"	t	typeref:struct:AutoincInfo	file:
AuxData	sqlite3.c	/^  struct AuxData {$/;"	s	struct:VdbeFunc	file:
BITVEC_HASH	sqlite3.c	34336;"	d	file:
BITVEC_MXHASH	sqlite3.c	34331;"	d	file:
BITVEC_NBIT	sqlite3.c	34325;"	d	file:
BITVEC_NELEM	sqlite3.c	34323;"	d	file:
BITVEC_NINT	sqlite3.c	34328;"	d	file:
BITVEC_NPTR	sqlite3.c	34338;"	d	file:
BITVEC_SZ	sqlite3.c	34309;"	d	file:
BITVEC_SZELEM	sqlite3.c	34321;"	d	file:
BITVEC_TELEM	sqlite3.c	34319;"	d	file:
BITVEC_USIZE	sqlite3.c	34313;"	d	file:
BLANK	utils.cpp	/^const string HMM_PP::istreamLineReader::BLANK = "";$/;"	m	class:HMM_PP::istreamLineReader	file:
BMS	sqlite3.c	10421;"	d	file:
BTCURSOR_MAX_DEPTH	sqlite3.c	47062;"	d	file:
BTREE_AUTOVACUUM_FULL	sqlite3.c	7916;"	d	file:
BTREE_AUTOVACUUM_INCR	sqlite3.c	7917;"	d	file:
BTREE_AUTOVACUUM_NONE	sqlite3.c	7915;"	d	file:
BTREE_BLOBKEY	sqlite3.c	7992;"	d	file:
BTREE_DEFAULT_CACHE_SIZE	sqlite3.c	8016;"	d	file:
BTREE_FILE_FORMAT	sqlite3.c	8015;"	d	file:
BTREE_FREE_PAGE_COUNT	sqlite3.c	8013;"	d	file:
BTREE_INCR_VACUUM	sqlite3.c	8020;"	d	file:
BTREE_INTKEY	sqlite3.c	7991;"	d	file:
BTREE_LARGEST_ROOT_PAGE	sqlite3.c	8017;"	d	file:
BTREE_MEMORY	sqlite3.c	7944;"	d	file:
BTREE_NO_READLOCK	sqlite3.c	7943;"	d	file:
BTREE_OMIT_JOURNAL	sqlite3.c	7942;"	d	file:
BTREE_SCHEMA_VERSION	sqlite3.c	8014;"	d	file:
BTREE_SINGLE	sqlite3.c	7945;"	d	file:
BTREE_TEXT_ENCODING	sqlite3.c	8018;"	d	file:
BTREE_UNORDERED	sqlite3.c	7946;"	d	file:
BTREE_USER_VERSION	sqlite3.c	8019;"	d	file:
BYTESWAP32	sqlite3.c	44197;"	d	file:
BenignMallocHooks	sqlite3.c	/^static SQLITE_WSD struct BenignMallocHooks {$/;"	s	file:
BenignMallocHooks	sqlite3.c	/^typedef struct BenignMallocHooks BenignMallocHooks;$/;"	t	typeref:struct:BenignMallocHooks	file:
Bitmask	sqlite3.c	/^typedef u64 Bitmask;$/;"	t	file:
Bitvec	sqlite3.c	/^struct Bitvec {$/;"	s	file:
Bitvec	sqlite3.c	/^typedef struct Bitvec Bitvec;$/;"	t	typeref:struct:Bitvec	file:
Bool	sqlite3.c	/^typedef unsigned char Bool;$/;"	t	file:
BtCursor	sqlite3.c	/^struct BtCursor {$/;"	s	file:
BtCursor	sqlite3.c	/^typedef struct BtCursor BtCursor;$/;"	t	typeref:struct:BtCursor	file:
BtLock	sqlite3.c	/^struct BtLock {$/;"	s	file:
BtLock	sqlite3.c	/^typedef struct BtLock BtLock;$/;"	t	typeref:struct:BtLock	file:
BtShared	sqlite3.c	/^struct BtShared {$/;"	s	file:
BtShared	sqlite3.c	/^typedef struct BtShared BtShared;$/;"	t	typeref:struct:BtShared	file:
Btree	sqlite3.c	/^struct Btree {$/;"	s	file:
Btree	sqlite3.c	/^typedef struct Btree Btree;$/;"	t	typeref:struct:Btree	file:
BusyHandler	sqlite3.c	/^struct BusyHandler {$/;"	s	file:
BusyHandler	sqlite3.c	/^typedef struct BusyHandler BusyHandler;$/;"	t	typeref:struct:BusyHandler	file:
ByteRangeLockPB2	sqlite3.c	/^struct ByteRangeLockPB2$/;"	s	file:
CACHE_STALE	sqlite3.c	12614;"	d	file:
CHECK_FOR_INTERRUPT	sqlite3.c	62818;"	d	file:
CHECK_PAGE	sqlite3.c	37955;"	d	file:
CHECK_PAGE	sqlite3.c	37966;"	d	file:
CLEARBIT	sqlite3.c	34569;"	d	file:
CODEC1	sqlite3.c	37204;"	d	file:
CODEC1	sqlite3.c	37210;"	d	file:
CODEC2	sqlite3.c	37206;"	d	file:
CODEC2	sqlite3.c	37211;"	d	file:
COLNAME_COLUMN	sqlite3.c	8266;"	d	file:
COLNAME_DATABASE	sqlite3.c	8264;"	d	file:
COLNAME_DECLTYPE	sqlite3.c	8263;"	d	file:
COLNAME_N	sqlite3.c	8268;"	d	file:
COLNAME_N	sqlite3.c	8271;"	d	file:
COLNAME_N	sqlite3.c	8273;"	d	file:
COLNAME_NAME	sqlite3.c	8262;"	d	file:
COLNAME_TABLE	sqlite3.c	8265;"	d	file:
COLUMN_MASK	sqlite3.c	84644;"	d	file:
COMPARE_DOCID	sqlite3.c	113944;"	d	file:
CTIMEOPT_VAL	sqlite3.c	12105;"	d	file:
CTIMEOPT_VAL_	sqlite3.c	12104;"	d	file:
CTRL_FREE	sqlite3.c	16181;"	d	file:
CTRL_LOGSIZE	sqlite3.c	16180;"	d	file:
CURSOR_FAULT	sqlite3.c	47130;"	d	file:
CURSOR_INVALID	sqlite3.c	47127;"	d	file:
CURSOR_REQUIRESEEK	sqlite3.c	47129;"	d	file:
CURSOR_VALID	sqlite3.c	47128;"	d	file:
CellInfo	sqlite3.c	/^struct CellInfo {$/;"	s	file:
CellInfo	sqlite3.c	/^typedef struct CellInfo CellInfo;$/;"	t	typeref:struct:CellInfo	file:
ChooseLeaf	sqlite3.c	/^static int ChooseLeaf($/;"	f	file:
Cleanup	sqlite3.c	/^static void Cleanup(Vdbe *p){$/;"	f	file:
CollSeq	sqlite3.c	/^struct CollSeq {$/;"	s	file:
CollSeq	sqlite3.c	/^typedef struct CollSeq CollSeq;$/;"	t	typeref:struct:CollSeq	file:
Column	sqlite3.c	/^struct Column {$/;"	s	file:
Column	sqlite3.c	/^typedef struct Column Column;$/;"	t	typeref:struct:Column	file:
CountCtx	sqlite3.c	/^struct CountCtx {$/;"	s	file:
CountCtx	sqlite3.c	/^typedef struct CountCtx CountCtx;$/;"	t	typeref:struct:CountCtx	file:
D	sqlite3.c	/^  int Y, M, D;       \/* Year, month, and day *\/$/;"	m	struct:DateTime	file:
DB_Empty	sqlite3.c	9326;"	d	file:
DB_SchemaLoaded	sqlite3.c	9324;"	d	file:
DB_UnresetViews	sqlite3.c	9325;"	d	file:
DCOORD	sqlite3.c	124607;"	d	file:
DIRECT_MODE	sqlite3.c	42389;"	d	file:
DOCID_CMP	sqlite3.c	115885;"	d	file:
DOTLOCK_SUFFIX	sqlite3.c	26337;"	d	file:
DO_OS_MALLOC_TEST	sqlite3.c	14283;"	d	file:
DO_OS_MALLOC_TEST	sqlite3.c	14290;"	d	file:
Data	Data.cpp	/^HMM_PP::Data::Data()$/;"	f	class:HMM_PP::Data
DateTime	sqlite3.c	/^struct DateTime {$/;"	s	file:
DateTime	sqlite3.c	/^typedef struct DateTime DateTime;$/;"	t	typeref:struct:DateTime	file:
Db	sqlite3.c	/^struct Db {$/;"	s	file:
Db	sqlite3.c	/^typedef struct Db Db;$/;"	t	typeref:struct:Db	file:
DbClearProperty	sqlite3.c	9312;"	d	file:
DbFixer	sqlite3.c	/^struct DbFixer {$/;"	s	file:
DbFixer	sqlite3.c	/^typedef struct DbFixer DbFixer;$/;"	t	typeref:struct:DbFixer	file:
DbHasAnyProperty	sqlite3.c	9310;"	d	file:
DbHasProperty	sqlite3.c	9309;"	d	file:
DbPage	sqlite3.c	/^typedef struct PgHdr DbPage;$/;"	t	typeref:struct:PgHdr	file:
DbSetProperty	sqlite3.c	9311;"	d	file:
Deephemeralize	sqlite3.c	62402;"	d	file:
EIGHT_BYTE_ALIGNMENT	sqlite3.c	7733;"	d	file:
EIGHT_BYTE_ALIGNMENT	sqlite3.c	7735;"	d	file:
EMISS_FUNC	UnivariateCategoricalModelParams.cpp	108;"	d	file:
EMISS_FUNC	UnivariateQuantitativeModelParams.cpp	85;"	d	file:
ENC	sqlite3.c	9517;"	d	file:
EP2_Irreducible	sqlite3.c	10313;"	d	file:
EP2_MallocedToken	sqlite3.c	10312;"	d	file:
EPS	CRandom.cpp	/^const double CRandom::EPS=3.0e-16;$/;"	m	class:CRandom	file:
EPS	Simplex.cpp	/^const double HMM_PP::Simplex::EPS = 1e-8;$/;"	m	class:HMM_PP::Simplex	file:
EP_Agg	sqlite3.c	10293;"	d	file:
EP_DblQuoted	sqlite3.c	10298;"	d	file:
EP_Distinct	sqlite3.c	10296;"	d	file:
EP_Error	sqlite3.c	10295;"	d	file:
EP_ExpCollate	sqlite3.c	10300;"	d	file:
EP_FixedDest	sqlite3.c	10301;"	d	file:
EP_FromJoin	sqlite3.c	10292;"	d	file:
EP_InfixFunc	sqlite3.c	10299;"	d	file:
EP_IntValue	sqlite3.c	10302;"	d	file:
EP_Reduced	sqlite3.c	10305;"	d	file:
EP_Resolved	sqlite3.c	10294;"	d	file:
EP_Static	sqlite3.c	10307;"	d	file:
EP_TokenOnly	sqlite3.c	10306;"	d	file:
EP_VarSelect	sqlite3.c	10297;"	d	file:
EP_xIsSelect	sqlite3.c	10303;"	d	file:
ERR_TRACE	sqlite3.c	23046;"	d	file:
EXCLUSIVE_LOCK	sqlite3.c	9061;"	d	file:
EXPRDUP_REDUCE	sqlite3.c	10349;"	d	file:
EXPR_FULLSIZE	sqlite3.c	10341;"	d	file:
EXPR_REDUCEDSIZE	sqlite3.c	10342;"	d	file:
EXPR_TOKENONLYSIZE	sqlite3.c	10343;"	d	file:
EXTRA_SIZE	sqlite3.c	46895;"	d	file:
ExpandBlob	sqlite3.c	62410;"	d	file:
Expr	sqlite3.c	/^struct Expr {$/;"	s	file:
Expr	sqlite3.c	/^typedef struct Expr Expr;$/;"	t	typeref:struct:Expr	file:
ExprClearProperty	sqlite3.c	10334;"	d	file:
ExprHasAnyProperty	sqlite3.c	10332;"	d	file:
ExprHasProperty	sqlite3.c	10331;"	d	file:
ExprList	sqlite3.c	/^struct ExprList {$/;"	s	file:
ExprList	sqlite3.c	/^typedef struct ExprList ExprList;$/;"	t	typeref:struct:ExprList	file:
ExprList_item	sqlite3.c	/^  struct ExprList_item {$/;"	s	struct:ExprList	file:
ExprSetIrreducible	sqlite3.c	10322;"	d	file:
ExprSetIrreducible	sqlite3.c	10324;"	d	file:
ExprSetProperty	sqlite3.c	10333;"	d	file:
ExprSpan	sqlite3.c	/^struct ExprSpan {$/;"	s	file:
ExprSpan	sqlite3.c	/^typedef struct ExprSpan ExprSpan;$/;"	t	typeref:struct:ExprSpan	file:
FABS	sqlite3.c	126167;"	d	file:
FILEHANDLEID	sqlite3.c	36923;"	d	file:
FKey	sqlite3.c	/^struct FKey {$/;"	s	file:
FKey	sqlite3.c	/^typedef struct FKey FKey;$/;"	t	typeref:struct:FKey	file:
FLAG_INTERN	sqlite3.c	18887;"	d	file:
FLAG_SIGNED	sqlite3.c	18886;"	d	file:
FLAG_STRING	sqlite3.c	18888;"	d	file:
FOREGUARD	sqlite3.c	14946;"	d	file:
FTS3_DOCID_SEARCH	sqlite3.c	112043;"	d	file:
FTS3_EVAL_FILTER	sqlite3.c	112023;"	d	file:
FTS3_EVAL_MATCHINFO	sqlite3.c	112025;"	d	file:
FTS3_EVAL_NEXT	sqlite3.c	112024;"	d	file:
FTS3_FULLSCAN_SEARCH	sqlite3.c	112042;"	d	file:
FTS3_FULLTEXT_SEARCH	sqlite3.c	112044;"	d	file:
FTS3_HASH_BINARY	sqlite3.c	111750;"	d	file:
FTS3_HASH_STRING	sqlite3.c	111749;"	d	file:
FTS3_MATCHINFO_AVGLENGTH	sqlite3.c	122906;"	d	file:
FTS3_MATCHINFO_DEFAULT	sqlite3.c	122914;"	d	file:
FTS3_MATCHINFO_HITS	sqlite3.c	122909;"	d	file:
FTS3_MATCHINFO_LCS	sqlite3.c	122908;"	d	file:
FTS3_MATCHINFO_LENGTH	sqlite3.c	122907;"	d	file:
FTS3_MATCHINFO_NCOL	sqlite3.c	122904;"	d	file:
FTS3_MATCHINFO_NDOC	sqlite3.c	122905;"	d	file:
FTS3_MATCHINFO_NPHRASE	sqlite3.c	122903;"	d	file:
FTS3_MAX_PENDING_DATA	sqlite3.c	111813;"	d	file:
FTS3_MERGE_COUNT	sqlite3.c	111803;"	d	file:
FTS3_NODE_CHUNKSIZE	sqlite3.c	119671;"	d	file:
FTS3_NODE_CHUNKSIZE	sqlite3.c	119674;"	d	file:
FTS3_NODE_CHUNK_THRESHOLD	sqlite3.c	119672;"	d	file:
FTS3_NODE_CHUNK_THRESHOLD	sqlite3.c	119675;"	d	file:
FTS3_NODE_PADDING	sqlite3.c	119649;"	d	file:
FTS3_SEGCURSOR_ALL	sqlite3.c	112171;"	d	file:
FTS3_SEGCURSOR_PENDING	sqlite3.c	112170;"	d	file:
FTS3_SEGDIR_MAXLEVEL	sqlite3.c	111848;"	d	file:
FTS3_SEGDIR_MAXLEVEL_STR	sqlite3.c	111849;"	d	file:
FTS3_SEGMENT_COLUMN_FILTER	sqlite3.c	112183;"	d	file:
FTS3_SEGMENT_IGNORE_EMPTY	sqlite3.c	112182;"	d	file:
FTS3_SEGMENT_PREFIX	sqlite3.c	112184;"	d	file:
FTS3_SEGMENT_REQUIRE_POS	sqlite3.c	112181;"	d	file:
FTS3_SEGMENT_SCAN	sqlite3.c	112185;"	d	file:
FTS3_TERMS_SCHEMA	sqlite3.c	116480;"	d	file:
FTS3_VARINT_MAX	sqlite3.c	111831;"	d	file:
FTS4AUX_EQ_CONSTRAINT	sqlite3.c	116559;"	d	file:
FTS4AUX_GE_CONSTRAINT	sqlite3.c	116560;"	d	file:
FTS4AUX_LE_CONSTRAINT	sqlite3.c	116561;"	d	file:
FTSQUERY_AND	sqlite3.c	112141;"	d	file:
FTSQUERY_NEAR	sqlite3.c	112139;"	d	file:
FTSQUERY_NOT	sqlite3.c	112140;"	d	file:
FTSQUERY_OR	sqlite3.c	112142;"	d	file:
FTSQUERY_PHRASE	sqlite3.c	112143;"	d	file:
FUNCTION	sqlite3.c	9652;"	d	file:
FileChunk	sqlite3.c	/^struct FileChunk {$/;"	s	file:
FileChunk	sqlite3.c	/^typedef struct FileChunk FileChunk;$/;"	t	typeref:struct:FileChunk	file:
FilePoint	sqlite3.c	/^struct FilePoint {$/;"	s	file:
FilePoint	sqlite3.c	/^typedef struct FilePoint FilePoint;$/;"	t	typeref:struct:FilePoint	file:
FormatMessageW	sqlite3.c	31495;"	d	file:
Fts3Cursor	sqlite3.c	/^struct Fts3Cursor {$/;"	s	file:
Fts3Cursor	sqlite3.c	/^typedef struct Fts3Cursor Fts3Cursor;$/;"	t	typeref:struct:Fts3Cursor	file:
Fts3DeferredToken	sqlite3.c	/^struct Fts3DeferredToken {$/;"	s	file:
Fts3DeferredToken	sqlite3.c	/^typedef struct Fts3DeferredToken Fts3DeferredToken;$/;"	t	typeref:struct:Fts3DeferredToken	file:
Fts3Doclist	sqlite3.c	/^struct Fts3Doclist {$/;"	s	file:
Fts3Doclist	sqlite3.c	/^typedef struct Fts3Doclist Fts3Doclist;$/;"	t	typeref:struct:Fts3Doclist	file:
Fts3Expr	sqlite3.c	/^struct Fts3Expr {$/;"	s	file:
Fts3Expr	sqlite3.c	/^typedef struct Fts3Expr Fts3Expr;$/;"	t	typeref:struct:Fts3Expr	file:
Fts3Hash	sqlite3.c	/^struct Fts3Hash {$/;"	s	file:
Fts3Hash	sqlite3.c	/^typedef struct Fts3Hash Fts3Hash;$/;"	t	typeref:struct:Fts3Hash	file:
Fts3HashElem	sqlite3.c	/^struct Fts3HashElem {$/;"	s	file:
Fts3HashElem	sqlite3.c	/^typedef struct Fts3HashElem Fts3HashElem;$/;"	t	typeref:struct:Fts3HashElem	file:
Fts3Index	sqlite3.c	/^  struct Fts3Index {$/;"	s	struct:Fts3Table	file:
Fts3MultiSegReader	sqlite3.c	/^struct Fts3MultiSegReader {$/;"	s	file:
Fts3MultiSegReader	sqlite3.c	/^typedef struct Fts3MultiSegReader Fts3MultiSegReader;$/;"	t	typeref:struct:Fts3MultiSegReader	file:
Fts3Phrase	sqlite3.c	/^struct Fts3Phrase {$/;"	s	file:
Fts3Phrase	sqlite3.c	/^typedef struct Fts3Phrase Fts3Phrase;$/;"	t	typeref:struct:Fts3Phrase	file:
Fts3PhraseToken	sqlite3.c	/^struct Fts3PhraseToken {$/;"	s	file:
Fts3PhraseToken	sqlite3.c	/^typedef struct Fts3PhraseToken Fts3PhraseToken;$/;"	t	typeref:struct:Fts3PhraseToken	file:
Fts3SegFilter	sqlite3.c	/^struct Fts3SegFilter {$/;"	s	file:
Fts3SegFilter	sqlite3.c	/^typedef struct Fts3SegFilter Fts3SegFilter;$/;"	t	typeref:struct:Fts3SegFilter	file:
Fts3SegReader	sqlite3.c	/^struct Fts3SegReader {$/;"	s	file:
Fts3SegReader	sqlite3.c	/^typedef struct Fts3SegReader Fts3SegReader;$/;"	t	typeref:struct:Fts3SegReader	file:
Fts3Table	sqlite3.c	/^struct Fts3Table {$/;"	s	file:
Fts3Table	sqlite3.c	/^typedef struct Fts3Table Fts3Table;$/;"	t	typeref:struct:Fts3Table	file:
Fts3TokenAndCost	sqlite3.c	/^struct Fts3TokenAndCost {$/;"	s	file:
Fts3TokenAndCost	sqlite3.c	/^typedef struct Fts3TokenAndCost Fts3TokenAndCost;$/;"	t	typeref:struct:Fts3TokenAndCost	file:
Fts3auxColstats	sqlite3.c	/^  struct Fts3auxColstats {$/;"	s	struct:Fts3auxCursor	file:
Fts3auxCursor	sqlite3.c	/^struct Fts3auxCursor {$/;"	s	file:
Fts3auxCursor	sqlite3.c	/^typedef struct Fts3auxCursor Fts3auxCursor;$/;"	t	typeref:struct:Fts3auxCursor	file:
Fts3auxTable	sqlite3.c	/^struct Fts3auxTable {$/;"	s	file:
Fts3auxTable	sqlite3.c	/^typedef struct Fts3auxTable Fts3auxTable;$/;"	t	typeref:struct:Fts3auxTable	file:
FuncDef	sqlite3.c	/^struct FuncDef {$/;"	s	file:
FuncDef	sqlite3.c	/^typedef struct FuncDef FuncDef;$/;"	t	typeref:struct:FuncDef	file:
FuncDefHash	sqlite3.c	/^struct FuncDefHash {$/;"	s	file:
FuncDefHash	sqlite3.c	/^typedef struct FuncDefHash FuncDefHash;$/;"	t	typeref:struct:FuncDefHash	file:
FuncDestructor	sqlite3.c	/^struct FuncDestructor {$/;"	s	file:
FuncDestructor	sqlite3.c	/^typedef struct FuncDestructor FuncDestructor;$/;"	t	typeref:struct:FuncDestructor	file:
GLOBAL	sqlite3.c	7801;"	d	file:
GLOBAL	sqlite3.c	7807;"	d	file:
GetCurrentProcessId	sqlite3.c	/^int GetCurrentProcessId(void) {$/;"	f
GetTempPathA	sqlite3.c	31855;"	d	file:
GlogUpperToLower	sqlite3.c	82710;"	d	file:
GlogUpperToLower	sqlite3.c	82712;"	d	file:
HANDLE_TO_WINFILE	sqlite3.c	31861;"	d	file:
HASHSIZE	sqlite3.c	124516;"	d	file:
HASHTABLE_HASH_1	sqlite3.c	44111;"	d	file:
HASHTABLE_NPAGE	sqlite3.c	44110;"	d	file:
HASHTABLE_NPAGE_ONE	sqlite3.c	44119;"	d	file:
HASHTABLE_NSLOT	sqlite3.c	44112;"	d	file:
HAVE_FULLFSYNC	sqlite3.c	27614;"	d	file:
HAVE_FULLFSYNC	sqlite3.c	27616;"	d	file:
HAVE_LOCALTIME_S	sqlite3.c	13531;"	d	file:
Hash	sqlite3.c	/^struct Hash {$/;"	s	file:
Hash	sqlite3.c	/^typedef struct Hash Hash;$/;"	t	typeref:struct:Hash	file:
HashElem	sqlite3.c	/^struct HashElem {$/;"	s	file:
HashElem	sqlite3.c	/^typedef struct HashElem HashElem;$/;"	t	typeref:struct:HashElem	file:
HiddenStateParams	ModelParams.cpp	/^HMM_PP::ModelParams::HiddenStateParams::HiddenStateParams(istream& stream)$/;"	f	class:HMM_PP::ModelParams::HiddenStateParams
HomogeneousModelParams	HomogeneousModelParams.cpp	/^HMM_PP::HomogeneousModelParams::HomogeneousModelParams(HiddenStateParams* params)$/;"	f	class:HMM_PP::HomogeneousModelParams
IA	CRandom.cpp	/^const int CRandom::IA=16807;$/;"	m	class:CRandom	file:
IM	CRandom.cpp	/^const int CRandom::IM=2147483647;$/;"	m	class:CRandom	file:
INCL_DOSDATETIME	sqlite3.c	8987;"	d	file:
INCL_DOSERRORS	sqlite3.c	8989;"	d	file:
INCL_DOSFILEMGR	sqlite3.c	8988;"	d	file:
INCL_DOSMISC	sqlite3.c	8990;"	d	file:
INCL_DOSMODULEMGR	sqlite3.c	8992;"	d	file:
INCL_DOSPROCESS	sqlite3.c	8991;"	d	file:
INCL_DOSSEMAPHORES	sqlite3.c	8993;"	d	file:
INT16_TYPE	sqlite3.c	7646;"	d	file:
INT16_TYPE	sqlite3.c	7648;"	d	file:
INT8_TYPE	sqlite3.c	7660;"	d	file:
INT8_TYPE	sqlite3.c	7662;"	d	file:
INTERFACE	sqlite3.c	103461;"	d	file:
INVALID_FILE_ATTRIBUTES	sqlite3.c	31486;"	d	file:
INVALID_SET_FILE_POINTER	sqlite3.c	32152;"	d	file:
IN_DECLARE_VTAB	sqlite3.c	10868;"	d	file:
IN_DECLARE_VTAB	sqlite3.c	10870;"	d	file:
IN_INDEX_EPH	sqlite3.c	11747;"	d	file:
IN_INDEX_INDEX	sqlite3.c	11748;"	d	file:
IN_INDEX_ROWID	sqlite3.c	11746;"	d	file:
IOMETHODS	sqlite3.c	28666;"	d	file:
IOTRACE	sqlite3.c	11796;"	d	file:
IOTRACE	sqlite3.c	11800;"	d	file:
IQ	CRandom.cpp	/^const int CRandom::IQ=127773;$/;"	m	class:CRandom	file:
IR	CRandom.cpp	/^const int CRandom::IR=2836;$/;"	m	class:CRandom	file:
ISAUTOVACUUM	sqlite3.c	47209;"	d	file:
ISAUTOVACUUM	sqlite3.c	47211;"	d	file:
IS_BIG_INT	sqlite3.c	526;"	d	file:
IS_LOCK_ERROR	sqlite3.c	24443;"	d	file:
IcuCursor	sqlite3.c	/^struct IcuCursor {$/;"	s	file:
IcuCursor	sqlite3.c	/^typedef struct IcuCursor IcuCursor;$/;"	t	typeref:struct:IcuCursor	file:
IcuTokenizer	sqlite3.c	/^struct IcuTokenizer {$/;"	s	file:
IcuTokenizer	sqlite3.c	/^typedef struct IcuTokenizer IcuTokenizer;$/;"	t	typeref:struct:IcuTokenizer	file:
IdChar	sqlite3.c	107102;"	d	file:
IdChar	sqlite3.c	107120;"	d	file:
IdChar	sqlite3.c	107572;"	d	file:
IdChar	sqlite3.c	107576;"	d	file:
IdList	sqlite3.c	/^struct IdList {$/;"	s	file:
IdList	sqlite3.c	/^typedef struct IdList IdList;$/;"	t	typeref:struct:IdList	file:
IdList_item	sqlite3.c	/^  struct IdList_item {$/;"	s	struct:IdList	file:
IgnorableOrderby	sqlite3.c	10681;"	d	file:
InLoop	sqlite3.c	/^      struct InLoop {$/;"	s	struct:WhereLevel::__anon7::__anon8	file:
Incrblob	sqlite3.c	/^struct Incrblob {$/;"	s	file:
Incrblob	sqlite3.c	/^typedef struct Incrblob Incrblob;$/;"	t	typeref:struct:Incrblob	file:
Index	sqlite3.c	/^struct Index {$/;"	s	file:
Index	sqlite3.c	/^typedef struct Index Index;$/;"	t	typeref:struct:Index	file:
IndexSample	sqlite3.c	/^struct IndexSample {$/;"	s	file:
IndexSample	sqlite3.c	/^typedef struct IndexSample IndexSample;$/;"	t	typeref:struct:IndexSample	file:
InferredDataFit	InferredDataFit.cpp	/^HMM_PP::InferredDataFit::InferredDataFit(const Data* data, Model* model, bool timeEvents)$/;"	f	class:HMM_PP::InferredDataFit
InitData	sqlite3.c	/^} InitData;$/;"	t	typeref:struct:__anon9	file:
IntegrityCk	sqlite3.c	/^struct IntegrityCk {$/;"	s	file:
IntegrityCk	sqlite3.c	/^typedef struct IntegrityCk IntegrityCk;$/;"	t	typeref:struct:IntegrityCk	file:
IsHiddenColumn	sqlite3.c	9926;"	d	file:
IsHiddenColumn	sqlite3.c	9929;"	d	file:
IsVirtual	sqlite3.c	9925;"	d	file:
IsVirtual	sqlite3.c	9928;"	d	file:
JOURNAL_CHUNKSIZE	sqlite3.c	69649;"	d	file:
JOURNAL_HDR_SZ	sqlite3.c	37536;"	d	file:
JOURNAL_PG_SZ	sqlite3.c	37530;"	d	file:
JT_CROSS	sqlite3.c	10470;"	d	file:
JT_ERROR	sqlite3.c	10475;"	d	file:
JT_INNER	sqlite3.c	10469;"	d	file:
JT_LEFT	sqlite3.c	10472;"	d	file:
JT_NATURAL	sqlite3.c	10471;"	d	file:
JT_OUTER	sqlite3.c	10474;"	d	file:
JT_RIGHT	sqlite3.c	10473;"	d	file:
JournalFile	sqlite3.c	/^struct JournalFile {$/;"	s	file:
JournalFile	sqlite3.c	/^typedef struct JournalFile JournalFile;$/;"	t	typeref:struct:JournalFile	file:
JournalFileMethods	sqlite3.c	/^static struct sqlite3_io_methods JournalFileMethods = {$/;"	v	typeref:struct:sqlite3_io_methods	file:
KeyClass	sqlite3.c	/^typedef struct KeyClass KeyClass;$/;"	t	typeref:struct:KeyClass	file:
KeyInfo	sqlite3.c	/^struct KeyInfo {$/;"	s	file:
KeyInfo	sqlite3.c	/^typedef struct KeyInfo KeyInfo;$/;"	t	typeref:struct:KeyInfo	file:
LARGEST_INT64	sqlite3.c	7709;"	d	file:
LCS_ITERATOR_FINISHED	sqlite3.c	123756;"	d	file:
LIKEFUNC	sqlite3.c	9658;"	d	file:
LOCKFILE_FAIL_IMMEDIATELY	sqlite3.c	32426;"	d	file:
LOCK_TIMEOUT	sqlite3.c	22414;"	d	file:
LOGMAX	sqlite3.c	16175;"	d	file:
LOG_10_E	ModelParams.cpp	/^const BaseReal HMM_PP::ModelParams::LOG_10_E = log10(exp(1));$/;"	m	class:HMM_PP::ModelParams	file:
LONGDOUBLE_TYPE	sqlite3.c	7554;"	d	file:
LONGDOUBLE_TYPE	sqlite3.c	7666;"	d	file:
LcsIterator	sqlite3.c	/^struct LcsIterator {$/;"	s	file:
LcsIterator	sqlite3.c	/^typedef struct LcsIterator LcsIterator;$/;"	t	typeref:struct:LcsIterator	file:
LikeOp	sqlite3.c	/^struct LikeOp {$/;"	s	file:
LimitVal	sqlite3.c	/^struct LimitVal {$/;"	s	file:
LinearPickNext	sqlite3.c	/^static RtreeCell *LinearPickNext($/;"	f	file:
LinearPickSeeds	sqlite3.c	/^static void LinearPickSeeds($/;"	f	file:
LoadDoclistCtx	sqlite3.c	/^struct LoadDoclistCtx {$/;"	s	file:
LoadDoclistCtx	sqlite3.c	/^typedef struct LoadDoclistCtx LoadDoclistCtx;$/;"	t	typeref:struct:LoadDoclistCtx	file:
LockFile	sqlite3.c	31857;"	d	file:
LockFileEx	sqlite3.c	31859;"	d	file:
Lookaside	sqlite3.c	/^struct Lookaside {$/;"	s	file:
Lookaside	sqlite3.c	/^typedef struct Lookaside Lookaside;$/;"	t	typeref:struct:Lookaside	file:
LookasideSlot	sqlite3.c	/^struct LookasideSlot {$/;"	s	file:
LookasideSlot	sqlite3.c	/^typedef struct LookasideSlot LookasideSlot;$/;"	t	typeref:struct:LookasideSlot	file:
M	sqlite3.c	/^  int Y, M, D;       \/* Year, month, and day *\/$/;"	m	struct:DateTime	file:
MASTER_NAME	sqlite3.c	7760;"	d	file:
MASTER_ROOT	sqlite3.c	7766;"	d	file:
MAX	sqlite3.c	124688;"	d	file:
MAX_6BYTE	sqlite3.c	60111;"	d	file:
MAX_PATHNAME	sqlite3.c	24437;"	d	file:
MAX_ROWID	sqlite3.c	66561;"	d	file:
MAX_SECTOR_SIZE	sqlite3.c	37220;"	d	file:
MEM5LINK	sqlite3.c	16238;"	d	file:
MEMCELLSIZE	sqlite3.c	56997;"	d	file:
MEMDB	sqlite3.c	37545;"	d	file:
MEMDB	sqlite3.c	37547;"	d	file:
MEMTYPE_DB	sqlite3.c	11845;"	d	file:
MEMTYPE_HEAP	sqlite3.c	11841;"	d	file:
MEMTYPE_LOOKASIDE	sqlite3.c	11842;"	d	file:
MEMTYPE_PCACHE	sqlite3.c	11844;"	d	file:
MEMTYPE_SCRATCH	sqlite3.c	11843;"	d	file:
MEM_Agg	sqlite3.c	12675;"	d	file:
MEM_Blob	sqlite3.c	12660;"	d	file:
MEM_Dyn	sqlite3.c	12672;"	d	file:
MEM_Ephem	sqlite3.c	12674;"	d	file:
MEM_Frame	sqlite3.c	12662;"	d	file:
MEM_Int	sqlite3.c	12658;"	d	file:
MEM_Invalid	sqlite3.c	12663;"	d	file:
MEM_Null	sqlite3.c	12656;"	d	file:
MEM_Real	sqlite3.c	12659;"	d	file:
MEM_RowSet	sqlite3.c	12661;"	d	file:
MEM_Static	sqlite3.c	12673;"	d	file:
MEM_Str	sqlite3.c	12657;"	d	file:
MEM_Term	sqlite3.c	12671;"	d	file:
MEM_TypeMask	sqlite3.c	12664;"	d	file:
MEM_Zero	sqlite3.c	12676;"	d	file:
MEM_Zero	sqlite3.c	12678;"	d	file:
MEM_Zero	sqlite3.c	12679;"	d	file:
MIN	sqlite3.c	111824;"	d	file:
MIN	sqlite3.c	124691;"	d	file:
MIN	sqlite3.c	55703;"	d	file:
MIN	sqlite3.c	69654;"	d	file:
MX_CELL	sqlite3.c	46822;"	d	file:
MX_CELL_SIZE	sqlite3.c	46815;"	d	file:
MX_CLOSE_ATTEMPT	sqlite3.c	32195;"	d	file:
MX_DELETION_ATTEMPTS	sqlite3.c	33737;"	d	file:
MX_SMALL	sqlite3.c	15448;"	d	file:
MatchInfo	sqlite3.c	/^struct MatchInfo {$/;"	s	file:
MatchInfo	sqlite3.c	/^typedef struct MatchInfo MatchInfo;$/;"	t	typeref:struct:MatchInfo	file:
Mem	sqlite3.c	/^struct Mem {$/;"	s	file:
Mem	sqlite3.c	/^typedef struct Mem Mem;$/;"	t	typeref:struct:Mem	file:
Mem0Global	sqlite3.c	/^static SQLITE_WSD struct Mem0Global {$/;"	s	file:
Mem3Block	sqlite3.c	/^struct Mem3Block {$/;"	s	file:
Mem3Block	sqlite3.c	/^typedef struct Mem3Block Mem3Block;$/;"	t	typeref:struct:Mem3Block	file:
Mem3Global	sqlite3.c	/^static SQLITE_WSD struct Mem3Global {$/;"	s	file:
Mem5Global	sqlite3.c	/^static SQLITE_WSD struct Mem5Global {$/;"	s	file:
Mem5Link	sqlite3.c	/^struct Mem5Link {$/;"	s	file:
Mem5Link	sqlite3.c	/^typedef struct Mem5Link Mem5Link;$/;"	t	typeref:struct:Mem5Link	file:
MemBlockHdr	sqlite3.c	/^struct MemBlockHdr {$/;"	s	file:
MemJournal	sqlite3.c	/^struct MemJournal {$/;"	s	file:
MemJournal	sqlite3.c	/^typedef struct MemJournal MemJournal;$/;"	t	typeref:struct:MemJournal	file:
MemJournalMethods	sqlite3.c	/^static const struct sqlite3_io_methods MemJournalMethods = {$/;"	v	typeref:struct:sqlite3_io_methods	file:
MemPage	sqlite3.c	/^struct MemPage {$/;"	s	file:
MemPage	sqlite3.c	/^typedef struct MemPage MemPage;$/;"	t	typeref:struct:MemPage	file:
MemSetTypeFlag	sqlite3.c	12685;"	d	file:
Model	Model.cpp	/^HMM_PP::Model::Model(ModelParams* modelParams)$/;"	f	class:HMM_PP::Model
ModelFromStream	ModelFromStream.cpp	/^HMM_PP::ModelFromStream::ModelFromStream(ModelParams* modelParams)$/;"	f	class:HMM_PP::ModelFromStream
ModelFromStreamNoStorage	ModelFromStreamNoStorage.cpp	/^HMM_PP::ModelFromStreamNoStorage::ModelFromStreamNoStorage(ModelParams* modelParams, DataOutputter<InferredDataFit>* dataOuputter)$/;"	f	class:HMM_PP::ModelFromStreamNoStorage
ModelParams	ModelParams.cpp	/^HMM_PP::ModelParams::ModelParams(HiddenStateParams* params)$/;"	f	class:HMM_PP::ModelParams
ModelWithDB	ModelWithDB.cpp	/^HMM_PP::ModelWithDB::ModelWithDB(ModelParams* modelParams, string dbFile)$/;"	f	class:HMM_PP::ModelWithDB
Module	sqlite3.c	/^struct Module {$/;"	s	file:
Module	sqlite3.c	/^typedef struct Module Module;$/;"	t	typeref:struct:Module	file:
MultivariateCategoricalData	MultivariateCategoricalData.cpp	/^HMM_PP::MultivariateCategoricalData::MultivariateCategoricalData()$/;"	f	class:HMM_PP::MultivariateCategoricalData
MultivariateQuantitativeData	MultivariateQuantitativeData.cpp	/^HMM_PP::MultivariateQuantitativeData::MultivariateQuantitativeData()$/;"	f	class:HMM_PP::MultivariateQuantitativeData
NB	sqlite3.c	53104;"	d	file:
NCELL	sqlite3.c	124643;"	d	file:
NCSIZE	sqlite3.c	14952;"	d	file:
NDEBUG	sqlite3.c	111511;"	d	file:
NDEBUG	sqlite3.c	111900;"	d	file:
NDEBUG	sqlite3.c	124478;"	d	file:
NDEBUG	sqlite3.c	446;"	d	file:
NDELAY	sqlite3.c	108817;"	d	file:
NDIV	CRandom.cpp	/^const int CRandom::NDIV=(1+(IM-1)\/NTAB);$/;"	m	class:CRandom	file:
NEVER	sqlite3.c	111877;"	d	file:
NEVER	sqlite3.c	111880;"	d	file:
NEVER	sqlite3.c	512;"	d	file:
NEVER	sqlite3.c	515;"	d	file:
NEVER	sqlite3.c	518;"	d	file:
NN	sqlite3.c	53103;"	d	file:
NO_LOCK	sqlite3.c	9057;"	d	file:
NTAB	CRandom.cpp	/^const int CRandom::NTAB=32;$/;"	m	class:CRandom	file:
N_HASH	sqlite3.c	15454;"	d	file:
N_SORT_BUCKET	sqlite3.c	35174;"	d	file:
N_STATEMENT	sqlite3.c	127264;"	d	file:
NameContext	sqlite3.c	/^struct NameContext {$/;"	s	file:
NameContext	sqlite3.c	/^typedef struct NameContext NameContext;$/;"	t	typeref:struct:NameContext	file:
OBJ_ANY	sqlite3.c	22421;"	d	file:
OE_Abort	sqlite3.c	9995;"	d	file:
OE_Cascade	sqlite3.c	10003;"	d	file:
OE_Default	sqlite3.c	10005;"	d	file:
OE_Fail	sqlite3.c	9996;"	d	file:
OE_Ignore	sqlite3.c	9997;"	d	file:
OE_None	sqlite3.c	9993;"	d	file:
OE_Replace	sqlite3.c	9998;"	d	file:
OE_Restrict	sqlite3.c	10000;"	d	file:
OE_Rollback	sqlite3.c	9994;"	d	file:
OE_SetDflt	sqlite3.c	10002;"	d	file:
OE_SetNull	sqlite3.c	10001;"	d	file:
OMIT_TEMPDB	sqlite3.c	7573;"	d	file:
OMIT_TEMPDB	sqlite3.c	7575;"	d	file:
OPFLAG_APPEND	sqlite3.c	10888;"	d	file:
OPFLAG_CLEARCACHE	sqlite3.c	10890;"	d	file:
OPFLAG_ISUPDATE	sqlite3.c	10887;"	d	file:
OPFLAG_LASTROWID	sqlite3.c	10886;"	d	file:
OPFLAG_NCHANGE	sqlite3.c	10885;"	d	file:
OPFLAG_USESEEKRESULT	sqlite3.c	10889;"	d	file:
OPFLG_IN1	sqlite3.c	8448;"	d	file:
OPFLG_IN2	sqlite3.c	8449;"	d	file:
OPFLG_IN3	sqlite3.c	8450;"	d	file:
OPFLG_INITIALIZER	sqlite3.c	8453;"	d	file:
OPFLG_JUMP	sqlite3.c	8446;"	d	file:
OPFLG_OUT2	sqlite3.c	8451;"	d	file:
OPFLG_OUT2_PRERELEASE	sqlite3.c	8447;"	d	file:
OPFLG_OUT3	sqlite3.c	8452;"	d	file:
OP_Add	sqlite3.c	8312;"	d	file:
OP_AddImm	sqlite3.c	8323;"	d	file:
OP_Affinity	sqlite3.c	8349;"	d	file:
OP_AggFinal	sqlite3.c	8415;"	d	file:
OP_AggStep	sqlite3.c	8414;"	d	file:
OP_And	sqlite3.c	8340;"	d	file:
OP_AutoCommit	sqlite3.c	8353;"	d	file:
OP_BitAnd	sqlite3.c	8319;"	d	file:
OP_BitNot	sqlite3.c	8343;"	d	file:
OP_BitOr	sqlite3.c	8320;"	d	file:
OP_Blob	sqlite3.c	8305;"	d	file:
OP_Checkpoint	sqlite3.c	8416;"	d	file:
OP_Clear	sqlite3.c	8394;"	d	file:
OP_Close	sqlite3.c	8363;"	d	file:
OP_CollSeq	sqlite3.c	8317;"	d	file:
OP_Column	sqlite3.c	8348;"	d	file:
OP_Compare	sqlite3.c	8338;"	d	file:
OP_Concat	sqlite3.c	8311;"	d	file:
OP_Copy	sqlite3.c	8308;"	d	file:
OP_Count	sqlite3.c	8351;"	d	file:
OP_CreateIndex	sqlite3.c	8395;"	d	file:
OP_CreateTable	sqlite3.c	8396;"	d	file:
OP_Delete	sqlite3.c	8377;"	d	file:
OP_Destroy	sqlite3.c	8393;"	d	file:
OP_Divide	sqlite3.c	8315;"	d	file:
OP_DropIndex	sqlite3.c	8400;"	d	file:
OP_DropTable	sqlite3.c	8399;"	d	file:
OP_DropTrigger	sqlite3.c	8401;"	d	file:
OP_Eq	sqlite3.c	8331;"	d	file:
OP_Expire	sqlite3.c	8420;"	d	file:
OP_Explain	sqlite3.c	8435;"	d	file:
OP_FkCounter	sqlite3.c	8408;"	d	file:
OP_FkIfZero	sqlite3.c	8409;"	d	file:
OP_Found	sqlite3.c	8370;"	d	file:
OP_Function	sqlite3.c	8318;"	d	file:
OP_Ge	sqlite3.c	8336;"	d	file:
OP_Gosub	sqlite3.c	8294;"	d	file:
OP_Goto	sqlite3.c	8293;"	d	file:
OP_Gt	sqlite3.c	8335;"	d	file:
OP_Halt	sqlite3.c	8298;"	d	file:
OP_HaltIfNull	sqlite3.c	8297;"	d	file:
OP_IdxDelete	sqlite3.c	8389;"	d	file:
OP_IdxGE	sqlite3.c	8392;"	d	file:
OP_IdxInsert	sqlite3.c	8388;"	d	file:
OP_IdxLT	sqlite3.c	8391;"	d	file:
OP_IdxRowid	sqlite3.c	8390;"	d	file:
OP_If	sqlite3.c	8344;"	d	file:
OP_IfNeg	sqlite3.c	8412;"	d	file:
OP_IfNot	sqlite3.c	8345;"	d	file:
OP_IfPos	sqlite3.c	8411;"	d	file:
OP_IfZero	sqlite3.c	8413;"	d	file:
OP_IncrVacuum	sqlite3.c	8419;"	d	file:
OP_Insert	sqlite3.c	8375;"	d	file:
OP_InsertInt	sqlite3.c	8376;"	d	file:
OP_Int64	sqlite3.c	8300;"	d	file:
OP_Integer	sqlite3.c	8299;"	d	file:
OP_IntegrityCk	sqlite3.c	8402;"	d	file:
OP_IsNull	sqlite3.c	8346;"	d	file:
OP_IsUnique	sqlite3.c	8371;"	d	file:
OP_JournalMode	sqlite3.c	8417;"	d	file:
OP_Jump	sqlite3.c	8339;"	d	file:
OP_Last	sqlite3.c	8383;"	d	file:
OP_Le	sqlite3.c	8334;"	d	file:
OP_LoadAnalysis	sqlite3.c	8398;"	d	file:
OP_Lt	sqlite3.c	8333;"	d	file:
OP_MakeRecord	sqlite3.c	8350;"	d	file:
OP_MaxPgcnt	sqlite3.c	8432;"	d	file:
OP_MemMax	sqlite3.c	8410;"	d	file:
OP_Move	sqlite3.c	8307;"	d	file:
OP_Multiply	sqlite3.c	8314;"	d	file:
OP_MustBeInt	sqlite3.c	8324;"	d	file:
OP_Ne	sqlite3.c	8332;"	d	file:
OP_NewRowid	sqlite3.c	8374;"	d	file:
OP_Next	sqlite3.c	8387;"	d	file:
OP_Noop	sqlite3.c	8434;"	d	file:
OP_Not	sqlite3.c	8342;"	d	file:
OP_NotExists	sqlite3.c	8372;"	d	file:
OP_NotFound	sqlite3.c	8369;"	d	file:
OP_NotNull	sqlite3.c	8347;"	d	file:
OP_NotUsed_139	sqlite3.c	8438;"	d	file:
OP_NotUsed_140	sqlite3.c	8439;"	d	file:
OP_Null	sqlite3.c	8304;"	d	file:
OP_NullRow	sqlite3.c	8382;"	d	file:
OP_OpenAutoindex	sqlite3.c	8360;"	d	file:
OP_OpenEphemeral	sqlite3.c	8361;"	d	file:
OP_OpenPseudo	sqlite3.c	8362;"	d	file:
OP_OpenRead	sqlite3.c	8358;"	d	file:
OP_OpenWrite	sqlite3.c	8359;"	d	file:
OP_Or	sqlite3.c	8341;"	d	file:
OP_Pagecount	sqlite3.c	8431;"	d	file:
OP_Param	sqlite3.c	8407;"	d	file:
OP_ParseSchema	sqlite3.c	8397;"	d	file:
OP_Permutation	sqlite3.c	8337;"	d	file:
OP_Prev	sqlite3.c	8386;"	d	file:
OP_Program	sqlite3.c	8406;"	d	file:
OP_ReadCookie	sqlite3.c	8355;"	d	file:
OP_Real	sqlite3.c	8301;"	d	file:
OP_RealAffinity	sqlite3.c	8325;"	d	file:
OP_Remainder	sqlite3.c	8316;"	d	file:
OP_ResetCount	sqlite3.c	8378;"	d	file:
OP_ResultRow	sqlite3.c	8310;"	d	file:
OP_Return	sqlite3.c	8295;"	d	file:
OP_Rewind	sqlite3.c	8385;"	d	file:
OP_RowData	sqlite3.c	8380;"	d	file:
OP_RowKey	sqlite3.c	8379;"	d	file:
OP_RowSetAdd	sqlite3.c	8403;"	d	file:
OP_RowSetRead	sqlite3.c	8404;"	d	file:
OP_RowSetTest	sqlite3.c	8405;"	d	file:
OP_Rowid	sqlite3.c	8381;"	d	file:
OP_SCopy	sqlite3.c	8309;"	d	file:
OP_Savepoint	sqlite3.c	8352;"	d	file:
OP_Seek	sqlite3.c	8368;"	d	file:
OP_SeekGe	sqlite3.c	8366;"	d	file:
OP_SeekGt	sqlite3.c	8367;"	d	file:
OP_SeekLe	sqlite3.c	8365;"	d	file:
OP_SeekLt	sqlite3.c	8364;"	d	file:
OP_Sequence	sqlite3.c	8373;"	d	file:
OP_SetCookie	sqlite3.c	8356;"	d	file:
OP_ShiftLeft	sqlite3.c	8321;"	d	file:
OP_ShiftRight	sqlite3.c	8322;"	d	file:
OP_Sort	sqlite3.c	8384;"	d	file:
OP_String	sqlite3.c	8303;"	d	file:
OP_String8	sqlite3.c	8302;"	d	file:
OP_Subtract	sqlite3.c	8313;"	d	file:
OP_TableLock	sqlite3.c	8421;"	d	file:
OP_ToBlob	sqlite3.c	8327;"	d	file:
OP_ToInt	sqlite3.c	8329;"	d	file:
OP_ToNumeric	sqlite3.c	8328;"	d	file:
OP_ToReal	sqlite3.c	8330;"	d	file:
OP_ToText	sqlite3.c	8326;"	d	file:
OP_Trace	sqlite3.c	8433;"	d	file:
OP_Transaction	sqlite3.c	8354;"	d	file:
OP_VBegin	sqlite3.c	8422;"	d	file:
OP_VColumn	sqlite3.c	8427;"	d	file:
OP_VCreate	sqlite3.c	8423;"	d	file:
OP_VDestroy	sqlite3.c	8424;"	d	file:
OP_VFilter	sqlite3.c	8426;"	d	file:
OP_VNext	sqlite3.c	8428;"	d	file:
OP_VOpen	sqlite3.c	8425;"	d	file:
OP_VRename	sqlite3.c	8429;"	d	file:
OP_VUpdate	sqlite3.c	8430;"	d	file:
OP_Vacuum	sqlite3.c	8418;"	d	file:
OP_Variable	sqlite3.c	8306;"	d	file:
OP_VerifyCookie	sqlite3.c	8357;"	d	file:
OP_Yield	sqlite3.c	8296;"	d	file:
OS2_SHM_BASE	sqlite3.c	23153;"	d	file:
OS2_SHM_BASE	sqlite3.c	23155;"	d	file:
OS2_SHM_DMS	sqlite3.c	23158;"	d	file:
OSTRACE	sqlite3.c	22223;"	d	file:
OSTRACE	sqlite3.c	22225;"	d	file:
OSTRACE	sqlite3.c	24555;"	d	file:
OSTRACE	sqlite3.c	24557;"	d	file:
OSTRACE	sqlite3.c	31310;"	d	file:
OSTRACE	sqlite3.c	31312;"	d	file:
OS_VXWORKS	sqlite3.c	24343;"	d	file:
OS_VXWORKS	sqlite3.c	24345;"	d	file:
O_BINARY	sqlite3.c	24741;"	d	file:
O_LARGEFILE	sqlite3.c	24731;"	d	file:
O_LARGEFILE	sqlite3.c	24734;"	d	file:
O_LARGEFILE	sqlite3.c	24735;"	d	file:
O_NOFOLLOW	sqlite3.c	24738;"	d	file:
Op	sqlite3.c	/^typedef struct VdbeOp Op;$/;"	t	typeref:struct:VdbeOp	file:
OpenCounter	sqlite3.c	22385;"	d	file:
OpenCounter	sqlite3.c	22387;"	d	file:
OpenCounter	sqlite3.c	24717;"	d	file:
OpenCounter	sqlite3.c	24719;"	d	file:
OpenCounter	sqlite3.c	31472;"	d	file:
OpenCounter	sqlite3.c	31474;"	d	file:
P4_COLLSEQ	sqlite3.c	8234;"	d	file:
P4_DYNAMIC	sqlite3.c	8232;"	d	file:
P4_FUNCDEF	sqlite3.c	8235;"	d	file:
P4_INT32	sqlite3.c	8244;"	d	file:
P4_INT64	sqlite3.c	8243;"	d	file:
P4_INTARRAY	sqlite3.c	8245;"	d	file:
P4_KEYINFO	sqlite3.c	8236;"	d	file:
P4_KEYINFO_HANDOFF	sqlite3.c	8255;"	d	file:
P4_KEYINFO_STATIC	sqlite3.c	8256;"	d	file:
P4_MEM	sqlite3.c	8238;"	d	file:
P4_MPRINTF	sqlite3.c	8241;"	d	file:
P4_NOTUSED	sqlite3.c	8231;"	d	file:
P4_REAL	sqlite3.c	8242;"	d	file:
P4_STATIC	sqlite3.c	8233;"	d	file:
P4_SUBPROGRAM	sqlite3.c	8246;"	d	file:
P4_TRANSIENT	sqlite3.c	8239;"	d	file:
P4_VDBEFUNC	sqlite3.c	8237;"	d	file:
P4_VTAB	sqlite3.c	8240;"	d	file:
PAGERID	sqlite3.c	36922;"	d	file:
PAGERTRACE	sqlite3.c	36911;"	d	file:
PAGER_ERROR	sqlite3.c	37148;"	d	file:
PAGER_INCR	sqlite3.c	37492;"	d	file:
PAGER_INCR	sqlite3.c	37494;"	d	file:
PAGER_JOURNALMODE_DELETE	sqlite3.c	8626;"	d	file:
PAGER_JOURNALMODE_MEMORY	sqlite3.c	8630;"	d	file:
PAGER_JOURNALMODE_OFF	sqlite3.c	8628;"	d	file:
PAGER_JOURNALMODE_PERSIST	sqlite3.c	8627;"	d	file:
PAGER_JOURNALMODE_QUERY	sqlite3.c	8625;"	d	file:
PAGER_JOURNALMODE_TRUNCATE	sqlite3.c	8629;"	d	file:
PAGER_JOURNALMODE_WAL	sqlite3.c	8631;"	d	file:
PAGER_LOCKINGMODE_EXCLUSIVE	sqlite3.c	8620;"	d	file:
PAGER_LOCKINGMODE_NORMAL	sqlite3.c	8619;"	d	file:
PAGER_LOCKINGMODE_QUERY	sqlite3.c	8618;"	d	file:
PAGER_MAX_PGNO	sqlite3.c	37553;"	d	file:
PAGER_MEMORY	sqlite3.c	8613;"	d	file:
PAGER_MJ_PGNO	sqlite3.c	8604;"	d	file:
PAGER_NO_READLOCK	sqlite3.c	8612;"	d	file:
PAGER_OMIT_JOURNAL	sqlite3.c	8611;"	d	file:
PAGER_OPEN	sqlite3.c	37142;"	d	file:
PAGER_READER	sqlite3.c	37143;"	d	file:
PAGER_WRITER_CACHEMOD	sqlite3.c	37145;"	d	file:
PAGER_WRITER_DBMOD	sqlite3.c	37146;"	d	file:
PAGER_WRITER_FINISHED	sqlite3.c	37147;"	d	file:
PAGER_WRITER_LOCKED	sqlite3.c	37144;"	d	file:
PAGE_TO_PGHDR1	sqlite3.c	35434;"	d	file:
PCache	sqlite3.c	/^struct PCache {$/;"	s	file:
PCache	sqlite3.c	/^typedef struct PCache PCache;$/;"	t	typeref:struct:PCache	file:
PCache1	sqlite3.c	/^struct PCache1 {$/;"	s	file:
PCache1	sqlite3.c	/^typedef struct PCache1 PCache1;$/;"	t	typeref:struct:PCache1	file:
PCacheGlobal	sqlite3.c	/^static SQLITE_WSD struct PCacheGlobal {$/;"	s	file:
PENDING_BYTE	sqlite3.c	9119;"	d	file:
PENDING_BYTE	sqlite3.c	9121;"	d	file:
PENDING_BYTE_PAGE	sqlite3.c	47135;"	d	file:
PENDING_LOCK	sqlite3.c	9060;"	d	file:
PGHDR1_TO_PAGE	sqlite3.c	35433;"	d	file:
PGHDR_DIRTY	sqlite3.c	8785;"	d	file:
PGHDR_DONT_WRITE	sqlite3.c	8790;"	d	file:
PGHDR_NEED_READ	sqlite3.c	8788;"	d	file:
PGHDR_NEED_SYNC	sqlite3.c	8786;"	d	file:
PGHDR_REUSE_UNLIKELY	sqlite3.c	8789;"	d	file:
PGroup	sqlite3.c	/^struct PGroup {$/;"	s	file:
PGroup	sqlite3.c	/^typedef struct PGroup PGroup;$/;"	t	typeref:struct:PGroup	file:
POSITION_LIST_END	sqlite3.c	113580;"	d	file:
POS_COLUMN	sqlite3.c	111862;"	d	file:
POS_END	sqlite3.c	111863;"	d	file:
PROXY_CONCHVERSION	sqlite3.c	30308;"	d	file:
PROXY_HEADERLEN	sqlite3.c	30309;"	d	file:
PROXY_HOSTIDLEN	sqlite3.c	30272;"	d	file:
PROXY_MAXCONCHLEN	sqlite3.c	30311;"	d	file:
PROXY_PATHINDEX	sqlite3.c	30310;"	d	file:
PTF_INTKEY	sqlite3.c	46848;"	d	file:
PTF_LEAF	sqlite3.c	46851;"	d	file:
PTF_LEAFDATA	sqlite3.c	46850;"	d	file:
PTF_ZERODATA	sqlite3.c	46849;"	d	file:
PTRMAP_BTREE	sqlite3.c	47191;"	d	file:
PTRMAP_FREEPAGE	sqlite3.c	47188;"	d	file:
PTRMAP_ISPAGE	sqlite3.c	47154;"	d	file:
PTRMAP_OVERFLOW1	sqlite3.c	47189;"	d	file:
PTRMAP_OVERFLOW2	sqlite3.c	47190;"	d	file:
PTRMAP_PAGENO	sqlite3.c	47152;"	d	file:
PTRMAP_PTROFFSET	sqlite3.c	47153;"	d	file:
PTRMAP_ROOTPAGE	sqlite3.c	47187;"	d	file:
Pager	sqlite3.c	/^struct Pager {$/;"	s	file:
Pager	sqlite3.c	/^typedef struct Pager Pager;$/;"	t	typeref:struct:Pager	file:
PagerSavepoint	sqlite3.c	/^struct PagerSavepoint {$/;"	s	file:
PagerSavepoint	sqlite3.c	/^typedef struct PagerSavepoint PagerSavepoint;$/;"	t	typeref:struct:PagerSavepoint	file:
Parse	sqlite3.c	/^struct Parse {$/;"	s	file:
Parse	sqlite3.c	/^typedef struct Parse Parse;$/;"	t	typeref:struct:Parse	file:
ParseContext	sqlite3.c	/^struct ParseContext {$/;"	s	file:
ParseContext	sqlite3.c	/^typedef struct ParseContext ParseContext;$/;"	t	typeref:struct:ParseContext	file:
PendingList	sqlite3.c	/^struct PendingList {$/;"	s	file:
PendingList	sqlite3.c	/^typedef struct PendingList PendingList;$/;"	t	typeref:struct:PendingList	file:
PgFreeslot	sqlite3.c	/^struct PgFreeslot {$/;"	s	file:
PgFreeslot	sqlite3.c	/^typedef struct PgFreeslot PgFreeslot;$/;"	t	typeref:struct:PgFreeslot	file:
PgHdr	sqlite3.c	/^struct PgHdr {$/;"	s	file:
PgHdr	sqlite3.c	/^typedef struct PgHdr PgHdr;$/;"	t	typeref:struct:PgHdr	file:
PgHdr1	sqlite3.c	/^struct PgHdr1 {$/;"	s	file:
PgHdr1	sqlite3.c	/^typedef struct PgHdr1 PgHdr1;$/;"	t	typeref:struct:PgHdr1	file:
Pgno	sqlite3.c	/^typedef u32 Pgno;$/;"	t	file:
PickNext	sqlite3.c	124464;"	d	file:
PickNext	sqlite3.c	124469;"	d	file:
PickSeeds	sqlite3.c	124465;"	d	file:
PickSeeds	sqlite3.c	124470;"	d	file:
QuadraticPickNext	sqlite3.c	/^static RtreeCell *QuadraticPickNext($/;"	f	file:
QuadraticPickSeeds	sqlite3.c	/^static void QuadraticPickSeeds($/;"	f	file:
READMARK_NOT_USED	sqlite3.c	43990;"	d	file:
READ_LOCK	sqlite3.c	46912;"	d	file:
READ_UTF16BE	sqlite3.c	20078;"	d	file:
READ_UTF16LE	sqlite3.c	20068;"	d	file:
READ_UTF8	sqlite3.c	20115;"	d	file:
REARGUARD	sqlite3.c	14947;"	d	file:
REGISTER_TRACE	sqlite3.c	62703;"	d	file:
REGISTER_TRACE	sqlite3.c	62705;"	d	file:
RESERVED_BYTE	sqlite3.c	9123;"	d	file:
RESERVED_LOCK	sqlite3.c	9059;"	d	file:
RNMX	CRandom.cpp	/^const double CRandom::RNMX=(1.0-EPS);$/;"	m	class:CRandom	file:
ROUND8	sqlite3.c	7716;"	d	file:
ROUNDDOWN8	sqlite3.c	7721;"	d	file:
ROWSET_ALLOCATION_SIZE	sqlite3.c	36311;"	d	file:
ROWSET_ENTRY_PER_CHUNK	sqlite3.c	36316;"	d	file:
RTREE_COORD_INT32	sqlite3.c	124561;"	d	file:
RTREE_COORD_REAL32	sqlite3.c	124560;"	d	file:
RTREE_EQ	sqlite3.c	124625;"	d	file:
RTREE_GE	sqlite3.c	124628;"	d	file:
RTREE_GEOMETRY_MAGIC	sqlite3.c	124659;"	d	file:
RTREE_GT	sqlite3.c	124629;"	d	file:
RTREE_LE	sqlite3.c	124626;"	d	file:
RTREE_LT	sqlite3.c	124627;"	d	file:
RTREE_MATCH	sqlite3.c	124630;"	d	file:
RTREE_MAXCELLS	sqlite3.c	124574;"	d	file:
RTREE_MAX_DEPTH	sqlite3.c	124583;"	d	file:
RTREE_MAX_DIMENSIONS	sqlite3.c	124510;"	d	file:
RTREE_MINCELLS	sqlite3.c	124572;"	d	file:
RTREE_REINSERT	sqlite3.c	124573;"	d	file:
Reinsert	sqlite3.c	/^static int Reinsert($/;"	f	file:
RowSet	sqlite3.c	/^struct RowSet {$/;"	s	file:
RowSet	sqlite3.c	/^typedef struct RowSet RowSet;$/;"	t	typeref:struct:RowSet	file:
RowSetChunk	sqlite3.c	/^struct RowSetChunk {$/;"	s	file:
RowSetEntry	sqlite3.c	/^struct RowSetEntry {            $/;"	s	file:
Rtree	sqlite3.c	/^struct Rtree {$/;"	s	file:
Rtree	sqlite3.c	/^typedef struct Rtree Rtree;$/;"	t	typeref:struct:Rtree	file:
RtreeCell	sqlite3.c	/^struct RtreeCell {$/;"	s	file:
RtreeCell	sqlite3.c	/^typedef struct RtreeCell RtreeCell;$/;"	t	typeref:struct:RtreeCell	file:
RtreeConstraint	sqlite3.c	/^struct RtreeConstraint {$/;"	s	file:
RtreeConstraint	sqlite3.c	/^typedef struct RtreeConstraint RtreeConstraint;$/;"	t	typeref:struct:RtreeConstraint	file:
RtreeCoord	sqlite3.c	/^typedef union RtreeCoord RtreeCoord;$/;"	t	typeref:union:RtreeCoord	file:
RtreeCoord	sqlite3.c	/^union RtreeCoord {$/;"	u	file:
RtreeCursor	sqlite3.c	/^struct RtreeCursor {$/;"	s	file:
RtreeCursor	sqlite3.c	/^typedef struct RtreeCursor RtreeCursor;$/;"	t	typeref:struct:RtreeCursor	file:
RtreeGeomCallback	sqlite3.c	/^struct RtreeGeomCallback {$/;"	s	file:
RtreeGeomCallback	sqlite3.c	/^typedef struct RtreeGeomCallback RtreeGeomCallback;$/;"	t	typeref:struct:RtreeGeomCallback	file:
RtreeMatchArg	sqlite3.c	/^struct RtreeMatchArg {$/;"	s	file:
RtreeMatchArg	sqlite3.c	/^typedef struct RtreeMatchArg RtreeMatchArg;$/;"	t	typeref:struct:RtreeMatchArg	file:
RtreeNode	sqlite3.c	/^struct RtreeNode {$/;"	s	file:
RtreeNode	sqlite3.c	/^typedef struct RtreeNode RtreeNode;$/;"	t	typeref:struct:RtreeNode	file:
SAVEPOINT_BEGIN	sqlite3.c	9680;"	d	file:
SAVEPOINT_RELEASE	sqlite3.c	9681;"	d	file:
SAVEPOINT_ROLLBACK	sqlite3.c	9682;"	d	file:
SAVE_SZ	sqlite3.c	77570;"	d	file:
SCHEMA_TABLE	sqlite3.c	7771;"	d	file:
SETBIT	sqlite3.c	34568;"	d	file:
SET_FULLSYNC	sqlite3.c	9005;"	d	file:
SF_Aggregate	sqlite3.c	10665;"	d	file:
SF_Distinct	sqlite3.c	10663;"	d	file:
SF_Expanded	sqlite3.c	10667;"	d	file:
SF_HasTypeInfo	sqlite3.c	10668;"	d	file:
SF_Resolved	sqlite3.c	10664;"	d	file:
SF_UsesEphemeral	sqlite3.c	10666;"	d	file:
SHARED_FIRST	sqlite3.c	9124;"	d	file:
SHARED_LOCK	sqlite3.c	9058;"	d	file:
SHARED_SIZE	sqlite3.c	9125;"	d	file:
SLOT_2_0	sqlite3.c	21181;"	d	file:
SLOT_4_2_0	sqlite3.c	21182;"	d	file:
SMALLEST_INT64	sqlite3.c	7710;"	d	file:
SQLITE3_MUTEX_INITIALIZER	sqlite3.c	17083;"	d	file:
SQLITE3_MUTEX_INITIALIZER	sqlite3.c	17085;"	d	file:
SQLITE3_MUTEX_INITIALIZER	sqlite3.c	17370;"	d	file:
SQLITE3_MUTEX_INITIALIZER	sqlite3.c	17372;"	d	file:
SQLITE3_MUTEX_INITIALIZER	sqlite3.c	17708;"	d	file:
SQLITE3_MUTEX_INITIALIZER	sqlite3.c	17710;"	d	file:
SQLITE3_TEXT	sqlite3.c	3908;"	d	file:
SQLITE_ABORT	sqlite3.c	929;"	d	file:
SQLITE_ACCESS_EXISTS	sqlite3.c	1528;"	d	file:
SQLITE_ACCESS_READ	sqlite3.c	1530;"	d	file:
SQLITE_ACCESS_READWRITE	sqlite3.c	1529;"	d	file:
SQLITE_AFF_INTEGER	sqlite3.c	9776;"	d	file:
SQLITE_AFF_MASK	sqlite3.c	9785;"	d	file:
SQLITE_AFF_NONE	sqlite3.c	9774;"	d	file:
SQLITE_AFF_NUMERIC	sqlite3.c	9775;"	d	file:
SQLITE_AFF_REAL	sqlite3.c	9777;"	d	file:
SQLITE_AFF_TEXT	sqlite3.c	9773;"	d	file:
SQLITE_ALTER_TABLE	sqlite3.c	2827;"	d	file:
SQLITE_AMALGAMATION	sqlite3.c	21;"	d	file:
SQLITE_ANALYZE	sqlite3.c	2829;"	d	file:
SQLITE_ANY	sqlite3.c	4266;"	d	file:
SQLITE_API	sqlite3.c	26;"	d	file:
SQLITE_API	sqlite3.c	596;"	d	file:
SQLITE_ASCII	sqlite3.c	7620;"	d	file:
SQLITE_ATTACH	sqlite3.c	2825;"	d	file:
SQLITE_AUTH	sqlite3.c	948;"	d	file:
SQLITE_AutoIndex	sqlite3.c	9545;"	d	file:
SQLITE_BIGENDIAN	sqlite3.c	7695;"	d	file:
SQLITE_BIGENDIAN	sqlite3.c	7699;"	d	file:
SQLITE_BIG_DBL	sqlite3.c	7556;"	d	file:
SQLITE_BIG_DBL	sqlite3.c	7564;"	d	file:
SQLITE_BLOB	sqlite3.c	3901;"	d	file:
SQLITE_BUSY	sqlite3.c	930;"	d	file:
SQLITE_BUSY_RECOVERY	sqlite3.c	1002;"	d	file:
SQLITE_CANTOPEN	sqlite3.c	939;"	d	file:
SQLITE_CANTOPEN_BKPT	sqlite3.c	11113;"	d	file:
SQLITE_CANTOPEN_NOTEMPDIR	sqlite3.c	1003;"	d	file:
SQLITE_CHECKPOINT_FULL	sqlite3.c	7115;"	d	file:
SQLITE_CHECKPOINT_PASSIVE	sqlite3.c	7114;"	d	file:
SQLITE_CHECKPOINT_RESTART	sqlite3.c	7116;"	d	file:
SQLITE_COLL_BINARY	sqlite3.c	9748;"	d	file:
SQLITE_COLL_NOCASE	sqlite3.c	9749;"	d	file:
SQLITE_COLL_REVERSE	sqlite3.c	9750;"	d	file:
SQLITE_COLL_USER	sqlite3.c	9751;"	d	file:
SQLITE_CONFIG_GETMALLOC	sqlite3.c	2004;"	d	file:
SQLITE_CONFIG_GETMUTEX	sqlite3.c	2010;"	d	file:
SQLITE_CONFIG_GETPCACHE	sqlite3.c	2014;"	d	file:
SQLITE_CONFIG_HEAP	sqlite3.c	2007;"	d	file:
SQLITE_CONFIG_LOG	sqlite3.c	2015;"	d	file:
SQLITE_CONFIG_LOOKASIDE	sqlite3.c	2012;"	d	file:
SQLITE_CONFIG_MALLOC	sqlite3.c	2003;"	d	file:
SQLITE_CONFIG_MEMSTATUS	sqlite3.c	2008;"	d	file:
SQLITE_CONFIG_MULTITHREAD	sqlite3.c	2001;"	d	file:
SQLITE_CONFIG_MUTEX	sqlite3.c	2009;"	d	file:
SQLITE_CONFIG_PAGECACHE	sqlite3.c	2006;"	d	file:
SQLITE_CONFIG_PCACHE	sqlite3.c	2013;"	d	file:
SQLITE_CONFIG_SCRATCH	sqlite3.c	2005;"	d	file:
SQLITE_CONFIG_SERIALIZED	sqlite3.c	2002;"	d	file:
SQLITE_CONFIG_SINGLETHREAD	sqlite3.c	2000;"	d	file:
SQLITE_CONFIG_URI	sqlite3.c	2016;"	d	file:
SQLITE_CONSTRAINT	sqlite3.c	944;"	d	file:
SQLITE_COPY	sqlite3.c	2834;"	d	file:
SQLITE_CORE	sqlite3.c	112287;"	d	file:
SQLITE_CORE	sqlite3.c	20;"	d	file:
SQLITE_CORE	sqlite3.c	87022;"	d	file:
SQLITE_CORRUPT	sqlite3.c	936;"	d	file:
SQLITE_CORRUPT_BKPT	sqlite3.c	11111;"	d	file:
SQLITE_CORRUPT_VTAB	sqlite3.c	1004;"	d	file:
SQLITE_CREATE_INDEX	sqlite3.c	2802;"	d	file:
SQLITE_CREATE_TABLE	sqlite3.c	2803;"	d	file:
SQLITE_CREATE_TEMP_INDEX	sqlite3.c	2804;"	d	file:
SQLITE_CREATE_TEMP_TABLE	sqlite3.c	2805;"	d	file:
SQLITE_CREATE_TEMP_TRIGGER	sqlite3.c	2806;"	d	file:
SQLITE_CREATE_TEMP_VIEW	sqlite3.c	2807;"	d	file:
SQLITE_CREATE_TRIGGER	sqlite3.c	2808;"	d	file:
SQLITE_CREATE_VIEW	sqlite3.c	2809;"	d	file:
SQLITE_CREATE_VTABLE	sqlite3.c	2830;"	d	file:
SQLITE_CkptFullFSync	sqlite3.c	9540;"	d	file:
SQLITE_ColumnCache	sqlite3.c	9556;"	d	file:
SQLITE_CountRows	sqlite3.c	9526;"	d	file:
SQLITE_DBCONFIG_ENABLE_FKEY	sqlite3.c	2077;"	d	file:
SQLITE_DBCONFIG_ENABLE_TRIGGER	sqlite3.c	2078;"	d	file:
SQLITE_DBCONFIG_LOOKASIDE	sqlite3.c	2076;"	d	file:
SQLITE_DBSTATUS_CACHE_USED	sqlite3.c	6338;"	d	file:
SQLITE_DBSTATUS_LOOKASIDE_HIT	sqlite3.c	6341;"	d	file:
SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL	sqlite3.c	6343;"	d	file:
SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE	sqlite3.c	6342;"	d	file:
SQLITE_DBSTATUS_LOOKASIDE_USED	sqlite3.c	6337;"	d	file:
SQLITE_DBSTATUS_MAX	sqlite3.c	6344;"	d	file:
SQLITE_DBSTATUS_SCHEMA_USED	sqlite3.c	6339;"	d	file:
SQLITE_DBSTATUS_STMT_USED	sqlite3.c	6340;"	d	file:
SQLITE_DEFAULT_AUTOVACUUM	sqlite3.c	7912;"	d	file:
SQLITE_DEFAULT_CACHE_SIZE	sqlite3.c	187;"	d	file:
SQLITE_DEFAULT_FILE_FORMAT	sqlite3.c	7586;"	d	file:
SQLITE_DEFAULT_FILE_PERMISSIONS	sqlite3.c	24424;"	d	file:
SQLITE_DEFAULT_JOURNAL_SIZE_LIMIT	sqlite3.c	8577;"	d	file:
SQLITE_DEFAULT_MEMSTATUS	sqlite3.c	382;"	d	file:
SQLITE_DEFAULT_PAGE_SIZE	sqlite3.c	239;"	d	file:
SQLITE_DEFAULT_PAGE_SIZE	sqlite3.c	242;"	d	file:
SQLITE_DEFAULT_PAGE_SIZE	sqlite3.c	243;"	d	file:
SQLITE_DEFAULT_PROXYDIR_PERMISSIONS	sqlite3.c	24431;"	d	file:
SQLITE_DEFAULT_RECURSIVE_TRIGGERS	sqlite3.c	7594;"	d	file:
SQLITE_DEFAULT_SECTOR_SIZE	sqlite3.c	9012;"	d	file:
SQLITE_DEFAULT_TEMP_CACHE_SIZE	sqlite3.c	190;"	d	file:
SQLITE_DEFAULT_WAL_AUTOCHECKPOINT	sqlite3.c	198;"	d	file:
SQLITE_DELETE	sqlite3.c	2810;"	d	file:
SQLITE_DENY	sqlite3.c	2779;"	d	file:
SQLITE_DEPRECATED	sqlite3.c	613;"	d	file:
SQLITE_DETACH	sqlite3.c	2826;"	d	file:
SQLITE_DONE	sqlite3.c	953;"	d	file:
SQLITE_DROP_INDEX	sqlite3.c	2811;"	d	file:
SQLITE_DROP_TABLE	sqlite3.c	2812;"	d	file:
SQLITE_DROP_TEMP_INDEX	sqlite3.c	2813;"	d	file:
SQLITE_DROP_TEMP_TABLE	sqlite3.c	2814;"	d	file:
SQLITE_DROP_TEMP_TRIGGER	sqlite3.c	2815;"	d	file:
SQLITE_DROP_TEMP_VIEW	sqlite3.c	2816;"	d	file:
SQLITE_DROP_TRIGGER	sqlite3.c	2817;"	d	file:
SQLITE_DROP_VIEW	sqlite3.c	2818;"	d	file:
SQLITE_DROP_VTABLE	sqlite3.c	2831;"	d	file:
SQLITE_DYNAMIC	sqlite3.c	7783;"	d	file:
SQLITE_EBCDIC	sqlite3.c	7618;"	d	file:
SQLITE_EMPTY	sqlite3.c	941;"	d	file:
SQLITE_ENABLE_FTS3	sqlite3.c	11122;"	d	file:
SQLITE_ENABLE_FTS3	sqlite3.c	111520;"	d	file:
SQLITE_ENABLE_LOCKING_STYLE	sqlite3.c	24331;"	d	file:
SQLITE_ENABLE_LOCKING_STYLE	sqlite3.c	24333;"	d	file:
SQLITE_ENABLE_LOCKING_STYLE	sqlite3.c	88851;"	d	file:
SQLITE_ERROR	sqlite3.c	926;"	d	file:
SQLITE_EXPERIMENTAL	sqlite3.c	614;"	d	file:
SQLITE_EXTENSION_INIT1	sqlite3.c	87441;"	d	file:
SQLITE_EXTENSION_INIT2	sqlite3.c	87442;"	d	file:
SQLITE_EXTERN	sqlite3.c	592;"	d	file:
SQLITE_EnableTrigger	sqlite3.c	9548;"	d	file:
SQLITE_FAIL	sqlite3.c	7200;"	d	file:
SQLITE_FAULTINJECTOR_COUNT	sqlite3.c	11731;"	d	file:
SQLITE_FAULTINJECTOR_MALLOC	sqlite3.c	11730;"	d	file:
SQLITE_FCNTL_CHUNK_SIZE	sqlite3.c	1293;"	d	file:
SQLITE_FCNTL_DB_UNCHANGED	sqlite3.c	9145;"	d	file:
SQLITE_FCNTL_FILE_POINTER	sqlite3.c	1294;"	d	file:
SQLITE_FCNTL_LOCKSTATE	sqlite3.c	1288;"	d	file:
SQLITE_FCNTL_SIZE_HINT	sqlite3.c	1292;"	d	file:
SQLITE_FCNTL_SYNC_OMITTED	sqlite3.c	1295;"	d	file:
SQLITE_FILE_HEADER	sqlite3.c	46841;"	d	file:
SQLITE_FLOAT	sqlite3.c	3900;"	d	file:
SQLITE_FORMAT	sqlite3.c	949;"	d	file:
SQLITE_FSFLAGS_IS_MSDOS	sqlite3.c	24410;"	d	file:
SQLITE_FTS3_DEFAULT_NEAR_PARAM	sqlite3.c	116987;"	d	file:
SQLITE_FULL	sqlite3.c	938;"	d	file:
SQLITE_FUNCTION	sqlite3.c	2832;"	d	file:
SQLITE_FUNC_CASE	sqlite3.c	9620;"	d	file:
SQLITE_FUNC_COALESCE	sqlite3.c	9625;"	d	file:
SQLITE_FUNC_COUNT	sqlite3.c	9624;"	d	file:
SQLITE_FUNC_EPHEM	sqlite3.c	9621;"	d	file:
SQLITE_FUNC_LIKE	sqlite3.c	9619;"	d	file:
SQLITE_FUNC_NEEDCOLL	sqlite3.c	9622;"	d	file:
SQLITE_FUNC_PRIVATE	sqlite3.c	9623;"	d	file:
SQLITE_FactorOutConst	sqlite3.c	9561;"	d	file:
SQLITE_ForeignKeys	sqlite3.c	9544;"	d	file:
SQLITE_FullColNames	sqlite3.c	9524;"	d	file:
SQLITE_FullFSync	sqlite3.c	9539;"	d	file:
SQLITE_GET_LOCKPROXYFILE	sqlite3.c	1289;"	d	file:
SQLITE_GroupByOrder	sqlite3.c	9560;"	d	file:
SQLITE_HAVE_ISNAN	sqlite3.c	7561;"	d	file:
SQLITE_IGNORE	sqlite3.c	2780;"	d	file:
SQLITE_INDEX_CONSTRAINT_EQ	sqlite3.c	5408;"	d	file:
SQLITE_INDEX_CONSTRAINT_GE	sqlite3.c	5412;"	d	file:
SQLITE_INDEX_CONSTRAINT_GT	sqlite3.c	5409;"	d	file:
SQLITE_INDEX_CONSTRAINT_LE	sqlite3.c	5410;"	d	file:
SQLITE_INDEX_CONSTRAINT_LT	sqlite3.c	5411;"	d	file:
SQLITE_INDEX_CONSTRAINT_MATCH	sqlite3.c	5413;"	d	file:
SQLITE_INDEX_SAMPLES	sqlite3.c	324;"	d	file:
SQLITE_INSERT	sqlite3.c	2819;"	d	file:
SQLITE_INTEGER	sqlite3.c	3899;"	d	file:
SQLITE_INTEGRITY_CHECK_ERROR_MAX	sqlite3.c	89135;"	d	file:
SQLITE_INTERNAL	sqlite3.c	927;"	d	file:
SQLITE_INTERRUPT	sqlite3.c	934;"	d	file:
SQLITE_INT_TO_PTR	sqlite3.c	343;"	d	file:
SQLITE_INT_TO_PTR	sqlite3.c	346;"	d	file:
SQLITE_INT_TO_PTR	sqlite3.c	349;"	d	file:
SQLITE_INT_TO_PTR	sqlite3.c	352;"	d	file:
SQLITE_IOCAP_ATOMIC	sqlite3.c	1057;"	d	file:
SQLITE_IOCAP_ATOMIC16K	sqlite3.c	1063;"	d	file:
SQLITE_IOCAP_ATOMIC1K	sqlite3.c	1059;"	d	file:
SQLITE_IOCAP_ATOMIC2K	sqlite3.c	1060;"	d	file:
SQLITE_IOCAP_ATOMIC32K	sqlite3.c	1064;"	d	file:
SQLITE_IOCAP_ATOMIC4K	sqlite3.c	1061;"	d	file:
SQLITE_IOCAP_ATOMIC512	sqlite3.c	1058;"	d	file:
SQLITE_IOCAP_ATOMIC64K	sqlite3.c	1065;"	d	file:
SQLITE_IOCAP_ATOMIC8K	sqlite3.c	1062;"	d	file:
SQLITE_IOCAP_SAFE_APPEND	sqlite3.c	1066;"	d	file:
SQLITE_IOCAP_SEQUENTIAL	sqlite3.c	1067;"	d	file:
SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN	sqlite3.c	1068;"	d	file:
SQLITE_IOERR	sqlite3.c	935;"	d	file:
SQLITE_IOERR_ACCESS	sqlite3.c	991;"	d	file:
SQLITE_IOERR_BLOCKED	sqlite3.c	989;"	d	file:
SQLITE_IOERR_CHECKRESERVEDLOCK	sqlite3.c	992;"	d	file:
SQLITE_IOERR_CLOSE	sqlite3.c	994;"	d	file:
SQLITE_IOERR_DELETE	sqlite3.c	988;"	d	file:
SQLITE_IOERR_DIR_CLOSE	sqlite3.c	995;"	d	file:
SQLITE_IOERR_DIR_FSYNC	sqlite3.c	983;"	d	file:
SQLITE_IOERR_FSTAT	sqlite3.c	985;"	d	file:
SQLITE_IOERR_FSYNC	sqlite3.c	982;"	d	file:
SQLITE_IOERR_LOCK	sqlite3.c	993;"	d	file:
SQLITE_IOERR_NOMEM	sqlite3.c	990;"	d	file:
SQLITE_IOERR_RDLOCK	sqlite3.c	987;"	d	file:
SQLITE_IOERR_READ	sqlite3.c	979;"	d	file:
SQLITE_IOERR_SEEK	sqlite3.c	1000;"	d	file:
SQLITE_IOERR_SHMLOCK	sqlite3.c	998;"	d	file:
SQLITE_IOERR_SHMMAP	sqlite3.c	999;"	d	file:
SQLITE_IOERR_SHMOPEN	sqlite3.c	996;"	d	file:
SQLITE_IOERR_SHMSIZE	sqlite3.c	997;"	d	file:
SQLITE_IOERR_SHORT_READ	sqlite3.c	980;"	d	file:
SQLITE_IOERR_TRUNCATE	sqlite3.c	984;"	d	file:
SQLITE_IOERR_UNLOCK	sqlite3.c	986;"	d	file:
SQLITE_IOERR_WRITE	sqlite3.c	981;"	d	file:
SQLITE_IdxRealAsInt	sqlite3.c	9562;"	d	file:
SQLITE_IgnoreChecks	sqlite3.c	9536;"	d	file:
SQLITE_IndexCover	sqlite3.c	9559;"	d	file:
SQLITE_IndexSearch	sqlite3.c	9558;"	d	file:
SQLITE_IndexSort	sqlite3.c	9557;"	d	file:
SQLITE_InternChanges	sqlite3.c	9523;"	d	file:
SQLITE_JUMPIFNULL	sqlite3.c	9791;"	d	file:
SQLITE_LAST_ERRNO	sqlite3.c	1291;"	d	file:
SQLITE_LIMIT_ATTACHED	sqlite3.c	3290;"	d	file:
SQLITE_LIMIT_COLUMN	sqlite3.c	3285;"	d	file:
SQLITE_LIMIT_COMPOUND_SELECT	sqlite3.c	3287;"	d	file:
SQLITE_LIMIT_EXPR_DEPTH	sqlite3.c	3286;"	d	file:
SQLITE_LIMIT_FUNCTION_ARG	sqlite3.c	3289;"	d	file:
SQLITE_LIMIT_LENGTH	sqlite3.c	3283;"	d	file:
SQLITE_LIMIT_LIKE_PATTERN_LENGTH	sqlite3.c	3291;"	d	file:
SQLITE_LIMIT_SQL_LENGTH	sqlite3.c	3284;"	d	file:
SQLITE_LIMIT_TRIGGER_DEPTH	sqlite3.c	3293;"	d	file:
SQLITE_LIMIT_VARIABLE_NUMBER	sqlite3.c	3292;"	d	file:
SQLITE_LIMIT_VDBE_OP	sqlite3.c	3288;"	d	file:
SQLITE_LITTLEENDIAN	sqlite3.c	7696;"	d	file:
SQLITE_LITTLEENDIAN	sqlite3.c	7700;"	d	file:
SQLITE_LOCKED	sqlite3.c	931;"	d	file:
SQLITE_LOCKED_SHAREDCACHE	sqlite3.c	1001;"	d	file:
SQLITE_LOCK_EXCLUSIVE	sqlite3.c	1081;"	d	file:
SQLITE_LOCK_NONE	sqlite3.c	1077;"	d	file:
SQLITE_LOCK_PENDING	sqlite3.c	1080;"	d	file:
SQLITE_LOCK_RESERVED	sqlite3.c	1079;"	d	file:
SQLITE_LOCK_SHARED	sqlite3.c	1078;"	d	file:
SQLITE_LegacyFileFmt	sqlite3.c	9538;"	d	file:
SQLITE_LoadExtension	sqlite3.c	9547;"	d	file:
SQLITE_MAGIC_BUSY	sqlite3.c	9573;"	d	file:
SQLITE_MAGIC_CLOSED	sqlite3.c	9571;"	d	file:
SQLITE_MAGIC_ERROR	sqlite3.c	9574;"	d	file:
SQLITE_MAGIC_OPEN	sqlite3.c	9570;"	d	file:
SQLITE_MAGIC_SICK	sqlite3.c	9572;"	d	file:
SQLITE_MALLOC_SOFT_LIMIT	sqlite3.c	411;"	d	file:
SQLITE_MAX_ATTACHED	sqlite3.c	207;"	d	file:
SQLITE_MAX_COLUMN	sqlite3.c	127;"	d	file:
SQLITE_MAX_COMPOUND_SELECT	sqlite3.c	164;"	d	file:
SQLITE_MAX_DEFAULT_PAGE_SIZE	sqlite3.c	254;"	d	file:
SQLITE_MAX_DEFAULT_PAGE_SIZE	sqlite3.c	257;"	d	file:
SQLITE_MAX_DEFAULT_PAGE_SIZE	sqlite3.c	258;"	d	file:
SQLITE_MAX_EXPR_DEPTH	sqlite3.c	152;"	d	file:
SQLITE_MAX_FILE_FORMAT	sqlite3.c	7584;"	d	file:
SQLITE_MAX_FUNCTION_ARG	sqlite3.c	179;"	d	file:
SQLITE_MAX_LENGTH	sqlite3.c	106;"	d	file:
SQLITE_MAX_LIKE_PATTERN_LENGTH	sqlite3.c	127711;"	d	file:
SQLITE_MAX_LIKE_PATTERN_LENGTH	sqlite3.c	278;"	d	file:
SQLITE_MAX_PAGE_COUNT	sqlite3.c	270;"	d	file:
SQLITE_MAX_PAGE_SIZE	sqlite3.c	230;"	d	file:
SQLITE_MAX_PAGE_SIZE	sqlite3.c	232;"	d	file:
SQLITE_MAX_SCHEMA_RETRY	sqlite3.c	61257;"	d	file:
SQLITE_MAX_SQL_LENGTH	sqlite3.c	138;"	d	file:
SQLITE_MAX_TRIGGER_DEPTH	sqlite3.c	289;"	d	file:
SQLITE_MAX_U32	sqlite3.c	7682;"	d	file:
SQLITE_MAX_VARIABLE_NUMBER	sqlite3.c	215;"	d	file:
SQLITE_MAX_VDBE_OP	sqlite3.c	172;"	d	file:
SQLITE_MISMATCH	sqlite3.c	945;"	d	file:
SQLITE_MISUSE	sqlite3.c	946;"	d	file:
SQLITE_MISUSE_BKPT	sqlite3.c	11112;"	d	file:
SQLITE_MIXED_ENDIAN_64BIT_FLOAT	sqlite3.c	7560;"	d	file:
SQLITE_MUTEX_FAST	sqlite3.c	6023;"	d	file:
SQLITE_MUTEX_NOOP	sqlite3.c	9235;"	d	file:
SQLITE_MUTEX_NREF	sqlite3.c	17352;"	d	file:
SQLITE_MUTEX_NREF	sqlite3.c	17354;"	d	file:
SQLITE_MUTEX_OMIT	sqlite3.c	9225;"	d	file:
SQLITE_MUTEX_OS2	sqlite3.c	9233;"	d	file:
SQLITE_MUTEX_PTHREADS	sqlite3.c	9229;"	d	file:
SQLITE_MUTEX_RECURSIVE	sqlite3.c	6024;"	d	file:
SQLITE_MUTEX_STATIC_LRU	sqlite3.c	6030;"	d	file:
SQLITE_MUTEX_STATIC_LRU2	sqlite3.c	6031;"	d	file:
SQLITE_MUTEX_STATIC_MASTER	sqlite3.c	6025;"	d	file:
SQLITE_MUTEX_STATIC_MEM	sqlite3.c	6026;"	d	file:
SQLITE_MUTEX_STATIC_MEM2	sqlite3.c	6027;"	d	file:
SQLITE_MUTEX_STATIC_OPEN	sqlite3.c	6028;"	d	file:
SQLITE_MUTEX_STATIC_PMEM	sqlite3.c	6032;"	d	file:
SQLITE_MUTEX_STATIC_PRNG	sqlite3.c	6029;"	d	file:
SQLITE_MUTEX_W32	sqlite3.c	9231;"	d	file:
SQLITE_NOLFS	sqlite3.c	947;"	d	file:
SQLITE_NOMEM	sqlite3.c	932;"	d	file:
SQLITE_NOTADB	sqlite3.c	951;"	d	file:
SQLITE_NOTFOUND	sqlite3.c	937;"	d	file:
SQLITE_NULL	sqlite3.c	3902;"	d	file:
SQLITE_NULLEQ	sqlite3.c	9793;"	d	file:
SQLITE_N_BTREE_META	sqlite3.c	7905;"	d	file:
SQLITE_N_COLCACHE	sqlite3.c	10723;"	d	file:
SQLITE_N_KEYWORD	sqlite3.c	107079;"	d	file:
SQLITE_N_LIMIT	sqlite3.c	9332;"	d	file:
SQLITE_NoReadlock	sqlite3.c	9534;"	d	file:
SQLITE_NullCallback	sqlite3.c	9529;"	d	file:
SQLITE_OK	sqlite3.c	924;"	d	file:
SQLITE_OMIT_DATETIME_FUNCS	sqlite3.c	7558;"	d	file:
SQLITE_OMIT_TRACE	sqlite3.c	7559;"	d	file:
SQLITE_OPEN_AUTOPROXY	sqlite3.c	1020;"	d	file:
SQLITE_OPEN_CREATE	sqlite3.c	1017;"	d	file:
SQLITE_OPEN_DELETEONCLOSE	sqlite3.c	1018;"	d	file:
SQLITE_OPEN_EXCLUSIVE	sqlite3.c	1019;"	d	file:
SQLITE_OPEN_FULLMUTEX	sqlite3.c	1030;"	d	file:
SQLITE_OPEN_MAIN_DB	sqlite3.c	1022;"	d	file:
SQLITE_OPEN_MAIN_JOURNAL	sqlite3.c	1025;"	d	file:
SQLITE_OPEN_MASTER_JOURNAL	sqlite3.c	1028;"	d	file:
SQLITE_OPEN_NOMUTEX	sqlite3.c	1029;"	d	file:
SQLITE_OPEN_PRIVATECACHE	sqlite3.c	1032;"	d	file:
SQLITE_OPEN_READONLY	sqlite3.c	1015;"	d	file:
SQLITE_OPEN_READWRITE	sqlite3.c	1016;"	d	file:
SQLITE_OPEN_SHAREDCACHE	sqlite3.c	1031;"	d	file:
SQLITE_OPEN_SUBJOURNAL	sqlite3.c	1027;"	d	file:
SQLITE_OPEN_TEMP_DB	sqlite3.c	1023;"	d	file:
SQLITE_OPEN_TEMP_JOURNAL	sqlite3.c	1026;"	d	file:
SQLITE_OPEN_TRANSIENT_DB	sqlite3.c	1024;"	d	file:
SQLITE_OPEN_URI	sqlite3.c	1021;"	d	file:
SQLITE_OPEN_WAL	sqlite3.c	1033;"	d	file:
SQLITE_OS2_NO_WAL_LOCK_FILE	sqlite3.c	23034;"	d	file:
SQLITE_OS2_THREADS	sqlite3.c	22182;"	d	file:
SQLITE_OS_OS2	sqlite3.c	8934;"	d	file:
SQLITE_OS_OS2	sqlite3.c	8935;"	d	file:
SQLITE_OS_OS2	sqlite3.c	8946;"	d	file:
SQLITE_OS_OS2	sqlite3.c	8950;"	d	file:
SQLITE_OS_OS2	sqlite3.c	8954;"	d	file:
SQLITE_OS_OS2	sqlite3.c	8958;"	d	file:
SQLITE_OS_OTHER	sqlite3.c	8937;"	d	file:
SQLITE_OS_OTHER	sqlite3.c	8941;"	d	file:
SQLITE_OS_UNIX	sqlite3.c	8930;"	d	file:
SQLITE_OS_UNIX	sqlite3.c	8931;"	d	file:
SQLITE_OS_UNIX	sqlite3.c	8945;"	d	file:
SQLITE_OS_UNIX	sqlite3.c	8949;"	d	file:
SQLITE_OS_UNIX	sqlite3.c	8953;"	d	file:
SQLITE_OS_UNIX	sqlite3.c	8957;"	d	file:
SQLITE_OS_WIN	sqlite3.c	8932;"	d	file:
SQLITE_OS_WIN	sqlite3.c	8933;"	d	file:
SQLITE_OS_WIN	sqlite3.c	8944;"	d	file:
SQLITE_OS_WIN	sqlite3.c	8948;"	d	file:
SQLITE_OS_WIN	sqlite3.c	8952;"	d	file:
SQLITE_OS_WIN	sqlite3.c	8962;"	d	file:
SQLITE_OS_WINCE	sqlite3.c	8971;"	d	file:
SQLITE_OS_WINCE	sqlite3.c	8973;"	d	file:
SQLITE_OptMask	sqlite3.c	9563;"	d	file:
SQLITE_PERM	sqlite3.c	928;"	d	file:
SQLITE_PRAGMA	sqlite3.c	2820;"	d	file:
SQLITE_PRINT_BUF_SIZE	sqlite3.c	18978;"	d	file:
SQLITE_PRINT_BUF_SIZE	sqlite3.c	18980;"	d	file:
SQLITE_PRIVATE	sqlite3.c	23;"	d	file:
SQLITE_PROTOCOL	sqlite3.c	940;"	d	file:
SQLITE_PTR_TO_INT	sqlite3.c	344;"	d	file:
SQLITE_PTR_TO_INT	sqlite3.c	347;"	d	file:
SQLITE_PTR_TO_INT	sqlite3.c	350;"	d	file:
SQLITE_PTR_TO_INT	sqlite3.c	353;"	d	file:
SQLITE_PreferBuiltin	sqlite3.c	9546;"	d	file:
SQLITE_QueryFlattener	sqlite3.c	9555;"	d	file:
SQLITE_RANGE	sqlite3.c	950;"	d	file:
SQLITE_READ	sqlite3.c	2821;"	d	file:
SQLITE_READONLY	sqlite3.c	933;"	d	file:
SQLITE_READONLY_CANTLOCK	sqlite3.c	1006;"	d	file:
SQLITE_READONLY_RECOVERY	sqlite3.c	1005;"	d	file:
SQLITE_REINDEX	sqlite3.c	2828;"	d	file:
SQLITE_REPLACE	sqlite3.c	7202;"	d	file:
SQLITE_ROLLBACK	sqlite3.c	7198;"	d	file:
SQLITE_ROW	sqlite3.c	952;"	d	file:
SQLITE_ReadUncommitted	sqlite3.c	9537;"	d	file:
SQLITE_RecTriggers	sqlite3.c	9543;"	d	file:
SQLITE_RecoveryMode	sqlite3.c	9541;"	d	file:
SQLITE_ReverseOrder	sqlite3.c	9542;"	d	file:
SQLITE_SAVEPOINT	sqlite3.c	2833;"	d	file:
SQLITE_SCHEMA	sqlite3.c	942;"	d	file:
SQLITE_SELECT	sqlite3.c	2822;"	d	file:
SQLITE_SET_LOCKPROXYFILE	sqlite3.c	1290;"	d	file:
SQLITE_SHM_EXCLUSIVE	sqlite3.c	1557;"	d	file:
SQLITE_SHM_LOCK	sqlite3.c	1555;"	d	file:
SQLITE_SHM_NLOCK	sqlite3.c	1567;"	d	file:
SQLITE_SHM_SHARED	sqlite3.c	1556;"	d	file:
SQLITE_SHM_UNLOCK	sqlite3.c	1554;"	d	file:
SQLITE_SKIP_UTF8	sqlite3.c	11095;"	d	file:
SQLITE_SOURCE_ID	sqlite3.c	655;"	d	file:
SQLITE_SO_ASC	sqlite3.c	9756;"	d	file:
SQLITE_SO_DESC	sqlite3.c	9757;"	d	file:
SQLITE_STATIC	sqlite3.c	4473;"	d	file:
SQLITE_STATUS_MALLOC_COUNT	sqlite3.c	6250;"	d	file:
SQLITE_STATUS_MALLOC_SIZE	sqlite3.c	6246;"	d	file:
SQLITE_STATUS_MEMORY_USED	sqlite3.c	6241;"	d	file:
SQLITE_STATUS_PAGECACHE_OVERFLOW	sqlite3.c	6243;"	d	file:
SQLITE_STATUS_PAGECACHE_SIZE	sqlite3.c	6248;"	d	file:
SQLITE_STATUS_PAGECACHE_USED	sqlite3.c	6242;"	d	file:
SQLITE_STATUS_PARSER_STACK	sqlite3.c	6247;"	d	file:
SQLITE_STATUS_SCRATCH_OVERFLOW	sqlite3.c	6245;"	d	file:
SQLITE_STATUS_SCRATCH_SIZE	sqlite3.c	6249;"	d	file:
SQLITE_STATUS_SCRATCH_USED	sqlite3.c	6244;"	d	file:
SQLITE_STMTSTATUS_AUTOINDEX	sqlite3.c	6403;"	d	file:
SQLITE_STMTSTATUS_FULLSCAN_STEP	sqlite3.c	6401;"	d	file:
SQLITE_STMTSTATUS_SORT	sqlite3.c	6402;"	d	file:
SQLITE_STOREP2	sqlite3.c	9792;"	d	file:
SQLITE_SYNC_DATAONLY	sqlite3.c	1111;"	d	file:
SQLITE_SYNC_FULL	sqlite3.c	1110;"	d	file:
SQLITE_SYNC_NORMAL	sqlite3.c	1109;"	d	file:
SQLITE_SYSTEM_MALLOC	sqlite3.c	403;"	d	file:
SQLITE_ShortColNames	sqlite3.c	9525;"	d	file:
SQLITE_SqlTrace	sqlite3.c	9531;"	d	file:
SQLITE_TEMPNAME_SIZE	sqlite3.c	8982;"	d	file:
SQLITE_TEMPNAME_SIZE	sqlite3.c	8996;"	d	file:
SQLITE_TEMPNAME_SIZE	sqlite3.c	8998;"	d	file:
SQLITE_TEMP_FILE_PREFIX	sqlite3.c	9037;"	d	file:
SQLITE_TEMP_STORE	sqlite3.c	7602;"	d	file:
SQLITE_TESTCTRL_ALWAYS	sqlite3.c	6118;"	d	file:
SQLITE_TESTCTRL_ASSERT	sqlite3.c	6117;"	d	file:
SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS	sqlite3.c	6115;"	d	file:
SQLITE_TESTCTRL_BITVEC_TEST	sqlite3.c	6113;"	d	file:
SQLITE_TESTCTRL_FAULT_INSTALL	sqlite3.c	6114;"	d	file:
SQLITE_TESTCTRL_FIRST	sqlite3.c	6109;"	d	file:
SQLITE_TESTCTRL_ISKEYWORD	sqlite3.c	6121;"	d	file:
SQLITE_TESTCTRL_LAST	sqlite3.c	6125;"	d	file:
SQLITE_TESTCTRL_LOCALTIME_FAULT	sqlite3.c	6124;"	d	file:
SQLITE_TESTCTRL_OPTIMIZATIONS	sqlite3.c	6120;"	d	file:
SQLITE_TESTCTRL_PENDING_BYTE	sqlite3.c	6116;"	d	file:
SQLITE_TESTCTRL_PGHDRSZ	sqlite3.c	6122;"	d	file:
SQLITE_TESTCTRL_PRNG_RESET	sqlite3.c	6112;"	d	file:
SQLITE_TESTCTRL_PRNG_RESTORE	sqlite3.c	6111;"	d	file:
SQLITE_TESTCTRL_PRNG_SAVE	sqlite3.c	6110;"	d	file:
SQLITE_TESTCTRL_RESERVE	sqlite3.c	6119;"	d	file:
SQLITE_TESTCTRL_SCRATCHMALLOC	sqlite3.c	6123;"	d	file:
SQLITE_TEXT	sqlite3.c	3904;"	d	file:
SQLITE_TEXT	sqlite3.c	3906;"	d	file:
SQLITE_THREADSAFE	sqlite3.c	369;"	d	file:
SQLITE_THREADSAFE	sqlite3.c	371;"	d	file:
SQLITE_TOOBIG	sqlite3.c	943;"	d	file:
SQLITE_TRANSACTION	sqlite3.c	2823;"	d	file:
SQLITE_TRANSIENT	sqlite3.c	4474;"	d	file:
SQLITE_UNIX_THREADS	sqlite3.c	24417;"	d	file:
SQLITE_UPDATE	sqlite3.c	2824;"	d	file:
SQLITE_USE_URI	sqlite3.c	11982;"	d	file:
SQLITE_UTF16	sqlite3.c	4265;"	d	file:
SQLITE_UTF16BE	sqlite3.c	4264;"	d	file:
SQLITE_UTF16LE	sqlite3.c	4263;"	d	file:
SQLITE_UTF16NATIVE	sqlite3.c	7697;"	d	file:
SQLITE_UTF16NATIVE	sqlite3.c	7701;"	d	file:
SQLITE_UTF16_ALIGNED	sqlite3.c	4267;"	d	file:
SQLITE_UTF8	sqlite3.c	4262;"	d	file:
SQLITE_VERSION	sqlite3.c	620;"	d	file:
SQLITE_VERSION	sqlite3.c	653;"	d	file:
SQLITE_VERSION_NUMBER	sqlite3.c	623;"	d	file:
SQLITE_VERSION_NUMBER	sqlite3.c	654;"	d	file:
SQLITE_VTAB_CONSTRAINT_SUPPORT	sqlite3.c	7173;"	d	file:
SQLITE_VdbeListing	sqlite3.c	9532;"	d	file:
SQLITE_VdbeTrace	sqlite3.c	9522;"	d	file:
SQLITE_W32_MUTEX_INITIALIZER	sqlite3.c	17706;"	d	file:
SQLITE_W32_THREADS	sqlite3.c	31269;"	d	file:
SQLITE_WSD	sqlite3.c	7800;"	d	file:
SQLITE_WSD	sqlite3.c	7806;"	d	file:
SQLITE_WriteSchema	sqlite3.c	9533;"	d	file:
SQL_CONTENT_INSERT	sqlite3.c	119834;"	d	file:
SQL_DELETE_ALL_CONTENT	sqlite3.c	119818;"	d	file:
SQL_DELETE_ALL_DOCSIZE	sqlite3.c	119821;"	d	file:
SQL_DELETE_ALL_SEGDIR	sqlite3.c	119820;"	d	file:
SQL_DELETE_ALL_SEGMENTS	sqlite3.c	119819;"	d	file:
SQL_DELETE_ALL_STAT	sqlite3.c	119822;"	d	file:
SQL_DELETE_ALL_TERMS_SEGDIR	sqlite3.c	119842;"	d	file:
SQL_DELETE_CONTENT	sqlite3.c	119816;"	d	file:
SQL_DELETE_DOCSIZE	sqlite3.c	119835;"	d	file:
SQL_DELETE_SEGDIR_LEVEL	sqlite3.c	119832;"	d	file:
SQL_DELETE_SEGDIR_RANGE	sqlite3.c	119844;"	d	file:
SQL_DELETE_SEGMENTS_RANGE	sqlite3.c	119833;"	d	file:
SQL_INSERT_SEGDIR	sqlite3.c	119827;"	d	file:
SQL_INSERT_SEGMENTS	sqlite3.c	119825;"	d	file:
SQL_IS_EMPTY	sqlite3.c	119817;"	d	file:
SQL_NEXT_SEGMENTS_ID	sqlite3.c	119826;"	d	file:
SQL_NEXT_SEGMENT_INDEX	sqlite3.c	119824;"	d	file:
SQL_REPLACE_DOCSIZE	sqlite3.c	119836;"	d	file:
SQL_REPLACE_DOCTOTAL	sqlite3.c	119839;"	d	file:
SQL_SELECT_ALL_PREFIX_LEVEL	sqlite3.c	119841;"	d	file:
SQL_SELECT_CONTENT_BY_ROWID	sqlite3.c	119823;"	d	file:
SQL_SELECT_DOCSIZE	sqlite3.c	119837;"	d	file:
SQL_SELECT_DOCTOTAL	sqlite3.c	119838;"	d	file:
SQL_SELECT_LEVEL	sqlite3.c	119828;"	d	file:
SQL_SELECT_LEVEL_COUNT	sqlite3.c	119830;"	d	file:
SQL_SELECT_LEVEL_RANGE	sqlite3.c	119829;"	d	file:
SQL_SELECT_SEGDIR_MAX_LEVEL	sqlite3.c	119831;"	d	file:
SRT_Coroutine	sqlite3.c	10688;"	d	file:
SRT_Discard	sqlite3.c	10678;"	d	file:
SRT_EphemTab	sqlite3.c	10687;"	d	file:
SRT_Except	sqlite3.c	10676;"	d	file:
SRT_Exists	sqlite3.c	10677;"	d	file:
SRT_Mem	sqlite3.c	10684;"	d	file:
SRT_Output	sqlite3.c	10683;"	d	file:
SRT_Set	sqlite3.c	10685;"	d	file:
SRT_Table	sqlite3.c	10686;"	d	file:
SRT_Union	sqlite3.c	10675;"	d	file:
STD_STREAM	utils.cpp	/^const string HMM_PP::utils::STD_STREAM = "-";$/;"	m	class:HMM_PP::utils	file:
STRICMP	sqlite3.c	78267;"	d	file:
STR_FUNCTION	sqlite3.c	9655;"	d	file:
SWAP	sqlite3.c	98830;"	d	file:
Savepoint	sqlite3.c	/^struct Savepoint {$/;"	s	file:
Savepoint	sqlite3.c	/^typedef struct Savepoint Savepoint;$/;"	t	typeref:struct:Savepoint	file:
Schema	sqlite3.c	/^struct Schema {$/;"	s	file:
Schema	sqlite3.c	/^typedef struct Schema Schema;$/;"	t	typeref:struct:Schema	file:
ScratchFreeslot	sqlite3.c	/^typedef struct ScratchFreeslot {$/;"	s	file:
ScratchFreeslot	sqlite3.c	/^} ScratchFreeslot;$/;"	t	typeref:struct:ScratchFreeslot	file:
SegmentNode	sqlite3.c	/^struct SegmentNode {$/;"	s	file:
SegmentNode	sqlite3.c	/^typedef struct SegmentNode SegmentNode;$/;"	t	typeref:struct:SegmentNode	file:
SegmentWriter	sqlite3.c	/^struct SegmentWriter {$/;"	s	file:
SegmentWriter	sqlite3.c	/^typedef struct SegmentWriter SegmentWriter;$/;"	t	typeref:struct:SegmentWriter	file:
Select	sqlite3.c	/^struct Select {$/;"	s	file:
Select	sqlite3.c	/^typedef struct Select Select;$/;"	t	typeref:struct:Select	file:
SelectDest	sqlite3.c	/^struct SelectDest {$/;"	s	file:
SelectDest	sqlite3.c	/^typedef struct SelectDest SelectDest;$/;"	t	typeref:struct:SelectDest	file:
ShmRegion	sqlite3.c	/^  struct ShmRegion {$/;"	s	struct:winShmNode	file:
Simplex	Simplex.cpp	/^HMM_PP::Simplex::Simplex() {$/;"	f	class:HMM_PP::Simplex
SimulateDiskfullError	sqlite3.c	22363;"	d	file:
SimulateDiskfullError	sqlite3.c	22377;"	d	file:
SimulateDiskfullError	sqlite3.c	24695;"	d	file:
SimulateDiskfullError	sqlite3.c	24709;"	d	file:
SimulateDiskfullError	sqlite3.c	31450;"	d	file:
SimulateDiskfullError	sqlite3.c	31464;"	d	file:
SimulateIOError	sqlite3.c	22354;"	d	file:
SimulateIOError	sqlite3.c	22376;"	d	file:
SimulateIOError	sqlite3.c	24686;"	d	file:
SimulateIOError	sqlite3.c	24708;"	d	file:
SimulateIOError	sqlite3.c	31441;"	d	file:
SimulateIOError	sqlite3.c	31463;"	d	file:
SimulateIOErrorBenign	sqlite3.c	22353;"	d	file:
SimulateIOErrorBenign	sqlite3.c	22375;"	d	file:
SimulateIOErrorBenign	sqlite3.c	24685;"	d	file:
SimulateIOErrorBenign	sqlite3.c	24707;"	d	file:
SimulateIOErrorBenign	sqlite3.c	31440;"	d	file:
SimulateIOErrorBenign	sqlite3.c	31462;"	d	file:
SizeofArray	sqlite3.c	111820;"	d	file:
SnippetFragment	sqlite3.c	/^struct SnippetFragment {$/;"	s	file:
SnippetFragment	sqlite3.c	/^typedef struct SnippetFragment SnippetFragment;$/;"	t	typeref:struct:SnippetFragment	file:
SnippetIter	sqlite3.c	/^struct SnippetIter {$/;"	s	file:
SnippetIter	sqlite3.c	/^typedef struct SnippetIter SnippetIter;$/;"	t	typeref:struct:SnippetIter	file:
SnippetPhrase	sqlite3.c	/^struct SnippetPhrase {$/;"	s	file:
SnippetPhrase	sqlite3.c	/^typedef struct SnippetPhrase SnippetPhrase;$/;"	t	typeref:struct:SnippetPhrase	file:
SortByDimension	sqlite3.c	/^static void SortByDimension($/;"	f	file:
SortByDistance	sqlite3.c	/^static void SortByDistance($/;"	f	file:
SplitNode	sqlite3.c	/^static int SplitNode($/;"	f	file:
Sqlite3Config	sqlite3.c	/^struct Sqlite3Config {$/;"	s	file:
SrcList	sqlite3.c	/^struct SrcList {$/;"	s	file:
SrcList	sqlite3.c	/^typedef struct SrcList SrcList;$/;"	t	typeref:struct:SrcList	file:
SrcList_item	sqlite3.c	/^  struct SrcList_item {$/;"	s	struct:SrcList	file:
StrAccum	sqlite3.c	/^struct StrAccum {$/;"	s	file:
StrAccum	sqlite3.c	/^typedef struct StrAccum StrAccum;$/;"	t	typeref:struct:StrAccum	file:
StrBuffer	sqlite3.c	/^struct StrBuffer {$/;"	s	file:
StrBuffer	sqlite3.c	/^typedef struct StrBuffer StrBuffer;$/;"	t	typeref:struct:StrBuffer	file:
Stringify	sqlite3.c	62387;"	d	file:
SubProgram	sqlite3.c	/^struct SubProgram {$/;"	s	file:
SubProgram	sqlite3.c	/^typedef struct SubProgram SubProgram;$/;"	t	typeref:struct:SubProgram	file:
SumCtx	sqlite3.c	/^struct SumCtx {$/;"	s	file:
SumCtx	sqlite3.c	/^typedef struct SumCtx SumCtx;$/;"	t	typeref:struct:SumCtx	file:
TEMP_MASTER_NAME	sqlite3.c	7761;"	d	file:
TERM_ANDINFO	sqlite3.c	98447;"	d	file:
TERM_CODED	sqlite3.c	98444;"	d	file:
TERM_COPIED	sqlite3.c	98445;"	d	file:
TERM_DYNAMIC	sqlite3.c	98442;"	d	file:
TERM_ORINFO	sqlite3.c	98446;"	d	file:
TERM_OR_OK	sqlite3.c	98448;"	d	file:
TERM_VIRTUAL	sqlite3.c	98443;"	d	file:
TERM_VNULL	sqlite3.c	98450;"	d	file:
TERM_VNULL	sqlite3.c	98452;"	d	file:
TESTBIT	sqlite3.c	34570;"	d	file:
TESTONLY	sqlite3.c	111909;"	d	file:
TESTONLY	sqlite3.c	111911;"	d	file:
TESTONLY	sqlite3.c	476;"	d	file:
TESTONLY	sqlite3.c	478;"	d	file:
TF_Autoincrement	sqlite3.c	9913;"	d	file:
TF_Ephemeral	sqlite3.c	9911;"	d	file:
TF_HasPrimaryKey	sqlite3.c	9912;"	d	file:
TF_NeedMetadata	sqlite3.c	9915;"	d	file:
TF_Readonly	sqlite3.c	9910;"	d	file:
TF_Virtual	sqlite3.c	9914;"	d	file:
TIMER_ELAPSED	sqlite3.c	22333;"	d	file:
TIMER_ELAPSED	sqlite3.c	22337;"	d	file:
TIMER_ELAPSED	sqlite3.c	24665;"	d	file:
TIMER_ELAPSED	sqlite3.c	24669;"	d	file:
TIMER_ELAPSED	sqlite3.c	31420;"	d	file:
TIMER_ELAPSED	sqlite3.c	31424;"	d	file:
TIMER_END	sqlite3.c	22332;"	d	file:
TIMER_END	sqlite3.c	22336;"	d	file:
TIMER_END	sqlite3.c	24664;"	d	file:
TIMER_END	sqlite3.c	24668;"	d	file:
TIMER_END	sqlite3.c	31419;"	d	file:
TIMER_END	sqlite3.c	31423;"	d	file:
TIMER_START	sqlite3.c	22331;"	d	file:
TIMER_START	sqlite3.c	22335;"	d	file:
TIMER_START	sqlite3.c	24663;"	d	file:
TIMER_START	sqlite3.c	24667;"	d	file:
TIMER_START	sqlite3.c	31418;"	d	file:
TIMER_START	sqlite3.c	31422;"	d	file:
TK_ABORT	sqlite3.c	7408;"	d	file:
TK_ACTION	sqlite3.c	7409;"	d	file:
TK_ADD	sqlite3.c	7520;"	d	file:
TK_AFTER	sqlite3.c	7410;"	d	file:
TK_AGG_COLUMN	sqlite3.c	7534;"	d	file:
TK_AGG_FUNCTION	sqlite3.c	7533;"	d	file:
TK_ALL	sqlite3.c	7493;"	d	file:
TK_ALTER	sqlite3.c	7519;"	d	file:
TK_ANALYZE	sqlite3.c	7411;"	d	file:
TK_AND	sqlite3.c	7449;"	d	file:
TK_ANY	sqlite3.c	7447;"	d	file:
TK_AS	sqlite3.c	7404;"	d	file:
TK_ASC	sqlite3.c	7412;"	d	file:
TK_ATTACH	sqlite3.c	7413;"	d	file:
TK_AUTOINCR	sqlite3.c	7483;"	d	file:
TK_BEFORE	sqlite3.c	7414;"	d	file:
TK_BEGIN	sqlite3.c	7385;"	d	file:
TK_BETWEEN	sqlite3.c	7451;"	d	file:
TK_BITAND	sqlite3.c	7462;"	d	file:
TK_BITNOT	sqlite3.c	7473;"	d	file:
TK_BITOR	sqlite3.c	7463;"	d	file:
TK_BLOB	sqlite3.c	7511;"	d	file:
TK_BY	sqlite3.c	7415;"	d	file:
TK_CASCADE	sqlite3.c	7416;"	d	file:
TK_CASE	sqlite3.c	7514;"	d	file:
TK_CAST	sqlite3.c	7417;"	d	file:
TK_CHECK	sqlite3.c	7481;"	d	file:
TK_COLLATE	sqlite3.c	7472;"	d	file:
TK_COLUMN	sqlite3.c	7532;"	d	file:
TK_COLUMNKW	sqlite3.c	7418;"	d	file:
TK_COMMA	sqlite3.c	7405;"	d	file:
TK_COMMIT	sqlite3.c	7390;"	d	file:
TK_CONCAT	sqlite3.c	7471;"	d	file:
TK_CONFLICT	sqlite3.c	7419;"	d	file:
TK_CONSTRAINT	sqlite3.c	7476;"	d	file:
TK_CONST_FUNC	sqlite3.c	7535;"	d	file:
TK_CREATE	sqlite3.c	7397;"	d	file:
TK_CTIME_KW	sqlite3.c	7446;"	d	file:
TK_DATABASE	sqlite3.c	7420;"	d	file:
TK_DEFAULT	sqlite3.c	7477;"	d	file:
TK_DEFERRABLE	sqlite3.c	7489;"	d	file:
TK_DEFERRED	sqlite3.c	7387;"	d	file:
TK_DELETE	sqlite3.c	7486;"	d	file:
TK_DESC	sqlite3.c	7421;"	d	file:
TK_DETACH	sqlite3.c	7422;"	d	file:
TK_DISTINCT	sqlite3.c	7497;"	d	file:
TK_DOT	sqlite3.c	7498;"	d	file:
TK_DROP	sqlite3.c	7491;"	d	file:
TK_EACH	sqlite3.c	7423;"	d	file:
TK_ELSE	sqlite3.c	7517;"	d	file:
TK_END	sqlite3.c	7391;"	d	file:
TK_END_OF_FILE	sqlite3.c	7527;"	d	file:
TK_EQ	sqlite3.c	7456;"	d	file:
TK_ESCAPE	sqlite3.c	7461;"	d	file:
TK_EXCEPT	sqlite3.c	7494;"	d	file:
TK_EXCLUSIVE	sqlite3.c	7389;"	d	file:
TK_EXISTS	sqlite3.c	7400;"	d	file:
TK_EXPLAIN	sqlite3.c	7382;"	d	file:
TK_FAIL	sqlite3.c	7424;"	d	file:
TK_FLOAT	sqlite3.c	7510;"	d	file:
TK_FOR	sqlite3.c	7425;"	d	file:
TK_FOREIGN	sqlite3.c	7490;"	d	file:
TK_FROM	sqlite3.c	7499;"	d	file:
TK_FUNCTION	sqlite3.c	7531;"	d	file:
TK_GE	sqlite3.c	7460;"	d	file:
TK_GROUP	sqlite3.c	7503;"	d	file:
TK_GT	sqlite3.c	7457;"	d	file:
TK_HAVING	sqlite3.c	7504;"	d	file:
TK_ID	sqlite3.c	7406;"	d	file:
TK_IF	sqlite3.c	7398;"	d	file:
TK_IGNORE	sqlite3.c	7426;"	d	file:
TK_ILLEGAL	sqlite3.c	7528;"	d	file:
TK_IMMEDIATE	sqlite3.c	7388;"	d	file:
TK_IN	sqlite3.c	7452;"	d	file:
TK_INDEX	sqlite3.c	7518;"	d	file:
TK_INDEXED	sqlite3.c	7407;"	d	file:
TK_INITIALLY	sqlite3.c	7427;"	d	file:
TK_INSERT	sqlite3.c	7485;"	d	file:
TK_INSTEAD	sqlite3.c	7428;"	d	file:
TK_INTEGER	sqlite3.c	7509;"	d	file:
TK_INTERSECT	sqlite3.c	7495;"	d	file:
TK_INTO	sqlite3.c	7507;"	d	file:
TK_IS	sqlite3.c	7450;"	d	file:
TK_ISNOT	sqlite3.c	7526;"	d	file:
TK_ISNULL	sqlite3.c	7453;"	d	file:
TK_JOIN	sqlite3.c	7500;"	d	file:
TK_JOIN_KW	sqlite3.c	7475;"	d	file:
TK_KEY	sqlite3.c	7432;"	d	file:
TK_LE	sqlite3.c	7458;"	d	file:
TK_LIKE_KW	sqlite3.c	7429;"	d	file:
TK_LIMIT	sqlite3.c	7505;"	d	file:
TK_LP	sqlite3.c	7402;"	d	file:
TK_LSHIFT	sqlite3.c	7464;"	d	file:
TK_LT	sqlite3.c	7459;"	d	file:
TK_MATCH	sqlite3.c	7430;"	d	file:
TK_MINUS	sqlite3.c	7467;"	d	file:
TK_NE	sqlite3.c	7455;"	d	file:
TK_NO	sqlite3.c	7431;"	d	file:
TK_NOT	sqlite3.c	7399;"	d	file:
TK_NOTNULL	sqlite3.c	7454;"	d	file:
TK_NULL	sqlite3.c	7478;"	d	file:
TK_OF	sqlite3.c	7433;"	d	file:
TK_OFFSET	sqlite3.c	7434;"	d	file:
TK_ON	sqlite3.c	7484;"	d	file:
TK_OR	sqlite3.c	7448;"	d	file:
TK_ORDER	sqlite3.c	7502;"	d	file:
TK_PLAN	sqlite3.c	7384;"	d	file:
TK_PLUS	sqlite3.c	7466;"	d	file:
TK_PRAGMA	sqlite3.c	7435;"	d	file:
TK_PRIMARY	sqlite3.c	7479;"	d	file:
TK_QUERY	sqlite3.c	7383;"	d	file:
TK_RAISE	sqlite3.c	7436;"	d	file:
TK_REFERENCES	sqlite3.c	7482;"	d	file:
TK_REGISTER	sqlite3.c	7512;"	d	file:
TK_REINDEX	sqlite3.c	7444;"	d	file:
TK_RELEASE	sqlite3.c	7394;"	d	file:
TK_REM	sqlite3.c	7470;"	d	file:
TK_RENAME	sqlite3.c	7445;"	d	file:
TK_REPLACE	sqlite3.c	7437;"	d	file:
TK_RESTRICT	sqlite3.c	7438;"	d	file:
TK_ROLLBACK	sqlite3.c	7392;"	d	file:
TK_ROW	sqlite3.c	7439;"	d	file:
TK_RP	sqlite3.c	7403;"	d	file:
TK_RSHIFT	sqlite3.c	7465;"	d	file:
TK_SAVEPOINT	sqlite3.c	7393;"	d	file:
TK_SELECT	sqlite3.c	7496;"	d	file:
TK_SEMI	sqlite3.c	7381;"	d	file:
TK_SET	sqlite3.c	7488;"	d	file:
TK_SLASH	sqlite3.c	7469;"	d	file:
TK_SPACE	sqlite3.c	7529;"	d	file:
TK_STAR	sqlite3.c	7468;"	d	file:
TK_STRING	sqlite3.c	7474;"	d	file:
TK_TABLE	sqlite3.c	7396;"	d	file:
TK_TEMP	sqlite3.c	7401;"	d	file:
TK_THEN	sqlite3.c	7516;"	d	file:
TK_TO	sqlite3.c	7395;"	d	file:
TK_TO_BLOB	sqlite3.c	7522;"	d	file:
TK_TO_INT	sqlite3.c	7524;"	d	file:
TK_TO_NUMERIC	sqlite3.c	7523;"	d	file:
TK_TO_REAL	sqlite3.c	7525;"	d	file:
TK_TO_TEXT	sqlite3.c	7521;"	d	file:
TK_TRANSACTION	sqlite3.c	7386;"	d	file:
TK_TRIGGER	sqlite3.c	7440;"	d	file:
TK_UMINUS	sqlite3.c	7536;"	d	file:
TK_UNCLOSED_STRING	sqlite3.c	7530;"	d	file:
TK_UNION	sqlite3.c	7492;"	d	file:
TK_UNIQUE	sqlite3.c	7480;"	d	file:
TK_UPDATE	sqlite3.c	7487;"	d	file:
TK_UPLUS	sqlite3.c	7537;"	d	file:
TK_USING	sqlite3.c	7501;"	d	file:
TK_VACUUM	sqlite3.c	7441;"	d	file:
TK_VALUES	sqlite3.c	7508;"	d	file:
TK_VARIABLE	sqlite3.c	7513;"	d	file:
TK_VIEW	sqlite3.c	7442;"	d	file:
TK_VIRTUAL	sqlite3.c	7443;"	d	file:
TK_WHEN	sqlite3.c	7515;"	d	file:
TK_WHERE	sqlite3.c	7506;"	d	file:
TOKEN	sqlite3.c	106547;"	d	file:
TRACE	sqlite3.c	47543;"	d	file:
TRACE_IDX_INPUTS	sqlite3.c	/^static void TRACE_IDX_INPUTS(sqlite3_index_info *p){$/;"	f	file:
TRACE_IDX_INPUTS	sqlite3.c	99931;"	d	file:
TRACE_IDX_OUTPUTS	sqlite3.c	/^static void TRACE_IDX_OUTPUTS(sqlite3_index_info *p){$/;"	f	file:
TRACE_IDX_OUTPUTS	sqlite3.c	99932;"	d	file:
TRANS_NONE	sqlite3.c	46958;"	d	file:
TRANS_READ	sqlite3.c	46959;"	d	file:
TRANS_WRITE	sqlite3.c	46960;"	d	file:
TRIGGER_AFTER	sqlite3.c	10929;"	d	file:
TRIGGER_BEFORE	sqlite3.c	10928;"	d	file:
TWOPOWER31	sqlite3.c	21638;"	d	file:
TWOPOWER32	sqlite3.c	21637;"	d	file:
TabResult	sqlite3.c	/^typedef struct TabResult {$/;"	s	file:
TabResult	sqlite3.c	/^} TabResult;$/;"	t	typeref:struct:TabResult	file:
Table	sqlite3.c	/^struct Table {$/;"	s	file:
Table	sqlite3.c	/^typedef struct Table Table;$/;"	t	typeref:struct:Table	file:
TableLock	sqlite3.c	/^struct TableLock {$/;"	s	file:
TableLock	sqlite3.c	/^typedef struct TableLock TableLock;$/;"	t	typeref:struct:TableLock	file:
TermOffset	sqlite3.c	/^struct TermOffset {$/;"	s	file:
TermOffset	sqlite3.c	/^typedef struct TermOffset TermOffset;$/;"	t	typeref:struct:TermOffset	file:
TermOffsetCtx	sqlite3.c	/^struct TermOffsetCtx {$/;"	s	file:
TermOffsetCtx	sqlite3.c	/^typedef struct TermOffsetCtx TermOffsetCtx;$/;"	t	typeref:struct:TermOffsetCtx	file:
TermSelect	sqlite3.c	/^struct TermSelect {$/;"	s	file:
TermSelect	sqlite3.c	/^typedef struct TermSelect TermSelect;$/;"	t	typeref:struct:TermSelect	file:
Token	sqlite3.c	/^struct Token {$/;"	s	file:
Token	sqlite3.c	/^typedef struct Token Token;$/;"	t	typeref:struct:Token	file:
TrigEvent	sqlite3.c	/^struct TrigEvent { int a; IdList * b; };$/;"	s	file:
Trigger	sqlite3.c	/^struct Trigger {$/;"	s	file:
Trigger	sqlite3.c	/^typedef struct Trigger Trigger;$/;"	t	typeref:struct:Trigger	file:
TriggerPrg	sqlite3.c	/^struct TriggerPrg {$/;"	s	file:
TriggerPrg	sqlite3.c	/^typedef struct TriggerPrg TriggerPrg;$/;"	t	typeref:struct:TriggerPrg	file:
TriggerStep	sqlite3.c	/^struct TriggerStep {$/;"	s	file:
TriggerStep	sqlite3.c	/^typedef struct TriggerStep TriggerStep;$/;"	t	typeref:struct:TriggerStep	file:
UINT16_TYPE	sqlite3.c	7639;"	d	file:
UINT16_TYPE	sqlite3.c	7641;"	d	file:
UINT32_TYPE	sqlite3.c	7632;"	d	file:
UINT32_TYPE	sqlite3.c	7634;"	d	file:
UINT8_TYPE	sqlite3.c	7653;"	d	file:
UINT8_TYPE	sqlite3.c	7655;"	d	file:
UNIXFILE_EXCL	sqlite3.c	24514;"	d	file:
UNIXFILE_RDONLY	sqlite3.c	24515;"	d	file:
UNIXVFS	sqlite3.c	31132;"	d	file:
UNIX_SHM_BASE	sqlite3.c	28051;"	d	file:
UNIX_SHM_DMS	sqlite3.c	28052;"	d	file:
UNKNOWN_LOCK	sqlite3.c	37198;"	d	file:
UNPACKED_IGNORE_ROWID	sqlite3.c	10048;"	d	file:
UNPACKED_INCRKEY	sqlite3.c	10049;"	d	file:
UNPACKED_NEED_DESTROY	sqlite3.c	10047;"	d	file:
UNPACKED_NEED_FREE	sqlite3.c	10046;"	d	file:
UNPACKED_PREFIX_MATCH	sqlite3.c	10050;"	d	file:
UNPACKED_PREFIX_SEARCH	sqlite3.c	10051;"	d	file:
UNUSED_PARAMETER	sqlite3.c	111894;"	d	file:
UNUSED_PARAMETER	sqlite3.c	124497;"	d	file:
UNUSED_PARAMETER	sqlite3.c	7827;"	d	file:
UNUSED_PARAMETER2	sqlite3.c	7828;"	d	file:
UPDATE_MAX_BLOBSIZE	sqlite3.c	62378;"	d	file:
UPDATE_MAX_BLOBSIZE	sqlite3.c	62380;"	d	file:
UnivariateCategoricalData	UnivariateCategoricalData.cpp	/^HMM_PP::UnivariateCategoricalData::UnivariateCategoricalData()$/;"	f	class:HMM_PP::UnivariateCategoricalData
UnivariateCategoricalModelParams	UnivariateCategoricalModelParams.cpp	/^HMM_PP::UnivariateCategoricalModelParams::UnivariateCategoricalModelParams(istream& stream, HMM_PP::DataLoader<UnivariateCategoricalData>* dataLoader)$/;"	f	class:HMM_PP::UnivariateCategoricalModelParams
UnivariateQuantitativeModelParams	UnivariateQuantitativeModelParams.cpp	/^HMM_PP::UnivariateQuantitativeModelParams::UnivariateQuantitativeModelParams(istream& stream, HMM_PP::DataLoader<UnivariateQuantitativeData>* dataLoader)$/;"	f	class:HMM_PP::UnivariateQuantitativeModelParams
UnixUnusedFd	sqlite3.c	/^struct UnixUnusedFd {$/;"	s	file:
UnixUnusedFd	sqlite3.c	/^typedef struct UnixUnusedFd UnixUnusedFd;     \/* An unused file descriptor *\/$/;"	t	typeref:struct:UnixUnusedFd	file:
UnlockFile	sqlite3.c	31858;"	d	file:
UnpackedRecord	sqlite3.c	/^struct UnpackedRecord {$/;"	s	file:
UnpackedRecord	sqlite3.c	/^typedef struct UnpackedRecord UnpackedRecord;$/;"	t	typeref:struct:UnpackedRecord	file:
UpperToLower	sqlite3.c	20734;"	d	file:
VARIANT_GUTTMAN_LINEAR_SPLIT	sqlite3.c	124457;"	d	file:
VARIANT_GUTTMAN_QUADRATIC_SPLIT	sqlite3.c	124456;"	d	file:
VARIANT_GUTTMAN_SPLIT	sqlite3.c	124460;"	d	file:
VARIANT_RSTARTREE_CHOOSESUBTREE	sqlite3.c	124450;"	d	file:
VARIANT_RSTARTREE_REINSERT	sqlite3.c	124451;"	d	file:
VARIANT_RSTARTREE_SPLIT	sqlite3.c	124458;"	d	file:
VDBE_MAGIC_DEAD	sqlite3.c	12816;"	d	file:
VDBE_MAGIC_HALT	sqlite3.c	12815;"	d	file:
VDBE_MAGIC_INIT	sqlite3.c	12813;"	d	file:
VDBE_MAGIC_RUN	sqlite3.c	12814;"	d	file:
VTable	sqlite3.c	/^struct VTable {$/;"	s	file:
VTable	sqlite3.c	/^typedef struct VTable VTable;$/;"	t	typeref:struct:VTable	file:
VVA_ONLY	sqlite3.c	490;"	d	file:
VVA_ONLY	sqlite3.c	492;"	d	file:
Vdbe	sqlite3.c	/^struct Vdbe {$/;"	s	file:
Vdbe	sqlite3.c	/^typedef struct Vdbe Vdbe;$/;"	t	typeref:struct:Vdbe	file:
VdbeComment	sqlite3.c	8538;"	d	file:
VdbeComment	sqlite3.c	8542;"	d	file:
VdbeCursor	sqlite3.c	/^struct VdbeCursor {$/;"	s	file:
VdbeCursor	sqlite3.c	/^typedef struct VdbeCursor VdbeCursor;$/;"	t	typeref:struct:VdbeCursor	file:
VdbeFrame	sqlite3.c	/^struct VdbeFrame {$/;"	s	file:
VdbeFrame	sqlite3.c	/^typedef struct VdbeFrame VdbeFrame;$/;"	t	typeref:struct:VdbeFrame	file:
VdbeFrameMem	sqlite3.c	12609;"	d	file:
VdbeFunc	sqlite3.c	/^struct VdbeFunc {$/;"	s	file:
VdbeFunc	sqlite3.c	/^typedef struct VdbeFunc VdbeFunc;$/;"	t	typeref:struct:VdbeFunc	file:
VdbeNoopComment	sqlite3.c	8540;"	d	file:
VdbeNoopComment	sqlite3.c	8543;"	d	file:
VdbeOp	sqlite3.c	/^struct VdbeOp {$/;"	s	file:
VdbeOp	sqlite3.c	/^typedef struct VdbeOp VdbeOp;$/;"	t	typeref:struct:VdbeOp	file:
VdbeOpIter	sqlite3.c	/^struct VdbeOpIter {$/;"	s	file:
VdbeOpIter	sqlite3.c	/^typedef struct VdbeOpIter VdbeOpIter;$/;"	t	typeref:struct:VdbeOpIter	file:
VdbeOpList	sqlite3.c	/^struct VdbeOpList {$/;"	s	file:
VdbeOpList	sqlite3.c	/^typedef struct VdbeOpList VdbeOpList;$/;"	t	typeref:struct:VdbeOpList	file:
VtabCtx	sqlite3.c	/^struct VtabCtx {$/;"	s	file:
VtabCtx	sqlite3.c	/^typedef struct VtabCtx VtabCtx;$/;"	t	typeref:struct:VtabCtx	file:
WALINDEX_HDR_SIZE	sqlite3.c	44000;"	d	file:
WALINDEX_LOCK_OFFSET	sqlite3.c	43998;"	d	file:
WALINDEX_LOCK_RESERVED	sqlite3.c	43999;"	d	file:
WALINDEX_MAX_VERSION	sqlite3.c	43893;"	d	file:
WALINDEX_PGSZ	sqlite3.c	44122;"	d	file:
WALTRACE	sqlite3.c	43874;"	d	file:
WALTRACE	sqlite3.c	43876;"	d	file:
WAL_ALL_BUT_WRITE	sqlite3.c	43900;"	d	file:
WAL_CKPT_LOCK	sqlite3.c	43901;"	d	file:
WAL_EXCLUSIVE_MODE	sqlite3.c	44059;"	d	file:
WAL_FRAME_HDRSIZE	sqlite3.c	44003;"	d	file:
WAL_HDRSIZE	sqlite3.c	44007;"	d	file:
WAL_HEAPMEMORY_MODE	sqlite3.c	44060;"	d	file:
WAL_MAGIC	sqlite3.c	44018;"	d	file:
WAL_MAX_VERSION	sqlite3.c	43892;"	d	file:
WAL_NORMAL_MODE	sqlite3.c	44058;"	d	file:
WAL_NREADER	sqlite3.c	43904;"	d	file:
WAL_RDONLY	sqlite3.c	44066;"	d	file:
WAL_RDWR	sqlite3.c	44065;"	d	file:
WAL_READ_LOCK	sqlite3.c	43903;"	d	file:
WAL_RECOVER_LOCK	sqlite3.c	43902;"	d	file:
WAL_RETRY	sqlite3.c	45593;"	d	file:
WAL_SAVEPOINT_NDATA	sqlite3.c	36731;"	d	file:
WAL_SHM_RDONLY	sqlite3.c	44067;"	d	file:
WAL_WRITE_LOCK	sqlite3.c	43899;"	d	file:
WHERETRACE	sqlite3.c	98357;"	d	file:
WHERETRACE	sqlite3.c	98359;"	d	file:
WHERE_BOTH_LIMIT	sqlite3.c	98576;"	d	file:
WHERE_BTM_LIMIT	sqlite3.c	98575;"	d	file:
WHERE_COLUMN_EQ	sqlite3.c	98567;"	d	file:
WHERE_COLUMN_IN	sqlite3.c	98569;"	d	file:
WHERE_COLUMN_NULL	sqlite3.c	98570;"	d	file:
WHERE_COLUMN_RANGE	sqlite3.c	98568;"	d	file:
WHERE_DUPLICATES_OK	sqlite3.c	10555;"	d	file:
WHERE_FORCE_TABLE	sqlite3.c	10558;"	d	file:
WHERE_IDX_ONLY	sqlite3.c	98577;"	d	file:
WHERE_INDEXED	sqlite3.c	98571;"	d	file:
WHERE_IN_ABLE	sqlite3.c	98573;"	d	file:
WHERE_MULTI_OR	sqlite3.c	98582;"	d	file:
WHERE_NOT_FULLSCAN	sqlite3.c	98572;"	d	file:
WHERE_OMIT_CLOSE	sqlite3.c	10557;"	d	file:
WHERE_OMIT_OPEN	sqlite3.c	10556;"	d	file:
WHERE_ONEPASS_DESIRED	sqlite3.c	10554;"	d	file:
WHERE_ONETABLE_ONLY	sqlite3.c	10559;"	d	file:
WHERE_ORDERBY	sqlite3.c	98578;"	d	file:
WHERE_ORDERBY_MAX	sqlite3.c	10553;"	d	file:
WHERE_ORDERBY_MIN	sqlite3.c	10552;"	d	file:
WHERE_ORDERBY_NORMAL	sqlite3.c	10551;"	d	file:
WHERE_REVERSE	sqlite3.c	98579;"	d	file:
WHERE_ROWID_EQ	sqlite3.c	98565;"	d	file:
WHERE_ROWID_RANGE	sqlite3.c	98566;"	d	file:
WHERE_TEMP_INDEX	sqlite3.c	98583;"	d	file:
WHERE_TOP_LIMIT	sqlite3.c	98574;"	d	file:
WHERE_UNIQUE	sqlite3.c	98580;"	d	file:
WHERE_VIRTUALTABLE	sqlite3.c	98581;"	d	file:
WINCE_DELETION_ATTEMPTS	sqlite3.c	32208;"	d	file:
WIN_SHM_BASE	sqlite3.c	32860;"	d	file:
WIN_SHM_DMS	sqlite3.c	32861;"	d	file:
WO_ALL	sqlite3.c	98549;"	d	file:
WO_AND	sqlite3.c	98546;"	d	file:
WO_EQ	sqlite3.c	98538;"	d	file:
WO_GE	sqlite3.c	98542;"	d	file:
WO_GT	sqlite3.c	98541;"	d	file:
WO_IN	sqlite3.c	98537;"	d	file:
WO_ISNULL	sqlite3.c	98544;"	d	file:
WO_LE	sqlite3.c	98540;"	d	file:
WO_LT	sqlite3.c	98539;"	d	file:
WO_MATCH	sqlite3.c	98543;"	d	file:
WO_NOOP	sqlite3.c	98547;"	d	file:
WO_OR	sqlite3.c	98545;"	d	file:
WO_SINGLE	sqlite3.c	98550;"	d	file:
WRC_Abort	sqlite3.c	11089;"	d	file:
WRC_Continue	sqlite3.c	11087;"	d	file:
WRC_Prune	sqlite3.c	11088;"	d	file:
WRITE_LOCK	sqlite3.c	46913;"	d	file:
WRITE_UTF16BE	sqlite3.c	20056;"	d	file:
WRITE_UTF16LE	sqlite3.c	20044;"	d	file:
WRITE_UTF8	sqlite3.c	20024;"	d	file:
Wal	sqlite3.c	/^struct Wal {$/;"	s	file:
Wal	sqlite3.c	/^typedef struct Wal Wal;$/;"	t	typeref:struct:Wal	file:
WalCkptInfo	sqlite3.c	/^struct WalCkptInfo {$/;"	s	file:
WalCkptInfo	sqlite3.c	/^typedef struct WalCkptInfo WalCkptInfo;$/;"	t	typeref:struct:WalCkptInfo	file:
WalIndexHdr	sqlite3.c	/^struct WalIndexHdr {$/;"	s	file:
WalIndexHdr	sqlite3.c	/^typedef struct WalIndexHdr WalIndexHdr;$/;"	t	typeref:struct:WalIndexHdr	file:
WalIterator	sqlite3.c	/^struct WalIterator {$/;"	s	file:
WalIterator	sqlite3.c	/^typedef struct WalIterator WalIterator;$/;"	t	typeref:struct:WalIterator	file:
WalSegment	sqlite3.c	/^  struct WalSegment {$/;"	s	struct:WalIterator	file:
Walker	sqlite3.c	/^struct Walker {$/;"	s	file:
Walker	sqlite3.c	/^typedef struct Walker Walker;$/;"	t	typeref:struct:Walker	file:
WhereAndInfo	sqlite3.c	/^struct WhereAndInfo {$/;"	s	file:
WhereAndInfo	sqlite3.c	/^typedef struct WhereAndInfo WhereAndInfo;$/;"	t	typeref:struct:WhereAndInfo	file:
WhereClause	sqlite3.c	/^struct WhereClause {$/;"	s	file:
WhereClause	sqlite3.c	/^typedef struct WhereClause WhereClause;$/;"	t	typeref:struct:WhereClause	file:
WhereCost	sqlite3.c	/^struct WhereCost {$/;"	s	file:
WhereCost	sqlite3.c	/^typedef struct WhereCost WhereCost;$/;"	t	typeref:struct:WhereCost	file:
WhereInfo	sqlite3.c	/^struct WhereInfo {$/;"	s	file:
WhereInfo	sqlite3.c	/^typedef struct WhereInfo WhereInfo;$/;"	t	typeref:struct:WhereInfo	file:
WhereLevel	sqlite3.c	/^struct WhereLevel {$/;"	s	file:
WhereLevel	sqlite3.c	/^typedef struct WhereLevel WhereLevel;$/;"	t	typeref:struct:WhereLevel	file:
WhereMaskSet	sqlite3.c	/^struct WhereMaskSet {$/;"	s	file:
WhereMaskSet	sqlite3.c	/^typedef struct WhereMaskSet WhereMaskSet;$/;"	t	typeref:struct:WhereMaskSet	file:
WhereOrInfo	sqlite3.c	/^struct WhereOrInfo {$/;"	s	file:
WhereOrInfo	sqlite3.c	/^typedef struct WhereOrInfo WhereOrInfo;$/;"	t	typeref:struct:WhereOrInfo	file:
WherePlan	sqlite3.c	/^struct WherePlan {$/;"	s	file:
WherePlan	sqlite3.c	/^typedef struct WherePlan WherePlan;$/;"	t	typeref:struct:WherePlan	file:
WhereTerm	sqlite3.c	/^struct WhereTerm {$/;"	s	file:
WhereTerm	sqlite3.c	/^typedef struct WhereTerm WhereTerm;$/;"	t	typeref:struct:WhereTerm	file:
Y	sqlite3.c	/^  int Y, M, D;       \/* Year, month, and day *\/$/;"	m	struct:DateTime	file:
YYACTIONTYPE	sqlite3.c	103499;"	d	file:
YYCODETYPE	sqlite3.c	103497;"	d	file:
YYFALLBACK	sqlite3.c	103528;"	d	file:
YYMINORTYPE	sqlite3.c	/^} YYMINORTYPE;$/;"	t	typeref:union:__anon18	file:
YYNOCODE	sqlite3.c	103498;"	d	file:
YYNOERRORRECOVERY	sqlite3.c	103334;"	d	file:
YYNRULE	sqlite3.c	103527;"	d	file:
YYNSTATE	sqlite3.c	103526;"	d	file:
YYSTACKDEPTH	sqlite3.c	103520;"	d	file:
YYWILDCARD	sqlite3.c	103500;"	d	file:
YY_ACCEPT_ACTION	sqlite3.c	103530;"	d	file:
YY_ACTTAB_COUNT	sqlite3.c	103597;"	d	file:
YY_ERROR_ACTION	sqlite3.c	103531;"	d	file:
YY_NO_ACTION	sqlite3.c	103529;"	d	file:
YY_REDUCE_COUNT	sqlite3.c	103963;"	d	file:
YY_REDUCE_MAX	sqlite3.c	103965;"	d	file:
YY_REDUCE_MIN	sqlite3.c	103964;"	d	file:
YY_REDUCE_USE_DFLT	sqlite3.c	103962;"	d	file:
YY_SHIFT_COUNT	sqlite3.c	103915;"	d	file:
YY_SHIFT_MAX	sqlite3.c	103917;"	d	file:
YY_SHIFT_MIN	sqlite3.c	103916;"	d	file:
YY_SHIFT_USE_DFLT	sqlite3.c	103914;"	d	file:
_BTREE_H_	sqlite3.c	7900;"	d	file:
_FILE_OFFSET_BITS	sqlite3.c	24370;"	d	file:
_FILE_OFFSET_BITS	sqlite3.c	68;"	d	file:
_FTS3_HASH_H_	sqlite3.c	111699;"	d	file:
_FTS3_TOKENIZER_H_	sqlite3.c	111546;"	d	file:
_FTSINT_H	sqlite3.c	111508;"	d	file:
_GNU_SOURCE	sqlite3.c	306;"	d	file:
_HWTIME_H_	sqlite3.c	22256;"	d	file:
_HWTIME_H_	sqlite3.c	24588;"	d	file:
_HWTIME_H_	sqlite3.c	31343;"	d	file:
_HWTIME_H_	sqlite3.c	62733;"	d	file:
_LARGEFILE_SOURCE	sqlite3.c	24372;"	d	file:
_LARGEFILE_SOURCE	sqlite3.c	70;"	d	file:
_LARGE_FILE	sqlite3.c	24368;"	d	file:
_LARGE_FILE	sqlite3.c	66;"	d	file:
_OS_COMMON_H_	sqlite3.c	22210;"	d	file:
_OS_COMMON_H_	sqlite3.c	24542;"	d	file:
_OS_COMMON_H_	sqlite3.c	31297;"	d	file:
_OvflCell	sqlite3.c	/^  struct _OvflCell {   \/* Cells that will not fit on aData[] *\/$/;"	s	struct:MemPage	file:
_PAGER_H_	sqlite3.c	8569;"	d	file:
_SHM_RDLCK	sqlite3.c	23164;"	d	file:
_SHM_RDLCK	sqlite3.c	32867;"	d	file:
_SHM_UNLCK	sqlite3.c	23163;"	d	file:
_SHM_UNLCK	sqlite3.c	32866;"	d	file:
_SHM_WRLCK	sqlite3.c	23165;"	d	file:
_SHM_WRLCK	sqlite3.c	32868;"	d	file:
_SHM_WRLCK_WAIT	sqlite3.c	23166;"	d	file:
_SQLITE3EXT_H_	sqlite3.c	87044;"	d	file:
_SQLITE3RTREE_H_	sqlite3.c	7233;"	d	file:
_SQLITE3_H_	sqlite3.c	577;"	d	file:
_SQLITEINT_H_	sqlite3.c	44;"	d	file:
_SQLITE_HASH_H_	sqlite3.c	7295;"	d	file:
_SQLITE_OS_C_	sqlite3.c	14261;"	d	file:
_SQLITE_OS_C_	sqlite3.c	14262;"	d	file:
_SQLITE_OS_H_	sqlite3.c	8919;"	d	file:
_SQLITE_VDBE_H_	sqlite3.c	8148;"	d	file:
_VDBEINT_H_	sqlite3.c	12503;"	d	file:
_WAL_H_	sqlite3.c	36708;"	d	file:
_XOPEN_SOURCE	sqlite3.c	428;"	d	file:
__declspec	sqlite3.c	/^  __declspec(naked) __inline sqlite_uint64 __cdecl sqlite3Hwtime(void){$/;"	f
_catmap	CategoricalData.cpp	/^map<string, uint> HMM_PP::CategoricalData::_catmap;$/;"	m	class:HMM_PP::CategoricalData	file:
_catrmap	CategoricalData.cpp	/^map<uint, string> HMM_PP::CategoricalData::_catrmap;$/;"	m	class:HMM_PP::CategoricalData	file:
_fts3ht	sqlite3.c	/^  struct _fts3ht {        \/* the hash table *\/$/;"	s	struct:Fts3Hash	file:
_ht	sqlite3.c	/^  struct _ht {              \/* the hash table *\/$/;"	s	struct:Hash	file:
_internal_setDataFitResult	Model.cpp	/^void HMM_PP::Model::_internal_setDataFitResult(InferredDataFit* idf, const uint ind) {$/;"	f	class:HMM_PP::Model
a	sqlite3.c	/^  FuncDef *a[23];       \/* Hash table for functions *\/$/;"	m	struct:FuncDefHash	file:
a	sqlite3.c	/^  WhereLevel a[1];               \/* Information about each nest loop in WHERE *\/$/;"	m	struct:WhereInfo	file:
a	sqlite3.c	/^  WhereTerm *a;            \/* Each a[] describes a term of the WHERE cluase *\/$/;"	m	struct:WhereClause	file:
a	sqlite3.c	/^  } *a;                  \/* One entry for each expression *\/$/;"	m	struct:ExprList	typeref:struct:ExprList::ExprList_item	file:
a	sqlite3.c	/^  } *a;$/;"	m	struct:IdList	typeref:struct:IdList::IdList_item	file:
a	sqlite3.c	/^  } a[1];             \/* One entry for each identifier on the list *\/$/;"	m	struct:SrcList	typeref:struct:SrcList::SrcList_item	file:
a	sqlite3.c	/^struct TrigEvent { int a; IdList * b; };$/;"	m	struct:TrigEvent	file:
aAction	sqlite3.c	/^  u8 aAction[2];          \/* ON DELETE and ON UPDATE actions, respectively *\/$/;"	m	struct:FKey	file:
aAlias	sqlite3.c	/^  int *aAlias;         \/* Register used to hold aliased result *\/$/;"	m	struct:Parse	file:
aAll	sqlite3.c	/^  char *aAll;                    \/* Array containing doclist (or NULL) *\/$/;"	m	struct:Fts3Doclist	file:
aBitmap	sqlite3.c	/^    BITVEC_TELEM aBitmap[BITVEC_NELEM];    \/* Bitmap representation *\/$/;"	m	union:Bitvec::__anon16	file:
aBuffer	sqlite3.c	/^  char *aBuffer;                  \/* Buffer to merge doclists in *\/$/;"	m	struct:Fts3MultiSegReader	file:
aChar	sqlite3.c	/^  UChar *aChar;               \/* Copy of input using utf-16 encoding *\/$/;"	m	struct:IcuCursor	file:
aCksum	sqlite3.c	/^  u32 aCksum[2];                  \/* Checksum over all prior fields *\/$/;"	m	struct:WalIndexHdr	file:
aCol	sqlite3.c	/^  Column *aCol;        \/* Information about each column *\/$/;"	m	struct:Table	file:
aCol	sqlite3.c	/^  } *aCol;$/;"	m	struct:AggInfo	typeref:struct:AggInfo::AggInfo_col	file:
aCol	sqlite3.c	/^  } aCol[1];        \/* One entry for each of nCol column s *\/$/;"	m	struct:FKey	typeref:struct:FKey::sColMap	file:
aColCache	sqlite3.c	/^  } aColCache[SQLITE_N_COLCACHE];  \/* One for each column cache entry *\/$/;"	m	struct:Parse	typeref:struct:Parse::yColCache	file:
aColName	sqlite3.c	/^  Mem *aColName;          \/* Column names to return *\/$/;"	m	struct:Vdbe	file:
aColl	sqlite3.c	/^  CollSeq *aColl[1];  \/* Collating sequence for each term of the key *\/$/;"	m	struct:KeyInfo	file:
aCollSeq	sqlite3.c	/^  Hash aCollSeq;                \/* All collating sequences *\/$/;"	m	struct:sqlite3	file:
aColmask	sqlite3.c	/^  u32 aColmask[2];        \/* Masks of old.*, new.* columns accessed *\/$/;"	m	struct:TriggerPrg	file:
aConstraint	sqlite3.c	/^  RtreeConstraint *aConstraint;     \/* Search constraints. *\/$/;"	m	struct:RtreeCursor	file:
aConstraint	sqlite3.c	/^  } *aConstraint;            \/* Table of WHERE clause constraints *\/$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_constraint	file:
aConstraintUsage	sqlite3.c	/^  } *aConstraintUsage;$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_constraint_usage	file:
aCoord	sqlite3.c	/^  RtreeCoord aCoord[RTREE_MAX_DIMENSIONS*2];$/;"	m	struct:RtreeCell	file:
aCounter	sqlite3.c	/^  int aCounter[3];        \/* Counters used by sqlite3_stmt_status() *\/$/;"	m	struct:Vdbe	file:
aCtrl	sqlite3.c	/^  u8 *aCtrl;$/;"	m	struct:Mem5Global	file:
aData	sqlite3.c	/^  char *aData;                    \/* Node data *\/$/;"	m	struct:SegmentNode	file:
aData	sqlite3.c	/^  char *aData;                    \/* Pointer to block from malloc() *\/$/;"	m	struct:SegmentWriter	file:
aData	sqlite3.c	/^  char *aData;$/;"	m	struct:PendingList	file:
aData	sqlite3.c	/^  u8 *aData;           \/* Pointer to disk image of the page data *\/$/;"	m	struct:MemPage	file:
aDb	sqlite3.c	/^  Db *aDb;                      \/* All backends *\/$/;"	m	struct:sqlite3	file:
aDbStatic	sqlite3.c	/^  Db aDbStatic[2];              \/* Static space for the 2 default backends *\/$/;"	m	struct:sqlite3	file:
aDigits	sqlite3.c	/^static const char aDigits[] = "0123456789ABCDEF0123456789abcdef";$/;"	v	file:
aDoclist	sqlite3.c	/^  char *aDoclist;                 \/* List of docids for full-text queries *\/$/;"	m	struct:Fts3Cursor	file:
aDoclist	sqlite3.c	/^  char *aDoclist;                 \/* Pointer to doclist buffer *\/$/;"	m	struct:Fts3MultiSegReader	file:
aDoclist	sqlite3.c	/^  char *aDoclist;                 \/* Pointer to doclist of current entry *\/$/;"	m	struct:Fts3SegReader	file:
aEntry	sqlite3.c	/^  struct RowSetEntry aEntry[ROWSET_ENTRY_PER_CHUNK]; \/* Allocated entries *\/$/;"	m	struct:RowSetChunk	typeref:struct:RowSetChunk::RowSetEntry	file:
aExt	sqlite3.c	/^  void (**aExt)(void);   \/* Pointers to the extension init functions *\/$/;"	m	struct:sqlite3AutoExtList	file:
aExtension	sqlite3.c	/^  void **aExtension;            \/* Array of shared library handles *\/$/;"	m	struct:sqlite3	file:
aFrameCksum	sqlite3.c	/^  u32 aFrameCksum[2];             \/* Checksum of last frame in log *\/$/;"	m	struct:WalIndexHdr	file:
aFunc	sqlite3.c	/^  FuncDefHash aFunc;            \/* Hash table of connection functions *\/$/;"	m	struct:sqlite3	file:
aFunc	sqlite3.c	/^  } *aFunc;$/;"	m	struct:AggInfo	typeref:struct:AggInfo::AggInfo_func	file:
aHardLimit	sqlite3.c	/^static const int aHardLimit[] = {$/;"	v	file:
aHash	sqlite3.c	/^    u32 aHash[BITVEC_NINT];      \/* Hash table representation *\/$/;"	m	union:Bitvec::__anon16	file:
aHash	sqlite3.c	/^  RtreeNode *aHash[HASHSIZE]; \/* Hash table of in-memory nodes. *\/ $/;"	m	struct:Rtree	file:
aInLoop	sqlite3.c	/^      } *aInLoop;           \/* Information about each nested IN operator *\/$/;"	m	struct:WhereLevel::__anon7::__anon8	typeref:struct:WhereLevel::__anon7::__anon8::InLoop	file:
aIndex	sqlite3.c	/^    ht_slot *aIndex;              \/* i0, i1, i2... such that aPgno[iN] ascend *\/$/;"	m	struct:WalIterator::WalSegment	file:
aIndex	sqlite3.c	/^  } *aIndex;$/;"	m	struct:Fts3Table	typeref:struct:Fts3Table::Fts3Index	file:
aJournalMagic	sqlite3.c	/^static const unsigned char aJournalMagic[] = {$/;"	v	file:
aLabel	sqlite3.c	/^  int *aLabel;            \/* Space to hold the labels *\/$/;"	m	struct:Vdbe	file:
aLimit	sqlite3.c	/^  int aLimit[SQLITE_N_LIMIT];   \/* Limits *\/$/;"	m	struct:sqlite3	file:
aMI	sqlite3.c	/^  u32 *aMI;$/;"	m	struct:Fts3Expr	file:
aMatchinfo	sqlite3.c	/^  u32 *aMatchinfo;                \/* Information about most recent match *\/$/;"	m	struct:Fts3Cursor	file:
aMatchinfo	sqlite3.c	/^  u32 *aMatchinfo;                \/* Pre-allocated buffer *\/$/;"	m	struct:MatchInfo	file:
aMem	sqlite3.c	/^  Mem *aMem;              \/* Array of memory cells for parent frame *\/$/;"	m	struct:VdbeFrame	file:
aMem	sqlite3.c	/^  Mem *aMem;              \/* The memory locations *\/$/;"	m	struct:Vdbe	file:
aMem	sqlite3.c	/^  Mem *aMem;          \/* Values *\/$/;"	m	struct:UnpackedRecord	file:
aModule	sqlite3.c	/^  Hash aModule;                 \/* populated by sqlite3_create_module() *\/$/;"	m	struct:sqlite3	file:
aNode	sqlite3.c	/^  char *aNode;                    \/* Pointer to node data (or NULL) *\/$/;"	m	struct:Fts3SegReader	file:
aOffset	sqlite3.c	/^  int *aOffset;               \/* Offsets of each character in utf-8 input *\/$/;"	m	struct:IcuCursor	file:
aOffset	sqlite3.c	/^  u32 *aOffset;         \/* Cached offsets to the start of each columns data *\/$/;"	m	struct:VdbeCursor	file:
aOp	sqlite3.c	/^  Op *aOp;                \/* Program instructions for parent frame *\/$/;"	m	struct:VdbeFrame	file:
aOp	sqlite3.c	/^  Op *aOp;                \/* Space to hold the virtual machine's program *\/$/;"	m	struct:Vdbe	file:
aOp	sqlite3.c	/^  VdbeOp *aOp;                  \/* Array of opcodes for sub-program *\/$/;"	m	struct:SubProgram	file:
aOrderBy	sqlite3.c	/^  } *aOrderBy;               \/* The ORDER BY clause *\/$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_orderby	file:
aOverflow	sqlite3.c	/^  Pgno *aOverflow;          \/* Cache of overflow page locations *\/$/;"	m	struct:BtCursor	file:
aOvfl	sqlite3.c	/^  } aOvfl[5];$/;"	m	struct:MemPage	typeref:struct:MemPage::_OvflCell	file:
aPadding	sqlite3.c	/^  char aPadding[32];$/;"	m	struct:unixFile	file:
aParam	sqlite3.c	/^  double *aParam;                 \/* Parameters passed to SQL geom function *\/$/;"	m	struct:sqlite3_rtree_geometry	file:
aParam	sqlite3.c	/^  double aParam[1];$/;"	m	struct:RtreeMatchArg	file:
aPgno	sqlite3.c	/^    u32 *aPgno;                   \/* Array of page numbers. *\/$/;"	m	struct:WalIterator::WalSegment	file:
aPhrase	sqlite3.c	/^  SnippetPhrase *aPhrase;         \/* Array of size nPhrase *\/$/;"	m	struct:SnippetIter	file:
aPool	sqlite3.c	/^  Mem3Block *aPool;$/;"	m	struct:Mem3Global	file:
aPrefix	sqlite3.c	/^static const char aPrefix[] = "-x0\\000X0";$/;"	v	file:
aReadMark	sqlite3.c	/^  u32 aReadMark[WAL_NREADER];     \/* Reader marks *\/$/;"	m	struct:WalCkptInfo	file:
aRegion	sqlite3.c	/^  } *aRegion;$/;"	m	struct:winShmNode	typeref:struct:winShmNode::ShmRegion	file:
aRow	sqlite3.c	/^  u8 *aRow;             \/* Data for the current row, if all on one page *\/$/;"	m	struct:VdbeCursor	file:
aSalt	sqlite3.c	/^  u32 aSalt[2];                   \/* Two salt values copied from WAL header *\/$/;"	m	struct:WalIndexHdr	file:
aSample	sqlite3.c	/^  IndexSample *aSample;    \/* Array of SQLITE_INDEX_SAMPLES samples *\/$/;"	m	struct:Index	file:
aSavepoint	sqlite3.c	/^  PagerSavepoint *aSavepoint; \/* Array of active savepoints *\/$/;"	m	struct:Pager	file:
aSegment	sqlite3.c	/^  } aSegment[1];                  \/* One for every 32KB page in the wal-index *\/$/;"	m	struct:WalIterator	typeref:struct:WalIterator::WalSegment	file:
aSemName	sqlite3.c	/^  char aSemName[MAX_PATHNAME+2];  \/* Name of that semaphore *\/$/;"	m	struct:unixInodeInfo	file:
aSortOrder	sqlite3.c	/^  u8 *aSortOrder;     \/* Sort order for each column.  May be NULL *\/$/;"	m	struct:KeyInfo	file:
aSortOrder	sqlite3.c	/^  u8 *aSortOrder;  \/* Array of size Index.nColumn. True==DESC, False==ASC *\/$/;"	m	struct:Index	file:
aStat	sqlite3.c	/^  } *aStat;$/;"	m	struct:Fts3auxCursor	typeref:struct:Fts3auxCursor::Fts3auxColstats	file:
aStatic	sqlite3.c	/^  WhereTerm aStatic[1];    \/* Initial static space for a[] *\/$/;"	m	struct:WhereClause	file:
aStatic	sqlite3.c	/^  WhereTerm aStatic[8];    \/* Initial static space for a[] *\/$/;"	m	struct:WhereClause	file:
aStmt	sqlite3.c	/^  sqlite3_stmt *aStmt[27];$/;"	m	struct:Fts3Table	file:
aSyscall	sqlite3.c	/^} aSyscall[] = {$/;"	v	typeref:struct:unix_syscall	file:
aTableLock	sqlite3.c	/^  TableLock *aTableLock; \/* Required table locks for shared-cache mode *\/$/;"	m	struct:Parse	file:
aTempReg	sqlite3.c	/^  int aTempReg[8];     \/* Holding area for temporary registers *\/$/;"	m	struct:Parse	file:
aTerm	sqlite3.c	/^  TermOffset *aTerm;$/;"	m	struct:TermOffsetCtx	file:
aToken	sqlite3.c	/^  Fts3PhraseToken aToken[1]; \/* One entry for each token in the phrase *\/$/;"	m	struct:Fts3Phrase	file:
aType	sqlite3.c	/^  u32 *aType;           \/* Type values for all entries in the record *\/$/;"	m	struct:VdbeCursor	file:
aVTrans	sqlite3.c	/^  VTable **aVTrans;             \/* Virtual tables with open transactions *\/$/;"	m	struct:sqlite3	file:
aVar	sqlite3.c	/^  Mem *aVar;              \/* Values for the OP_Variable opcode. *\/$/;"	m	struct:Vdbe	file:
aWalData	sqlite3.c	/^  u32 aWalData[WAL_SAVEPOINT_NDATA];        \/* WAL savepoint context *\/$/;"	m	struct:PagerSavepoint	file:
aaOutput	sqlite3.c	/^  char *aaOutput[16];             \/* Malloc'd output buffer *\/$/;"	m	struct:TermSelect	file:
absFunc	sqlite3.c	/^static void absFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
accessPayload	sqlite3.c	/^static int accessPayload($/;"	f	file:
actionName	sqlite3.c	/^static const char *actionName(u8 action){$/;"	f	file:
activeVdbeCnt	sqlite3.c	/^  int activeVdbeCnt;            \/* Number of VDBEs currently executing *\/$/;"	m	struct:sqlite3	file:
addAggInfoColumn	sqlite3.c	/^static int addAggInfoColumn(sqlite3 *db, AggInfo *pInfo){$/;"	f	file:
addAggInfoFunc	sqlite3.c	/^static int addAggInfoFunc(sqlite3 *db, AggInfo *pInfo){$/;"	f	file:
addArgumentToVtab	sqlite3.c	/^static void addArgumentToVtab(Parse *pParse){$/;"	f	file:
addCalcTime	InferredDataFit.cpp	/^void HMM_PP::InferredDataFit::addCalcTime(const string calc, const uint timeInSec) const {$/;"	f	class:HMM_PP::InferredDataFit
addColOffset	sqlite3.c	/^  int addColOffset;    \/* Offset in CREATE TABLE stmt to add a new column *\/$/;"	m	struct:Table	file:
addData	ModelFromStream.cpp	/^uint HMM_PP::ModelFromStream::addData(HMM_PP::Data* d) {$/;"	f	class:HMM_PP::ModelFromStream
addData	ModelWithDB.cpp	/^uint HMM_PP::ModelWithDB::addData(Data* d) {$/;"	f	class:HMM_PP::ModelWithDB
addDatapoint	MultivariateCategoricalData.cpp	/^void HMM_PP::MultivariateCategoricalData::addDatapoint(const vector<string>& t) {$/;"	f	class:HMM_PP::MultivariateCategoricalData
addDatapoint	MultivariateCategoricalData.cpp	/^void HMM_PP::MultivariateCategoricalData::addDatapoint(const vector<uint>& t) {$/;"	f	class:HMM_PP::MultivariateCategoricalData
addDatapoint	MultivariateQuantitativeData.cpp	/^void HMM_PP::MultivariateQuantitativeData::addDatapoint(const vector<double>& t) {$/;"	f	class:HMM_PP::MultivariateQuantitativeData
addDatapoint	UnivariateCategoricalData.cpp	/^void HMM_PP::UnivariateCategoricalData::addDatapoint(const string& t) {$/;"	f	class:HMM_PP::UnivariateCategoricalData
addDatapointFromDB	UnivariateCategoricalData.cpp	/^void HMM_PP::UnivariateCategoricalData::addDatapointFromDB(SQL& db, sqlite3_stmt* stmt, const uint queryPos) {$/;"	f	class:HMM_PP::UnivariateCategoricalData
addDatapointFromDB	UnivariateQuantitativeData.cpp	/^void HMM_PP::UnivariateQuantitativeData::addDatapointFromDB(SQL& db, sqlite3_stmt* stmt, const uint queryPos) {$/;"	f	class:HMM_PP::UnivariateQuantitativeData
addIndex	ModelWithDB.cpp	/^void HMM_PP::ModelWithDB::addIndex() {$/;"	f	class:HMM_PP::ModelWithDB
addModuleArgument	sqlite3.c	/^static void addModuleArgument(sqlite3 *db, Table *pTable, char *zArg){$/;"	f	file:
addState	ModelParams.cpp	/^void HMM_PP::ModelParams::HiddenStateParams::addState(const string& label) {$/;"	f	class:HMM_PP::ModelParams::HiddenStateParams
addToBlockedList	sqlite3.c	/^static void addToBlockedList(sqlite3 *db){$/;"	f	file:
addToSavepointBitvecs	sqlite3.c	/^static int addToSavepointBitvecs(Pager *pPager, Pgno pgno){$/;"	f	file:
addToVTrans	sqlite3.c	/^static void addToVTrans(sqlite3 *db, VTable *pVTab){$/;"	f	file:
addWhereTerm	sqlite3.c	/^static void addWhereTerm($/;"	f	file:
addrBrk	sqlite3.c	/^  int addrBrk;          \/* Jump here to break out of the loop *\/$/;"	m	struct:WhereLevel	file:
addrCont	sqlite3.c	/^  int addrCont;         \/* Jump here to continue with the next loop cycle *\/$/;"	m	struct:WhereLevel	file:
addrFirst	sqlite3.c	/^  int addrFirst;        \/* First instruction of interior of the loop *\/$/;"	m	struct:WhereLevel	file:
addrInTop	sqlite3.c	/^        int addrInTop;         \/* Top of the IN loop *\/$/;"	m	struct:WhereLevel::__anon7::__anon8::InLoop	file:
addrNxt	sqlite3.c	/^  int addrNxt;          \/* Jump here to start the next IN combination *\/$/;"	m	struct:WhereLevel	file:
addrOpenEphm	sqlite3.c	/^  int addrOpenEphm[3];   \/* OP_OpenEphem opcodes related to this select *\/$/;"	m	struct:Select	file:
adjustStats	sqlite3.c	/^static void adjustStats(int iSize, int increment){$/;"	f	file:
advanceToNonBlankLine	utils.cpp	/^void HMM_PP::istreamLineReader::advanceToNonBlankLine() {$/;"	f	class:HMM_PP::istreamLineReader
affinity	sqlite3.c	/^  char affinity;         \/* MakeRecord with this affinity for SRT_Set *\/$/;"	m	struct:Select	file:
affinity	sqlite3.c	/^  char affinity;         \/* The affinity of the column or 0 if not a column *\/$/;"	m	struct:Expr	file:
affinity	sqlite3.c	/^  char affinity;   \/* One of the SQLITE_AFF_... values *\/$/;"	m	struct:Column	file:
affinity	sqlite3.c	/^  u8 affinity;      \/* Affinity used when eDest==SRT_Set *\/$/;"	m	struct:SelectDest	file:
afpCheckReservedLock	sqlite3.c	/^static int afpCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:
afpClose	sqlite3.c	/^static int afpClose(sqlite3_file *id) {$/;"	f	file:
afpLock	sqlite3.c	/^static int afpLock(sqlite3_file *id, int eFileLock){$/;"	f	file:
afpLockingContext	sqlite3.c	/^struct afpLockingContext {$/;"	s	file:
afpLockingContext	sqlite3.c	/^typedef struct afpLockingContext afpLockingContext;$/;"	t	typeref:struct:afpLockingContext	file:
afpSetLock	sqlite3.c	/^static int afpSetLock($/;"	f	file:
afpUnlock	sqlite3.c	/^static int afpUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
afpfsByteRangeLock2FSCTL	sqlite3.c	26924;"	d	file:
aggregate_context	sqlite3.c	/^  void * (*aggregate_context)(sqlite3_context*,int nBytes);$/;"	m	struct:sqlite3_api_routines	file:
aggregate_count	sqlite3.c	/^  int  (*aggregate_count)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
ai	sqlite3.c	/^    int *ai;               \/* Used when p4type is P4_INTARRAY *\/$/;"	m	union:VdbeOp::__anon1	file:
aiColumn	sqlite3.c	/^  int *aiColumn;   \/* Which columns are used by this index.  1st is 0 *\/$/;"	m	struct:Index	file:
aiFreelist	sqlite3.c	/^  int aiFreelist[LOGMAX+1];$/;"	m	struct:Mem5Global	file:
aiHash	sqlite3.c	/^  u32 aiHash[N_HASH];        \/* For sizes MX_SMALL+1 and larger *\/$/;"	m	struct:Mem3Global	file:
aiIdx	sqlite3.c	/^  u16 aiIdx[BTCURSOR_MAX_DEPTH];        \/* Current index in apPage[i] *\/$/;"	m	struct:BtCursor	file:
aiRowEst	sqlite3.c	/^  unsigned *aiRowEst; \/* Result of ANALYZE: Est. rows selected by each column *\/$/;"	m	struct:Index	file:
aiSmall	sqlite3.c	/^  u32 aiSmall[MX_SMALL-1];   \/* For sizes 2 through MX_SMALL, inclusive *\/$/;"	m	struct:Mem3Global	file:
alarmArg	sqlite3.c	/^  void *alarmArg;$/;"	m	struct:Mem0Global	file:
alarmBusy	sqlite3.c	/^  int alarmBusy;$/;"	m	struct:Mem3Global	file:
alarmCallback	sqlite3.c	/^  void (*alarmCallback)(void*, sqlite3_int64,int);$/;"	m	struct:Mem0Global	file:
alarmThreshold	sqlite3.c	/^  sqlite3_int64 alarmThreshold;$/;"	m	struct:Mem0Global	file:
allSpaces	sqlite3.c	/^static int allSpaces(const char *z, int n){$/;"	f	file:
allocSpace	sqlite3.c	/^static void *allocSpace($/;"	f	file:
allocateBtreePage	sqlite3.c	/^static int allocateBtreePage($/;"	f	file:
allocateCursor	sqlite3.c	/^static VdbeCursor *allocateCursor($/;"	f	file:
allocateIndexInfo	sqlite3.c	/^static sqlite3_index_info *allocateIndexInfo($/;"	f	file:
allocateSpace	sqlite3.c	/^static int allocateSpace(MemPage *pPage, int nByte, int *pIdx){$/;"	f	file:
allocateTempSpace	sqlite3.c	/^static void allocateTempSpace(BtShared *pBt){$/;"	f	file:
allocateVector	MatrixDecomp.cpp	/^HMM_PP::LAPACKvector<double>* HMM_PP::MatrixDecomp::allocateVector(ullint size, const string workDir) {$/;"	f	class:HMM_PP::MatrixDecomp
allowAgg	sqlite3.c	/^  u8 allowAgg;         \/* Aggregate functions allowed here *\/$/;"	m	struct:NameContext	file:
allowedOp	sqlite3.c	/^static int allowedOp(int op){$/;"	f	file:
amotry	Simplex.cpp	/^double HMM_PP::Simplex::amotry(const uint ihi, const double fac) {$/;"	f	class:HMM_PP::Simplex
anOutput	sqlite3.c	/^  int anOutput[16];               \/* Size of output in bytes *\/$/;"	m	struct:TermSelect	file:
anRef	sqlite3.c	/^  int *anRef;       \/* Number of times each page is referenced *\/$/;"	m	struct:IntegrityCk	file:
anStat	sqlite3.c	/^  int anStat[3];          \/* 0: hits.  1: size misses.  2: full misses *\/$/;"	m	struct:Lookaside	file:
analysisInfo	sqlite3.c	/^struct analysisInfo {$/;"	s	file:
analysisInfo	sqlite3.c	/^typedef struct analysisInfo analysisInfo;$/;"	t	typeref:struct:analysisInfo	file:
analysisLoader	sqlite3.c	/^static int analysisLoader(void *pData, int argc, char **argv, char **NotUsed){$/;"	f	file:
analyzeAggregate	sqlite3.c	/^static int analyzeAggregate(Walker *pWalker, Expr *pExpr){$/;"	f	file:
analyzeAggregatesInSelect	sqlite3.c	/^static int analyzeAggregatesInSelect(Walker *pWalker, Select *pSelect){$/;"	f	file:
analyzeDatabase	sqlite3.c	/^static void analyzeDatabase(Parse *pParse, int iDb){$/;"	f	file:
analyzeOneTable	sqlite3.c	/^static void analyzeOneTable($/;"	f	file:
analyzeTable	sqlite3.c	/^static void analyzeTable(Parse *pParse, Table *pTab, Index *pOnlyIdx){$/;"	f	file:
apArg	sqlite3.c	/^  Mem **apArg;            \/* Arguments to currently executing user function *\/$/;"	m	struct:Vdbe	file:
apAux	sqlite3.c	/^  } apAux[1];                   \/* One slot for each function argument *\/$/;"	m	struct:VdbeFunc	typeref:struct:VdbeFunc::AuxData	file:
apCsr	sqlite3.c	/^  VdbeCursor **apCsr;     \/* Array of Vdbe cursors for parent frame *\/$/;"	m	struct:VdbeFrame	file:
apCsr	sqlite3.c	/^  VdbeCursor **apCsr;     \/* One element of this array for each open cursor *\/$/;"	m	struct:Vdbe	file:
apHash	sqlite3.c	/^  PgHdr1 **apHash;                    \/* Hash table for fast lookup by key *\/$/;"	m	struct:PCache1	file:
apPage	sqlite3.c	/^  MemPage *apPage[BTCURSOR_MAX_DEPTH];  \/* Pages from root to current page *\/$/;"	m	struct:BtCursor	file:
apRegion	sqlite3.c	/^  char **apRegion;           \/* Array of mapped shared-memory regions *\/$/;"	m	struct:unixShmNode	file:
apRegion	sqlite3.c	/^  void **apRegion;           \/* Array of pointers to shared-memory regions *\/$/;"	m	struct:os2ShmNode	file:
apSegment	sqlite3.c	/^  Fts3SegReader **apSegment;      \/* Array of Fts3SegReader objects *\/$/;"	m	struct:Fts3MultiSegReader	file:
apSub	sqlite3.c	/^    Bitvec *apSub[BITVEC_NPTR];  \/* Recursive representation *\/$/;"	m	union:Bitvec::__anon16	file:
apSub	sqlite3.c	/^  SubProgram **apSub;        \/* Array of subprograms *\/$/;"	m	struct:VdbeOpIter	file:
apTrigger	sqlite3.c	/^  Trigger *apTrigger[2];  \/* Triggers for aAction[] actions *\/$/;"	m	struct:FKey	file:
apVtabLock	sqlite3.c	/^  Table **apVtabLock;        \/* Pointer to virtual tables needing locking *\/$/;"	m	struct:Parse	file:
apWiData	sqlite3.c	/^  volatile u32 **apWiData;   \/* Pointer to wal-index content in memory *\/$/;"	m	struct:Wal	file:
appendSpace	sqlite3.c	/^static void appendSpace(StrAccum *pAccum, int N){$/;"	f	file:
applyAffinity	sqlite3.c	/^static void applyAffinity($/;"	f	file:
applyNumericAffinity	sqlite3.c	/^static void applyNumericAffinity(Mem *pRec){$/;"	f	file:
approx	sqlite3.c	/^  u8 approx;        \/* True if non-integer value was input to the sum *\/$/;"	m	struct:SumCtx	file:
argvIndex	sqlite3.c	/^    int argvIndex;           \/* if >0, constraint is part of argv to xFilter *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint_usage	file:
assemblePage	sqlite3.c	/^static void assemblePage($/;"	f	file:
assertCellInfo	sqlite3.c	/^  static void assertCellInfo(BtCursor *pCur){$/;"	f	file:
assertCellInfo	sqlite3.c	51124;"	d	file:
assertMutexHeld	sqlite3.c	110893;"	d	file:
assertParentIndex	sqlite3.c	/^static void assertParentIndex(MemPage *pParent, int iIdx, Pgno iChild){$/;"	f	file:
assertParentIndex	sqlite3.c	51664;"	d	file:
assertTruncateConstraint	sqlite3.c	/^static void assertTruncateConstraint(Pager *pPager){$/;"	f	file:
assertTruncateConstraint	sqlite3.c	40474;"	d	file:
assertTruncateConstraintCb	sqlite3.c	/^static void assertTruncateConstraintCb(PgHdr *pPg){$/;"	f	file:
assert_pager_state	sqlite3.c	/^static int assert_pager_state(Pager *p){$/;"	f	file:
atFirst	sqlite3.c	/^  Bool atFirst;         \/* True if pointing to first entry *\/$/;"	m	struct:VdbeCursor	file:
atLast	sqlite3.c	/^  u8 atLast;                \/* Cursor pointing to the last entry *\/$/;"	m	struct:BtCursor	file:
attachBackupObject	sqlite3.c	/^static void attachBackupObject(sqlite3_backup *p){$/;"	f	file:
attachData	ModelWithDB.cpp	/^void HMM_PP::ModelWithDB::attachData() {$/;"	f	class:HMM_PP::ModelWithDB
attachFunc	sqlite3.c	/^static void attachFunc($/;"	f	file:
autoCommit	sqlite3.c	/^  u8 autoCommit;                \/* The auto-commit flag. *\/$/;"	m	struct:sqlite3	file:
autoIncBegin	sqlite3.c	/^static int autoIncBegin($/;"	f	file:
autoIncBegin	sqlite3.c	85329;"	d	file:
autoIncStep	sqlite3.c	/^static void autoIncStep(Parse *pParse, int memId, int regRowid){$/;"	f	file:
autoIncStep	sqlite3.c	85330;"	d	file:
autoIndex	sqlite3.c	/^  u8 autoIndex;    \/* True if is automatically created (ex: by UNIQUE) *\/$/;"	m	struct:Index	file:
autoVacuum	sqlite3.c	/^  u8 autoVacuum;        \/* True if auto-vacuum is enabled *\/$/;"	m	struct:BtShared	file:
autoVacuumCommit	sqlite3.c	/^static int autoVacuumCommit(BtShared *pBt){$/;"	f	file:
autolockIoFinder	sqlite3.c	/^  *(*const autolockIoFinder)(const char*,unixFile*) = autolockIoFinderImpl;$/;"	v	file:
autolockIoFinderImpl	sqlite3.c	/^static const sqlite3_io_methods *autolockIoFinderImpl($/;"	f	file:
avgFinalize	sqlite3.c	/^static void avgFinalize(sqlite3_context *context){$/;"	f	file:
azCol	sqlite3.c	/^  const char **azCol;                 \/* Array of column names for fts3 table *\/$/;"	m	struct:ParseContext	file:
azColl	sqlite3.c	/^  char **azColl;   \/* Array of collation sequence names for index *\/$/;"	m	struct:Index	file:
azColumn	sqlite3.c	/^  char **azColumn;                \/* column names.  malloced *\/$/;"	m	struct:Fts3Table	file:
azCompileOpt	sqlite3.c	/^static const char * const azCompileOpt[] = {$/;"	v	file:
azFileLock	sqlite3.c	/^static const char *azFileLock(int eFileLock){$/;"	f	file:
azModuleArg	sqlite3.c	/^  char **azModuleArg;  \/* Text of all module args. [0] is module name *\/$/;"	m	struct:Table	file:
azResult	sqlite3.c	/^  char **azResult;   \/* Accumulated output *\/$/;"	m	struct:TabResult	file:
azVar	sqlite3.c	/^  char **azVar;           \/* Name of variables *\/$/;"	m	struct:Vdbe	file:
azVar	sqlite3.c	/^  char **azVar;        \/* Pointers to names of parameters *\/$/;"	m	struct:Parse	file:
b	sqlite3.c	/^struct TrigEvent { int a; IdList * b; };$/;"	m	struct:TrigEvent	file:
bConstraint	sqlite3.c	/^  u8 bConstraint;           \/* True if constraints are supported *\/$/;"	m	struct:VTable	file:
bCoreMutex	sqlite3.c	/^  int bCoreMutex;                   \/* True to enable core mutexing *\/$/;"	m	struct:Sqlite3Config	file:
bDeferred	sqlite3.c	/^  u8 bDeferred;              \/* True if this expression is entirely deferred *\/$/;"	m	struct:Fts3Expr	file:
bDesc	sqlite3.c	/^  u8 bDesc;                       \/* True to sort in descending order *\/$/;"	m	struct:Fts3Cursor	file:
bDescIdx	sqlite3.c	/^  u8 bDescIdx;                    \/* True if doclists are in reverse order *\/$/;"	m	struct:Fts3Table	file:
bDestLocked	sqlite3.c	/^  int bDestLocked;         \/* True once a write-transaction is open on pDest *\/$/;"	m	struct:sqlite3_backup	file:
bEnabled	sqlite3.c	/^  u8 bEnabled;            \/* False to disable new lookaside allocations *\/$/;"	m	struct:Lookaside	file:
bEof	sqlite3.c	/^  u8 bEof;                   \/* True this expression is at EOF already *\/$/;"	m	struct:Fts3Expr	file:
bExclusive	sqlite3.c	/^  BOOL bExclusive;    \/* Indicates an exclusive lock has been obtained *\/$/;"	m	struct:winceLock	file:
bFreeList	sqlite3.c	/^  int bFreeList;                 \/* True if pList should be sqlite3_free()d *\/$/;"	m	struct:Fts3Doclist	file:
bFullMutex	sqlite3.c	/^  int bFullMutex;                   \/* True to enable full mutexing *\/$/;"	m	struct:Sqlite3Config	file:
bHasDocsize	sqlite3.c	/^  u8 bHasDocsize;                 \/* True if %_docsize table exists *\/$/;"	m	struct:Fts3Table	file:
bHasStat	sqlite3.c	/^  u8 bHasStat;                    \/* True if %_stat table exists *\/$/;"	m	struct:Fts3Table	file:
bIncr	sqlite3.c	/^  int bIncr;                 \/* True if doclist is loaded incrementally *\/$/;"	m	struct:Fts3Phrase	file:
bLocaltimeFault	sqlite3.c	/^  int bLocaltimeFault;              \/* True to fail localtime() calls *\/$/;"	m	struct:Sqlite3Config	file:
bLookup	sqlite3.c	/^  int bLookup;                    \/* True if a lookup of a single entry. *\/$/;"	m	struct:Fts3MultiSegReader	file:
bMalloced	sqlite3.c	/^  u8 bMalloced;           \/* True if pStart obtained from sqlite3_malloc() *\/$/;"	m	struct:Lookaside	file:
bMemstat	sqlite3.c	/^  int bMemstat;                     \/* True to enable memory status *\/$/;"	m	struct:Sqlite3Config	file:
bOpenUri	sqlite3.c	/^  int bOpenUri;                     \/* True to interpret filenames as URIs *\/$/;"	m	struct:Sqlite3Config	file:
bPending	sqlite3.c	/^  BOOL bPending;      \/* Indicates a pending lock has been obtained *\/$/;"	m	struct:winceLock	file:
bProcessLock	sqlite3.c	/^  unsigned char bProcessLock;     \/* An exclusive process lock is held *\/$/;"	m	struct:unixInodeInfo	file:
bPurgeable	sqlite3.c	/^  int bPurgeable;                     \/* True if cache is purgeable *\/$/;"	m	struct:PCache1	file:
bPurgeable	sqlite3.c	/^  int bPurgeable;                     \/* True if pages are on backing store *\/$/;"	m	struct:PCache	file:
bReserved	sqlite3.c	/^  BOOL bReserved;     \/* Indicates a reserved lock has been obtained *\/$/;"	m	struct:winceLock	file:
bRestart	sqlite3.c	/^  int bRestart;$/;"	m	struct:Fts3MultiSegReader	file:
bStart	sqlite3.c	/^  u8 bStart;                 \/* True if iDocid is valid *\/$/;"	m	struct:Fts3Expr	file:
bUnderPressure	sqlite3.c	/^  int bUnderPressure;            \/* True if low on PAGECACHE memory *\/$/;"	m	struct:PCacheGlobal	file:
bUnordered	sqlite3.c	/^  u8 bUnordered;   \/* Use this index for == or IN queries only *\/$/;"	m	struct:Index	file:
backtrace	sqlite3.c	14916;"	d	file:
backtrace_symbols_fd	sqlite3.c	14917;"	d	file:
backupOnePage	sqlite3.c	/^static int backupOnePage(sqlite3_backup *p, Pgno iSrcPg, const u8 *zSrcData){$/;"	f	file:
backupTruncateFile	sqlite3.c	/^static int backupTruncateFile(sqlite3_file *pFile, i64 iSize){$/;"	f	file:
backup_finish	sqlite3.c	/^  int (*backup_finish)(sqlite3_backup*);$/;"	m	struct:sqlite3_api_routines	file:
backup_init	sqlite3.c	/^  sqlite3_backup *(*backup_init)(sqlite3*,const char*,sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
backup_pagecount	sqlite3.c	/^  int (*backup_pagecount)(sqlite3_backup*);$/;"	m	struct:sqlite3_api_routines	file:
backup_remaining	sqlite3.c	/^  int (*backup_remaining)(sqlite3_backup*);$/;"	m	struct:sqlite3_api_routines	file:
backup_step	sqlite3.c	/^  int (*backup_step)(sqlite3_backup*,int);$/;"	m	struct:sqlite3_api_routines	file:
balance	sqlite3.c	/^static int balance(BtCursor *pCur){$/;"	f	file:
balance_deeper	sqlite3.c	/^static int balance_deeper(MemPage *pRoot, MemPage **ppChild){$/;"	f	file:
balance_nonroot	sqlite3.c	/^static int balance_nonroot($/;"	f	file:
balance_quick	sqlite3.c	/^static int balance_quick(MemPage *pParent, MemPage *pPage, u8 *pSpace){$/;"	f	file:
base	sqlite3.c	/^  etByte base;             \/* The base for radix conversion *\/$/;"	m	struct:et_info	file:
base	sqlite3.c	/^  sqlite3_tokenizer base;      \/* Base class *\/$/;"	m	struct:porter_tokenizer	file:
base	sqlite3.c	/^  sqlite3_tokenizer base;$/;"	m	struct:IcuTokenizer	file:
base	sqlite3.c	/^  sqlite3_tokenizer base;$/;"	m	struct:simple_tokenizer	file:
base	sqlite3.c	/^  sqlite3_tokenizer_cursor base;$/;"	m	struct:IcuCursor	file:
base	sqlite3.c	/^  sqlite3_tokenizer_cursor base;$/;"	m	struct:porter_tokenizer_cursor	file:
base	sqlite3.c	/^  sqlite3_tokenizer_cursor base;$/;"	m	struct:simple_tokenizer_cursor	file:
base	sqlite3.c	/^  sqlite3_vtab base;              \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3Table	file:
base	sqlite3.c	/^  sqlite3_vtab base;              \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3auxTable	file:
base	sqlite3.c	/^  sqlite3_vtab base;$/;"	m	struct:Rtree	file:
base	sqlite3.c	/^  sqlite3_vtab_cursor base;       \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3Cursor	file:
base	sqlite3.c	/^  sqlite3_vtab_cursor base;       \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3auxCursor	file:
base	sqlite3.c	/^  sqlite3_vtab_cursor base;$/;"	m	struct:RtreeCursor	file:
baumWelch	Model.cpp	/^void HMM_PP::Model::baumWelch() {$/;"	f	class:HMM_PP::Model
begin	sqlwrap.cpp	/^void SQL::begin() {$/;"	f	class:SQL
beginsWith	utils.cpp	/^bool HMM_PP::beginsWith(string str, string prefix) {$/;"	f	class:HMM_PP
bestAutomaticIndex	sqlite3.c	/^static void bestAutomaticIndex($/;"	f	file:
bestAutomaticIndex	sqlite3.c	100116;"	d	file:
bestBtreeIndex	sqlite3.c	/^static void bestBtreeIndex($/;"	f	file:
bestIndex	sqlite3.c	/^static void bestIndex($/;"	f	file:
bestOrClauseIndex	sqlite3.c	/^static void bestOrClauseIndex($/;"	f	file:
bestVirtualIndex	sqlite3.c	/^static void bestVirtualIndex($/;"	f	file:
bigEndCksum	sqlite3.c	/^  u8 bigEndCksum;                 \/* True if checksums in WAL are big-endian *\/$/;"	m	struct:WalIndexHdr	file:
binCollFunc	sqlite3.c	/^static int binCollFunc($/;"	f	file:
binaryCompareP5	sqlite3.c	/^static u8 binaryCompareP5(Expr *pExpr1, Expr *pExpr2, int jumpIfNull){$/;"	f	file:
binaryToUnaryIfNull	sqlite3.c	/^  static void binaryToUnaryIfNull(Parse *pParse, Expr *pY, Expr *pA, int op){$/;"	f	file:
bindDatapointToDB	UnivariateCategoricalData.cpp	/^void HMM_PP::UnivariateCategoricalData::bindDatapointToDB(SQL& db, sqlite3_stmt* stmt, const string& data, const uint t) {$/;"	f	class:HMM_PP::UnivariateCategoricalData
bindDatapointToDB	UnivariateQuantitativeData.cpp	/^void HMM_PP::UnivariateQuantitativeData::bindDatapointToDB(SQL& db, sqlite3_stmt* stmt, const string& data, const uint t) {$/;"	f	class:HMM_PP::UnivariateQuantitativeData
bindText	sqlite3.c	/^static int bindText($/;"	f	file:
bind_blob	sqlite3.c	/^  int  (*bind_blob)(sqlite3_stmt*,int,const void*,int n,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
bind_blob	sqlwrap.cpp	/^void SQL::bind_blob(sqlite3_stmt* stmt, const string& index, blob& value) {$/;"	f	class:SQL
bind_double	sqlite3.c	/^  int  (*bind_double)(sqlite3_stmt*,int,double);$/;"	m	struct:sqlite3_api_routines	file:
bind_double	sqlwrap.cpp	/^void SQL::bind_double(sqlite3_stmt* stmt, const string& index, double value) {$/;"	f	class:SQL
bind_int	sqlite3.c	/^  int  (*bind_int)(sqlite3_stmt*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
bind_int	sqlwrap.cpp	/^void SQL::bind_int(sqlite3_stmt* stmt, const string& index, int value) {$/;"	f	class:SQL
bind_int64	sqlite3.c	/^  int  (*bind_int64)(sqlite3_stmt*,int,sqlite_int64);$/;"	m	struct:sqlite3_api_routines	file:
bind_int64	sqlwrap.cpp	/^void SQL::bind_int64(sqlite3_stmt* stmt, const string& index, sqlite_int64 value) {$/;"	f	class:SQL
bind_null	sqlite3.c	/^  int  (*bind_null)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
bind_null	sqlwrap.cpp	/^void SQL::bind_null(sqlite3_stmt* stmt, const string& index ) {$/;"	f	class:SQL
bind_parameter_count	sqlite3.c	/^  int  (*bind_parameter_count)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
bind_parameter_index	sqlite3.c	/^  int  (*bind_parameter_index)(sqlite3_stmt*,const char*zName);$/;"	m	struct:sqlite3_api_routines	file:
bind_parameter_name	sqlite3.c	/^  const char * (*bind_parameter_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
bind_text	sqlite3.c	/^  int  (*bind_text)(sqlite3_stmt*,int,const char*,int n,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
bind_text	sqlwrap.cpp	/^void SQL::bind_text(sqlite3_stmt* stmt, const string& index, const string& value) {$/;"	f	class:SQL
bind_text16	sqlite3.c	/^  int  (*bind_text16)(sqlite3_stmt*,int,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
bind_value	sqlite3.c	/^  int  (*bind_value)(sqlite3_stmt*,int,const sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
bind_zeroblob	sqlite3.c	/^  int (*bind_zeroblob)(sqlite3_stmt*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
blobReadWrite	sqlite3.c	/^static int blobReadWrite($/;"	f	file:
blobSeekToRow	sqlite3.c	/^static int blobSeekToRow(Incrblob *p, sqlite3_int64 iRow, char **pzErr){$/;"	f	file:
blob_bytes	sqlite3.c	/^  int (*blob_bytes)(sqlite3_blob*);$/;"	m	struct:sqlite3_api_routines	file:
blob_close	sqlite3.c	/^  int (*blob_close)(sqlite3_blob*);$/;"	m	struct:sqlite3_api_routines	file:
blob_open	sqlite3.c	/^  int (*blob_open)(sqlite3*,const char*,const char*,const char*,sqlite3_int64,int,sqlite3_blob**);$/;"	m	struct:sqlite3_api_routines	file:
blob_read	sqlite3.c	/^  int (*blob_read)(sqlite3_blob*,void*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
blob_write	sqlite3.c	/^  int (*blob_write)(sqlite3_blob*,const void*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
btreeClearHasContent	sqlite3.c	/^static void btreeClearHasContent(BtShared *pBt){$/;"	f	file:
btreeCreateTable	sqlite3.c	/^static int btreeCreateTable(Btree *p, int *piTable, int createTabFlags){$/;"	f	file:
btreeCursor	sqlite3.c	/^static int btreeCursor($/;"	f	file:
btreeDropTable	sqlite3.c	/^static int btreeDropTable(Btree *p, Pgno iTable, int *piMoved){$/;"	f	file:
btreeEndTransaction	sqlite3.c	/^static void btreeEndTransaction(Btree *p){$/;"	f	file:
btreeGetHasContent	sqlite3.c	/^static int btreeGetHasContent(BtShared *pBt, Pgno pgno){$/;"	f	file:
btreeGetPage	sqlite3.c	/^static int btreeGetPage($/;"	f	file:
btreeInitPage	sqlite3.c	/^static int btreeInitPage(MemPage *pPage){$/;"	f	file:
btreeIntegrity	sqlite3.c	47196;"	d	file:
btreeInvokeBusyHandler	sqlite3.c	/^static int btreeInvokeBusyHandler(void *pArg){$/;"	f	file:
btreeMask	sqlite3.c	/^  yDbMask btreeMask;      \/* Bitmask of db->aDb[] entries referenced *\/$/;"	m	struct:Vdbe	file:
btreeMoveto	sqlite3.c	/^static int btreeMoveto($/;"	f	file:
btreePageFromDbPage	sqlite3.c	/^static MemPage *btreePageFromDbPage(DbPage *pDbPage, Pgno pgno, BtShared *pBt){$/;"	f	file:
btreePageLookup	sqlite3.c	/^static MemPage *btreePageLookup(BtShared *pBt, Pgno pgno){$/;"	f	file:
btreePagecount	sqlite3.c	/^static Pgno btreePagecount(BtShared *pBt){$/;"	f	file:
btreeParseCell	sqlite3.c	/^static void btreeParseCell($/;"	f	file:
btreeParseCellPtr	sqlite3.c	/^static void btreeParseCellPtr($/;"	f	file:
btreeRestoreCursorPosition	sqlite3.c	/^static int btreeRestoreCursorPosition(BtCursor *pCur){$/;"	f	file:
btreeSetHasContent	sqlite3.c	/^static int btreeSetHasContent(BtShared *pBt, Pgno pgno){$/;"	f	file:
busy	sqlite3.c	/^    u8 busy;                    \/* TRUE if currently initializing *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	file:
busyHandler	sqlite3.c	/^  BusyHandler busyHandler;      \/* Busy callback *\/$/;"	m	struct:sqlite3	file:
busyTimeout	sqlite3.c	/^  int busyTimeout;              \/* Busy handler timeout, in msec *\/$/;"	m	struct:sqlite3	file:
busy_handler	sqlite3.c	/^  int  (*busy_handler)(sqlite3*,int(*)(void*,int),void*);$/;"	m	struct:sqlite3_api_routines	file:
busy_timeout	sqlite3.c	/^  int  (*busy_timeout)(sqlite3*,int ms);$/;"	m	struct:sqlite3_api_routines	file:
cType	sqlite3.c	/^static const char cType[] = {$/;"	v	file:
cacheCtr	sqlite3.c	/^  u32 cacheCtr;           \/* VdbeCursor row cache generation counter *\/$/;"	m	struct:Vdbe	file:
cacheEntryClear	sqlite3.c	/^static void cacheEntryClear(Parse *pParse, struct yColCache *p){$/;"	f	file:
cacheStatus	sqlite3.c	/^  u32 cacheStatus;      \/* Cache is valid if this matches Vdbe.cacheCtr *\/$/;"	m	struct:VdbeCursor	file:
cache_size	sqlite3.c	/^  int cache_size;      \/* Number of pages to use in the cache *\/$/;"	m	struct:Schema	file:
cachedRowid	sqlite3.c	/^  sqlite3_int64 cachedRowid; \/* Next rowid cache.  0 means not valid *\/$/;"	m	struct:BtCursor	file:
calcBackwardMessage	InferredDataFit.cpp	/^void HMM_PP::InferredDataFit::calcBackwardMessage(const uint t, NamedMatrix<real>& beta, NamedMatrix<real>::MarginalizeFunc margFunc, const Constraint* constraints) const {$/;"	f	class:HMM_PP::InferredDataFit
calcDigamma	InferredDataFit.cpp	/^void HMM_PP::InferredDataFit::calcDigamma() {$/;"	f	class:HMM_PP::InferredDataFit
calcForwardMessage	InferredDataFit.cpp	/^void HMM_PP::InferredDataFit::calcForwardMessage(const uint t, NamedMatrix<real>& alpha, NamedMatrix<real>::MarginalizeFunc margFunc, const Constraint* constraints) const {$/;"	f	class:HMM_PP::InferredDataFit
calcGamma	InferredDataFit.cpp	/^void HMM_PP::InferredDataFit::calcGamma(const NamedMatrix<real>& alpha, const NamedMatrix<real>& beta, NamedMatrix<real>& gamma, bool normalize) {$/;"	f	class:HMM_PP::InferredDataFit
calcLikelihood	InferredDataFit.cpp	/^real HMM_PP::InferredDataFit::calcLikelihood() const {$/;"	f	class:HMM_PP::InferredDataFit
calcLikelihood	InferredDataFit.cpp	/^real HMM_PP::InferredDataFit::calcLikelihood(const NamedMatrix<real>& alpha, const NamedMatrix<real>& beta, const uint t) const {$/;"	f	class:HMM_PP::InferredDataFit
calcLikelihoodGivenConstraints	InferredDataFit.cpp	/^real HMM_PP::InferredDataFit::calcLikelihoodGivenConstraints(const uint t1, const uint t2, Constraint* constraints) const {$/;"	f	class:HMM_PP::InferredDataFit
calcLikelihoodGivenEvent	InferredDataFit.cpp	/^real HMM_PP::InferredDataFit::calcLikelihoodGivenEvent(const uint t1, const uint t2, const uint state) const {$/;"	f	class:HMM_PP::InferredDataFit
calcLikelihoodGivenEvent	InferredDataFit.cpp	/^real HMM_PP::InferredDataFit::calcLikelihoodGivenEvent(const uint t1, const vector<uint>& statePath) const {$/;"	f	class:HMM_PP::InferredDataFit
calcPosterior	InferredDataFit.cpp	/^real HMM_PP::InferredDataFit::calcPosterior(const uint t1, const uint t2, const uint state) const {$/;"	f	class:HMM_PP::InferredDataFit
calcPosterior	InferredDataFit.cpp	/^real HMM_PP::InferredDataFit::calcPosterior(const uint t1, const vector<uint>& statePath) const {$/;"	f	class:HMM_PP::InferredDataFit
calcPosteriorAssignmentsExcludingStates	InferredDataFit.cpp	/^real HMM_PP::InferredDataFit::calcPosteriorAssignmentsExcludingStates(const uint t1, const uint t2, const set<uint>& excludeStates) const {$/;"	f	class:HMM_PP::InferredDataFit
calcPosteriorComplement	InferredDataFit.cpp	/^real HMM_PP::InferredDataFit::calcPosteriorComplement(const uint t1, const uint t2, const uint state) const {$/;"	f	class:HMM_PP::InferredDataFit
calcPosteriorComplement	InferredDataFit.cpp	/^real HMM_PP::InferredDataFit::calcPosteriorComplement(const uint t1, const vector<uint>& statePath) const {$/;"	f	class:HMM_PP::InferredDataFit
calcPosteriorComplementAssignmentsExcludingStates	InferredDataFit.cpp	/^real HMM_PP::InferredDataFit::calcPosteriorComplementAssignmentsExcludingStates(const uint t1, const uint t2, const set<uint>& excludeStates) const {$/;"	f	class:HMM_PP::InferredDataFit
calcPosteriorNumerator	InferredDataFit.cpp	/^real HMM_PP::InferredDataFit::calcPosteriorNumerator(const uint t1, const uint t2, const uint state) const {$/;"	f	class:HMM_PP::InferredDataFit
calcPosteriorNumerator	InferredDataFit.cpp	/^real HMM_PP::InferredDataFit::calcPosteriorNumerator(const uint t1, const vector<uint>& statePath) const {$/;"	f	class:HMM_PP::InferredDataFit
calcPosteriorNumeratorAssignmentsExcludingStates	InferredDataFit.cpp	/^real HMM_PP::InferredDataFit::calcPosteriorNumeratorAssignmentsExcludingStates(const uint t1, const uint t2, const set<uint>& excludeStates) const {$/;"	f	class:HMM_PP::InferredDataFit
calcRepresentativeDataVal	UnivariateCategoricalModelParams.cpp	/^HMM_PP::UnivariateCategoricalModelParams::CategoricalDataVal* HMM_PP::UnivariateCategoricalModelParams::calcRepresentativeDataVal(const HMM_PP::Data* d, const uint t1, const uint t2) const {$/;"	f	class:HMM_PP::UnivariateCategoricalModelParams
calcRepresentativeDataVal	UnivariateQuantitativeModelParams.cpp	/^HMM_PP::UnivariateQuantitativeModelParams::QuantitativeDataVal* HMM_PP::UnivariateQuantitativeModelParams::calcRepresentativeDataVal(const HMM_PP::Data* d, const uint t1, const uint t2) const {$/;"	f	class:HMM_PP::UnivariateQuantitativeModelParams
callCollNeeded	sqlite3.c	/^static void callCollNeeded(sqlite3 *db, int enc, const char *zName){$/;"	f	file:
callFinaliser	sqlite3.c	/^static void callFinaliser(sqlite3 *db, int offset){$/;"	f	file:
categoryToType	CategoricalData.cpp	/^uint HMM_PP::CategoricalData::categoryToType(const string& c) {$/;"	f	class:HMM_PP::CategoricalData
cdateFunc	sqlite3.c	/^static void cdateFunc($/;"	f	file:
cellArea	sqlite3.c	/^static float cellArea(Rtree *pRtree, RtreeCell *p){$/;"	f	file:
cellContains	sqlite3.c	/^static int cellContains(Rtree *pRtree, RtreeCell *p1, RtreeCell *p2){$/;"	f	file:
cellGrowth	sqlite3.c	/^static float cellGrowth(Rtree *pRtree, RtreeCell *p, RtreeCell *pCell){$/;"	f	file:
cellMargin	sqlite3.c	/^static float cellMargin(Rtree *pRtree, RtreeCell *p){$/;"	f	file:
cellOffset	sqlite3.c	/^  u16 cellOffset;      \/* Index in aData of first cell pointer *\/$/;"	m	struct:MemPage	file:
cellOverlap	sqlite3.c	/^static float cellOverlap($/;"	f	file:
cellOverlapEnlargement	sqlite3.c	/^static float cellOverlapEnlargement($/;"	f	file:
cellSize	sqlite3.c	/^static u16 cellSize(MemPage *pPage, int iCell){$/;"	f	file:
cellSizePtr	sqlite3.c	/^static u16 cellSizePtr(MemPage *pPage, u8 *pCell){$/;"	f	file:
cellUnion	sqlite3.c	/^static void cellUnion(Rtree *pRtree, RtreeCell *p1, RtreeCell *p2){$/;"	f	file:
chain	sqlite3.c	/^    Fts3HashElem *chain;     \/* Pointer to first entry with this hash *\/$/;"	m	struct:Fts3Hash::_fts3ht	file:
chain	sqlite3.c	/^    HashElem *chain;           \/* Pointer to first entry with this hash *\/$/;"	m	struct:Hash::_ht	file:
changeCntOn	sqlite3.c	/^  u8 changeCntOn;         \/* True to update the change-counter *\/$/;"	m	struct:Vdbe	file:
changeCountDone	sqlite3.c	/^  u8 changeCountDone;         \/* Set after incrementing the change-counter *\/$/;"	m	struct:Pager	file:
changeTempStorage	sqlite3.c	/^static int changeTempStorage(Parse *pParse, const char *zStorageType){$/;"	f	file:
changes	sqlite3.c	/^  int  (*changes)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
changes	sqlite3.c	/^static void changes($/;"	f	file:
charMap	sqlite3.c	106772;"	d	file:
charMap	sqlite3.c	106775;"	d	file:
charset	sqlite3.c	/^  etByte charset;          \/* Offset into aDigits[] of the digits string *\/$/;"	m	struct:et_info	file:
checkActiveVdbeCnt	sqlite3.c	/^static void checkActiveVdbeCnt(sqlite3 *db){$/;"	f	file:
checkActiveVdbeCnt	sqlite3.c	59516;"	d	file:
checkAppendMsg	sqlite3.c	/^static void checkAppendMsg($/;"	f	file:
checkColumnOverlap	sqlite3.c	/^static int checkColumnOverlap(IdList *pIdList, ExprList *pEList){$/;"	f	file:
checkForMultiColumnSelectError	sqlite3.c	/^static int checkForMultiColumnSelectError($/;"	f	file:
checkList	sqlite3.c	/^static void checkList($/;"	f	file:
checkListProperties	sqlite3.c	/^static void checkListProperties(sqlite3 *db){$/;"	f	file:
checkListProperties	sqlite3.c	110938;"	d	file:
checkPage	sqlite3.c	/^static void checkPage(PgHdr *pPg){$/;"	f	file:
checkPtrmap	sqlite3.c	/^static void checkPtrmap($/;"	f	file:
checkRef	sqlite3.c	/^static int checkRef(IntegrityCk *pCheck, Pgno iPage, char *zContext){$/;"	f	file:
checkSavepointCount	sqlite3.c	/^static int checkSavepointCount(sqlite3 *db){$/;"	f	file:
checkSchema	sqlite3.c	/^  u8 checkSchema;      \/* Causes schema cookie check after an error *\/$/;"	m	struct:Parse	file:
checkStartStopRange	Data.cpp	/^uint HMM_PP::Data::checkStartStopRange(const uint t1, const vector<uint>& statePath) const {$/;"	f	class:HMM_PP::Data
checkStartStopRange	Data.cpp	/^void HMM_PP::Data::checkStartStopRange(const uint t1, const uint t2) const {$/;"	f	class:HMM_PP::Data
checkTreePage	sqlite3.c	/^static int checkTreePage($/;"	f	file:
childPtrSize	sqlite3.c	/^  u8 childPtrSize;     \/* 0 if leaf==1.  4 if leaf==0 *\/$/;"	m	struct:MemPage	file:
ckBase	sqlite3.c	/^  int ckBase;          \/* Base register of data during check constraints *\/$/;"	m	struct:Parse	file:
ckptLock	sqlite3.c	/^  u8 ckptLock;               \/* True if holding a checkpoint lock *\/$/;"	m	struct:Wal	file:
ckptSyncFlags	sqlite3.c	/^  u8 ckptSyncFlags;           \/* SYNC_NORMAL or SYNC_FULL for checkpoint *\/$/;"	m	struct:Pager	file:
cksumInit	sqlite3.c	/^  u32 cksumInit;              \/* Quasi-random value added to every checksum *\/$/;"	m	struct:Pager	file:
clear	Data.cpp	/^void HMM_PP::Data::clear() {$/;"	f	class:HMM_PP::Data
clear	HomogeneousModelParams.cpp	/^void HMM_PP::HomogeneousModelParams::clear() {$/;"	f	class:HMM_PP::HomogeneousModelParams
clear	InferredDataFit.cpp	/^void HMM_PP::InferredDataFit::clear() {$/;"	f	class:HMM_PP::InferredDataFit
clear	UnivariateCategoricalModelParams.cpp	/^void HMM_PP::UnivariateCategoricalModelParams::clear() {$/;"	f	class:HMM_PP::UnivariateCategoricalModelParams
clear	UnivariateQuantitativeModelParams.cpp	/^void HMM_PP::UnivariateQuantitativeModelParams::clear() {$/;"	f	class:HMM_PP::UnivariateQuantitativeModelParams
clearAllSharedCacheTableLocks	sqlite3.c	/^static void clearAllSharedCacheTableLocks(Btree *p){$/;"	f	file:
clearAllSharedCacheTableLocks	sqlite3.c	47601;"	d	file:
clearCategories	CategoricalData.cpp	/^void HMM_PP::CategoricalData::clearCategories() {$/;"	f	class:HMM_PP::CategoricalData
clearCell	sqlite3.c	/^static int clearCell(MemPage *pPage, unsigned char *pCell){$/;"	f	file:
clearDatabasePage	sqlite3.c	/^static int clearDatabasePage($/;"	f	file:
clearObservations	MultivariateCategoricalData.cpp	/^void HMM_PP::MultivariateCategoricalData::clearObservations() {$/;"	f	class:HMM_PP::MultivariateCategoricalData
clearObservations	MultivariateQuantitativeData.cpp	/^void HMM_PP::MultivariateQuantitativeData::clearObservations() {$/;"	f	class:HMM_PP::MultivariateQuantitativeData
clearSelect	sqlite3.c	/^static void clearSelect(sqlite3 *db, Select *p){$/;"	f	file:
clearYMD_HMS_TZ	sqlite3.c	/^static void clearYMD_HMS_TZ(DateTime *p){$/;"	f	file:
clear_bindings	sqlite3.c	/^  int (*clear_bindings)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
close	sqlite3.c	/^  int  (*close)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
close	sqlwrap.cpp	/^void SQL::close() {$/;"	f	class:SQL
closeAllCursors	sqlite3.c	/^static void closeAllCursors(Vdbe *p){$/;"	f	file:
closePendingFds	sqlite3.c	/^static void closePendingFds(unixFile *pFile){$/;"	f	file:
closeUnixFile	sqlite3.c	/^static int closeUnixFile(sqlite3_file *id){$/;"	f	file:
cnt	sqlite3.c	/^  i64 cnt;          \/* Number of elements summed *\/$/;"	m	struct:SumCtx	file:
cnt	sqlite3.c	/^  int cnt;                 \/* Number of times this instruction was executed *\/$/;"	m	struct:VdbeOp	file:
cnt	sqlite3.c	/^  int cnt;    \/* Number of entries without a matching leave *\/$/;"	m	struct:sqlite3_debug_mutex	file:
codeAllEqualityTerms	sqlite3.c	/^static int codeAllEqualityTerms($/;"	f	file:
codeApplyAffinity	sqlite3.c	/^static void codeApplyAffinity(Parse *pParse, int base, int n, char *zAff){$/;"	f	file:
codeAttach	sqlite3.c	/^static void codeAttach($/;"	f	file:
codeCompare	sqlite3.c	/^static int codeCompare($/;"	f	file:
codeDistinct	sqlite3.c	/^static void codeDistinct($/;"	f	file:
codeEqualityTerm	sqlite3.c	/^static int codeEqualityTerm($/;"	f	file:
codeInteger	sqlite3.c	/^static void codeInteger(Parse *pParse, Expr *pExpr, int negFlag, int iMem){$/;"	f	file:
codeOffset	sqlite3.c	/^static void codeOffset($/;"	f	file:
codeOneLoopStart	sqlite3.c	/^static Bitmask codeOneLoopStart($/;"	f	file:
codeReal	sqlite3.c	/^static void codeReal(Vdbe *v, const char *z, int negateFlag, int iMem){$/;"	f	file:
codeRowTrigger	sqlite3.c	/^static TriggerPrg *codeRowTrigger($/;"	f	file:
codeTableLocks	sqlite3.c	/^static void codeTableLocks(Parse *pParse){$/;"	f	file:
codeTableLocks	sqlite3.c	77449;"	d	file:
codeTriggerProgram	sqlite3.c	/^static int codeTriggerProgram($/;"	f	file:
colNamesSet	sqlite3.c	/^  u8 colNamesSet;      \/* TRUE after OP_ColumnName has been issued to pVdbe *\/$/;"	m	struct:Parse	file:
colUsed	sqlite3.c	/^    Bitmask colUsed;  \/* Bit N (1<<N) set if column N of pTab is used *\/$/;"	m	struct:SrcList::SrcList_item	file:
collationMatch	sqlite3.c	/^static int collationMatch(const char *zColl, Index *pIndex){$/;"	f	file:
collation_needed	sqlite3.c	/^  int  (*collation_needed)(sqlite3*,void*,void(*)(void*,sqlite3*,int eTextRep,const char*));$/;"	m	struct:sqlite3_api_routines	file:
collation_needed16	sqlite3.c	/^  int  (*collation_needed16)(sqlite3*,void*,void(*)(void*,sqlite3*,int eTextRep,const void*));$/;"	m	struct:sqlite3_api_routines	file:
columnIndex	sqlite3.c	/^static int columnIndex(Table *pTab, const char *zCol){$/;"	f	file:
columnMallocFailure	sqlite3.c	/^static void columnMallocFailure(sqlite3_stmt *pStmt)$/;"	f	file:
columnMem	sqlite3.c	/^static Mem *columnMem(sqlite3_stmt *pStmt, int i){$/;"	f	file:
columnName	sqlite3.c	/^static const void *columnName($/;"	f	file:
columnType	sqlite3.c	/^static const char *columnType($/;"	f	file:
column_blob	sqlite3.c	/^  const void * (*column_blob)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_bytes	sqlite3.c	/^  int  (*column_bytes)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_bytes16	sqlite3.c	/^  int  (*column_bytes16)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_count	sqlite3.c	/^  int  (*column_count)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines	file:
column_database_name	sqlite3.c	/^  const char * (*column_database_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_database_name16	sqlite3.c	/^  const void * (*column_database_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_decltype	sqlite3.c	/^  const char * (*column_decltype)(sqlite3_stmt*,int i);$/;"	m	struct:sqlite3_api_routines	file:
column_decltype16	sqlite3.c	/^  const void * (*column_decltype16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_double	sqlite3.c	/^  double  (*column_double)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_int	sqlite3.c	/^  int  (*column_int)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_int64	sqlite3.c	/^  sqlite_int64  (*column_int64)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_name	sqlite3.c	/^  const char * (*column_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_name16	sqlite3.c	/^  const void * (*column_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_origin_name	sqlite3.c	/^  const char * (*column_origin_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_origin_name16	sqlite3.c	/^  const void * (*column_origin_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_table_name	sqlite3.c	/^  const char * (*column_table_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_table_name16	sqlite3.c	/^  const void * (*column_table_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_text	sqlite3.c	/^  const unsigned char * (*column_text)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_text16	sqlite3.c	/^  const void * (*column_text16)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_type	sqlite3.c	/^  int  (*column_type)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_value	sqlite3.c	/^  sqlite3_value* (*column_value)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
commit	sqlwrap.cpp	/^void SQL::commit() {$/;"	f	class:SQL
commit_hook	sqlite3.c	/^  void * (*commit_hook)(sqlite3*,int(*)(void*),void*);$/;"	m	struct:sqlite3_api_routines	file:
compare2pow63	sqlite3.c	/^static int compare2pow63(const char *zNum, int incr){$/;"	f	file:
compareInfo	sqlite3.c	/^struct compareInfo {$/;"	s	file:
comparisonAffinity	sqlite3.c	/^static char comparisonAffinity(Expr *pExpr){$/;"	f	file:
compileoption_get	sqlite3.c	/^  const char *(*compileoption_get)(int);$/;"	m	struct:sqlite3_api_routines	file:
compileoption_used	sqlite3.c	/^  int (*compileoption_used)(const char*);$/;"	m	struct:sqlite3_api_routines	file:
compileoptiongetFunc	sqlite3.c	/^static void compileoptiongetFunc($/;"	f	file:
compileoptionusedFunc	sqlite3.c	/^static void compileoptionusedFunc($/;"	f	file:
complete	sqlite3.c	/^  int  (*complete)(const char*sql);$/;"	m	struct:sqlite3_api_routines	file:
complete16	sqlite3.c	/^  int  (*complete16)(const void*sql);$/;"	m	struct:sqlite3_api_routines	file:
computeHMS	sqlite3.c	/^static void computeHMS(DateTime *p){$/;"	f	file:
computeJD	sqlite3.c	/^static void computeJD(DateTime *p){$/;"	f	file:
computeLimitRegisters	sqlite3.c	/^static void computeLimitRegisters(Parse *pParse, Select *p, int iBreak){$/;"	f	file:
computeYMD	sqlite3.c	/^static void computeYMD(DateTime *p){$/;"	f	file:
computeYMD_HMS	sqlite3.c	/^static void computeYMD_HMS(DateTime *p){$/;"	f	file:
conchFile	sqlite3.c	/^  unixFile *conchFile;         \/* Open conch file *\/$/;"	m	struct:proxyLockingContext	file:
conchFilePath	sqlite3.c	/^  char *conchFilePath;         \/* Name of the conch file *\/$/;"	m	struct:proxyLockingContext	file:
conchHeld	sqlite3.c	/^  int conchHeld;               \/* 1 if the conch is held, -1 if lockless *\/$/;"	m	struct:proxyLockingContext	file:
constructAutomaticIndex	sqlite3.c	/^static void constructAutomaticIndex($/;"	f	file:
constructFixedParamsFromStream	UnivariateCategoricalModelParams.cpp	/^void HMM_PP::UnivariateCategoricalModelParams::constructFixedParamsFromStream(istream& stream) {$/;"	f	class:HMM_PP::UnivariateCategoricalModelParams
constructVariableParamsFromStream	UnivariateCategoricalModelParams.cpp	/^void HMM_PP::UnivariateCategoricalModelParams::constructVariableParamsFromStream(istream& stream) {$/;"	f	class:HMM_PP::UnivariateCategoricalModelParams
constructVariableParamsFromStream	UnivariateQuantitativeModelParams.cpp	/^void HMM_PP::UnivariateQuantitativeModelParams::constructVariableParamsFromStream(istream& stream) {$/;"	f	class:HMM_PP::UnivariateQuantitativeModelParams
contextMalloc	sqlite3.c	/^static void *contextMalloc(sqlite3_context *context, i64 nByte){$/;"	f	file:
context_db_handle	sqlite3.c	/^  sqlite3 *(*context_db_handle)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
convertCpPathToUtf8	sqlite3.c	/^char *convertCpPathToUtf8( const char *in ){$/;"	f
convertUtf8Filename	sqlite3.c	/^static void *convertUtf8Filename(const char *zFilename){$/;"	f	file:
convertUtf8PathToCp	sqlite3.c	/^static char *convertUtf8PathToCp( const char *in ){$/;"	f	file:
cookieGoto	sqlite3.c	/^  int cookieGoto;      \/* Address of OP_Goto to cookie verifier subroutine *\/$/;"	m	struct:Parse	file:
cookieMask	sqlite3.c	/^  yDbMask cookieMask;  \/* Bitmask of schema verified databases *\/$/;"	m	struct:Parse	file:
cookieValue	sqlite3.c	/^  int cookieValue[SQLITE_MAX_ATTACHED+2];  \/* Values of cookies to verify *\/$/;"	m	struct:Parse	file:
copyKey	sqlite3.c	/^  char copyKey;           \/* True if copy of key made on insert *\/$/;"	m	struct:Fts3Hash	file:
copyNodeContent	sqlite3.c	/^static void copyNodeContent(MemPage *pFrom, MemPage *pTo, int *pRC){$/;"	f	file:
copyPayload	sqlite3.c	/^static int copyPayload($/;"	f	file:
copy_stemmer	sqlite3.c	/^static void copy_stemmer(const char *zIn, int nIn, char *zOut, int *pnOut){$/;"	f	file:
corruptSchema	sqlite3.c	/^static void corruptSchema($/;"	f	file:
count	sqlite3.c	/^    int count;                 \/* Number of entries with this hash *\/$/;"	m	struct:Hash::_ht	file:
count	sqlite3.c	/^    int count;               \/* Number of entries with this hash *\/$/;"	m	struct:Fts3Hash::_fts3ht	file:
count	sqlite3.c	/^  int count;              \/* Number of entries in this table *\/$/;"	m	struct:Fts3Hash	file:
count	sqlite3.c	/^  unsigned int count;       \/* Number of entries in this table *\/$/;"	m	struct:Hash	file:
countFinalize	sqlite3.c	/^static void countFinalize(sqlite3_context *context){$/;"	f	file:
countStep	sqlite3.c	/^static void countStep(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
countWriteCursors	sqlite3.c	/^static int countWriteCursors(BtShared *pBt){$/;"	f	file:
covered	sqlite3.c	/^  u64 covered;                    \/* Mask of query phrases covered *\/$/;"	m	struct:SnippetFragment	file:
createCollation	sqlite3.c	/^static int createCollation($/;"	f	file:
createConstraintsExcludedStates	InferredDataFit.cpp	/^HMM_PP::InferredDataFit::HomogeneousConstraint* HMM_PP::InferredDataFit::createConstraintsExcludedStates(const set<uint>& excludedStates) const {$/;"	f	class:HMM_PP::InferredDataFit
createConstraintsOnlyPermitStates	InferredDataFit.cpp	/^HMM_PP::InferredDataFit::HomogeneousConstraint* HMM_PP::InferredDataFit::createConstraintsOnlyPermitStates(const set<uint>& permittedStates) const {$/;"	f	class:HMM_PP::InferredDataFit
createFile	sqlite3.c	/^static int createFile(JournalFile *p){$/;"	f	file:
createMask	sqlite3.c	/^static void createMask(WhereMaskSet *pMaskSet, int iCursor){$/;"	f	file:
createModule	sqlite3.c	/^static int createModule($/;"	f	file:
createTableStmt	sqlite3.c	/^static char *createTableStmt(sqlite3 *db, Table *p){$/;"	f	file:
create_collation	sqlite3.c	/^  int  (*create_collation)(sqlite3*,const char*,int,void*,int(*)(void*,int,const void*,int,const void*));$/;"	m	struct:sqlite3_api_routines	file:
create_collation16	sqlite3.c	/^  int  (*create_collation16)(sqlite3*,const void*,int,void*,int(*)(void*,int,const void*,int,const void*));$/;"	m	struct:sqlite3_api_routines	file:
create_collation_v2	sqlite3.c	/^  int (*create_collation_v2)(sqlite3*,const char*,int,void*,int(*)(void*,int,const void*,int,const void*),void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
create_function	sqlite3.c	/^  int  (*create_function)(sqlite3*,const char*,int,int,void*,void (*xFunc)(sqlite3_context*,int,sqlite3_value**),void (*xStep)(sqlite3_context*,int,sqlite3_value**),void (*xFinal)(sqlite3_context*));$/;"	m	struct:sqlite3_api_routines	file:
create_function16	sqlite3.c	/^  int  (*create_function16)(sqlite3*,const void*,int,int,void*,void (*xFunc)(sqlite3_context*,int,sqlite3_value**),void (*xStep)(sqlite3_context*,int,sqlite3_value**),void (*xFinal)(sqlite3_context*));$/;"	m	struct:sqlite3_api_routines	file:
create_function_v2	sqlite3.c	/^  int (*create_function_v2)(sqlite3*,const char*,int,int,void*,void (*xFunc)(sqlite3_context*,int,sqlite3_value**),void (*xStep)(sqlite3_context*,int,sqlite3_value**),void (*xFinal)(sqlite3_context*),void(*xDestroy)(void*));$/;"	m	struct:sqlite3_api_routines	file:
create_module	sqlite3.c	/^  int (*create_module)(sqlite3*,const char*,const sqlite3_module*,void*);$/;"	m	struct:sqlite3_api_routines	file:
create_module_v2	sqlite3.c	/^  int (*create_module_v2)(sqlite3*,const char*,const sqlite3_module*,void*,void (*xDestroy)(void *));$/;"	m	struct:sqlite3_api_routines	file:
csr	sqlite3.c	/^  Fts3MultiSegReader csr;        \/* Must be right after "base" *\/$/;"	m	struct:Fts3auxCursor	file:
ctimeFunc	sqlite3.c	/^static void ctimeFunc($/;"	f	file:
ctimestampFunc	sqlite3.c	/^static void ctimestampFunc($/;"	f	file:
ctrlFlags	sqlite3.c	/^  unsigned char ctrlFlags;            \/* Behavioral bits.  UNIXFILE_* flags *\/$/;"	m	struct:unixFile	file:
currentCount	sqlite3.c	/^  u32 currentCount;   \/* Current number of distinct checkouts *\/$/;"	m	struct:Mem5Global	file:
currentOut	sqlite3.c	/^  u32 currentOut;     \/* Current checkout, including internal fragmentation *\/$/;"	m	struct:Mem5Global	file:
currentTimeFunc	sqlite3.c	/^static void currentTimeFunc($/;"	f	file:
cursorHoldsMutex	sqlite3.c	/^static int cursorHoldsMutex(BtCursor *p){$/;"	f	file:
cycles	sqlite3.c	/^  u64 cycles;              \/* Total time spent executing this instruction *\/$/;"	m	struct:VdbeOp	file:
data	sqlite3.c	/^  void *data;                  \/* Data associated with this element *\/$/;"	m	struct:HashElem	file:
data	sqlite3.c	/^  void *data;                \/* Data associated with this element *\/$/;"	m	struct:Fts3HashElem	file:
data_count	sqlite3.c	/^  int  (*data_count)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines	file:
dateFunc	sqlite3.c	/^static void dateFunc($/;"	f	file:
datetimeFunc	sqlite3.c	/^static void datetimeFunc($/;"	f	file:
db	sqlite3.c	/^  sqlite3 *db;                    \/* The database connection *\/$/;"	m	struct:Fts3Table	file:
db	sqlite3.c	/^  sqlite3 *db;                   \/* The database connection *\/$/;"	m	struct:RowSet	file:
db	sqlite3.c	/^  sqlite3 *db;                \/* Host database connection *\/$/;"	m	struct:Rtree	file:
db	sqlite3.c	/^  sqlite3 *db;              \/* Database connection associated with this table *\/$/;"	m	struct:VTable	file:
db	sqlite3.c	/^  sqlite3 *db;            \/* The associated database *\/$/;"	m	struct:Incrblob	file:
db	sqlite3.c	/^  sqlite3 *db;            \/* The database connection that owns this statement *\/$/;"	m	struct:Vdbe	file:
db	sqlite3.c	/^  sqlite3 *db;          \/* Database connection currently using this Btree *\/$/;"	m	struct:BtShared	file:
db	sqlite3.c	/^  sqlite3 *db;         \/* Optional database for lookaside.  Can be NULL *\/$/;"	m	struct:StrAccum	file:
db	sqlite3.c	/^  sqlite3 *db;         \/* The main database structure *\/$/;"	m	struct:Parse	file:
db	sqlite3.c	/^  sqlite3 *db;        \/* The associated database connection *\/$/;"	m	struct:Mem	file:
db	sqlite3.c	/^  sqlite3 *db;        \/* The database being initialized *\/$/;"	m	struct:__anon9	file:
db	sqlite3.c	/^  sqlite3 *db;        \/* The database connection *\/$/;"	m	struct:KeyInfo	file:
db	sqlite3.c	/^  sqlite3 *db;       \/* The database connection holding this btree *\/$/;"	m	struct:Btree	file:
db	sqlite3.c	/^  sqlite3 *db;$/;"	m	struct:analysisInfo	file:
dbClearData	ModelWithDB.cpp	/^void HMM_PP::ModelWithDB::dbClearData() {$/;"	f	class:HMM_PP::ModelWithDB
dbClearFit	ModelWithDB.cpp	/^void HMM_PP::ModelWithDB::dbClearFit() {$/;"	f	class:HMM_PP::ModelWithDB
dbCreate	ModelWithDB.cpp	/^void HMM_PP::ModelWithDB::dbCreate() {$/;"	f	class:HMM_PP::ModelWithDB
dbFileSize	sqlite3.c	/^  Pgno dbFileSize;            \/* Number of pages in the database file *\/$/;"	m	struct:Pager	file:
dbFileVers	sqlite3.c	/^  char dbFileVers[16];        \/* Changes whenever database file changes *\/$/;"	m	struct:Pager	file:
dbHintSize	sqlite3.c	/^  Pgno dbHintSize;            \/* Value passed to FCNTL_SIZE_HINT call *\/$/;"	m	struct:Pager	file:
dbOrigSize	sqlite3.c	/^  Pgno dbOrigSize;            \/* dbSize before the current transaction *\/$/;"	m	struct:Pager	file:
dbPath	sqlite3.c	/^  char *dbPath;                \/* Name of the open file *\/$/;"	m	struct:proxyLockingContext	file:
dbPath	sqlite3.c	/^  const char *dbPath;             \/* Name of the open file *\/$/;"	m	struct:afpLockingContext	file:
dbRestoreData	ModelWithDB.cpp	/^void HMM_PP::ModelWithDB::dbRestoreData(const uint i, HMM_PP::Data** seq) {$/;"	f	class:HMM_PP::ModelWithDB
dbRestoreDataAndFit	ModelWithDB.cpp	/^void HMM_PP::ModelWithDB::dbRestoreDataAndFit(const uint i, InferredDataFit** fit) {$/;"	f	class:HMM_PP::ModelWithDB
dbShutdown	ModelWithDB.cpp	/^void HMM_PP::ModelWithDB::dbShutdown() {$/;"	f	class:HMM_PP::ModelWithDB
dbSize	sqlite3.c	/^  Pgno dbSize;                \/* Number of pages in the database *\/$/;"	m	struct:Pager	file:
dbStoreData	ModelWithDB.cpp	/^void HMM_PP::ModelWithDB::dbStoreData(const uint i, HMM_PP::Data* data) {$/;"	f	class:HMM_PP::ModelWithDB
dbStoreFit	ModelWithDB.cpp	/^void HMM_PP::ModelWithDB::dbStoreFit(const uint i, InferredDataFit* fit)  {$/;"	f	class:HMM_PP::ModelWithDB
dbUpdate	sqlite3.c	/^  unsigned char dbUpdate;        \/* True if any part of database file changed *\/$/;"	m	struct:unixFile	file:
db_config	sqlite3.c	/^  int (*db_config)(sqlite3*,int,...);$/;"	m	struct:sqlite3_api_routines	file:
db_handle	sqlite3.c	/^  sqlite3 * (*db_handle)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
db_mutex	sqlite3.c	/^  sqlite3_mutex *(*db_mutex)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
db_status	sqlite3.c	/^  int (*db_status)(sqlite3*,int,int*,int*,int);$/;"	m	struct:sqlite3_api_routines	file:
debugMutexAlloc	sqlite3.c	/^static sqlite3_mutex *debugMutexAlloc(int id){$/;"	f	file:
debugMutexEnd	sqlite3.c	/^static int debugMutexEnd(void){ return SQLITE_OK; }$/;"	f	file:
debugMutexEnter	sqlite3.c	/^static void debugMutexEnter(sqlite3_mutex *pX){$/;"	f	file:
debugMutexFree	sqlite3.c	/^static void debugMutexFree(sqlite3_mutex *pX){$/;"	f	file:
debugMutexHeld	sqlite3.c	/^static int debugMutexHeld(sqlite3_mutex *pX){$/;"	f	file:
debugMutexInit	sqlite3.c	/^static int debugMutexInit(void){ return SQLITE_OK; }$/;"	f	file:
debugMutexLeave	sqlite3.c	/^static void debugMutexLeave(sqlite3_mutex *pX){$/;"	f	file:
debugMutexNotheld	sqlite3.c	/^static int debugMutexNotheld(sqlite3_mutex *pX){$/;"	f	file:
debugMutexTry	sqlite3.c	/^static int debugMutexTry(sqlite3_mutex *pX){$/;"	f	file:
declareVtab	sqlite3.c	/^  u8 declareVtab;            \/* True if inside sqlite3_declare_vtab() *\/$/;"	m	struct:Parse	file:
declare_vtab	sqlite3.c	/^  int (*declare_vtab)(sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
decodeFlags	sqlite3.c	/^static int decodeFlags(MemPage *pPage, int flagByte){$/;"	f	file:
deferredMoveto	sqlite3.c	/^  Bool deferredMoveto;  \/* A call to sqlite3BtreeMoveto() is needed *\/$/;"	m	struct:VdbeCursor	file:
defragmentPage	sqlite3.c	/^static int defragmentPage(MemPage *pPage){$/;"	f	file:
deleteAllocatedVector	MatrixDecomp.cpp	/^void HMM_PP::MatrixDecomp::deleteAllocatedVector(HMM_PP::LAPACKvector<double>* vec) {$/;"	f	class:HMM_PP::MatrixDecomp
deleteCell	sqlite3.c	/^static int deleteCell(Rtree *pRtree, RtreeNode *pNode, int iCell, int iHeight){$/;"	f	file:
delim	sqlite3.c	/^  char delim[128];             \/* flag ASCII delimiters *\/$/;"	m	struct:simple_tokenizer	file:
desc	sqlite3.c	/^     unsigned char desc;       \/* True for DESC.  False for ASC. *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_orderby	file:
descendToCell	sqlite3.c	/^static int descendToCell($/;"	f	file:
deserializeGeometry	sqlite3.c	/^static int deserializeGeometry(sqlite3_value *pValue, RtreeConstraint *pCons){$/;"	f	file:
destroyRootPage	sqlite3.c	/^static void destroyRootPage(Parse *pParse, int iTable, int iDb){$/;"	f	file:
destroyTable	sqlite3.c	/^static void destroyTable(Parse *pParse, Table *pTab){$/;"	f	file:
detachFunc	sqlite3.c	/^static void detachFunc($/;"	f	file:
dev	sqlite3.c	/^  dev_t dev;                  \/* Device number *\/$/;"	m	struct:unixFileId	file:
dfltLockMode	sqlite3.c	/^  u8 dfltLockMode;              \/* Default locking-mode for attached dbs *\/$/;"	m	struct:sqlite3	file:
directMode	sqlite3.c	/^  u8 directMode;          \/* Direct rendering mode means take data directly$/;"	m	struct:AggInfo	file:
dirfd	sqlite3.c	/^  int dirfd;                          \/* File descriptor for the directory *\/$/;"	m	struct:unixFile	file:
disableTerm	sqlite3.c	/^static void disableTerm(WhereLevel *pLevel, WhereTerm *pTerm){$/;"	f	file:
disableTriggers	sqlite3.c	/^  u8 disableTriggers;  \/* True to disable triggers *\/$/;"	m	struct:Parse	file:
disable_simulated_io_errors	sqlite3.c	/^void disable_simulated_io_errors(void){$/;"	f
disable_simulated_io_errors	sqlite3.c	40357;"	d	file:
disable_simulated_io_errors	sqlite3.c	8728;"	d	file:
disallow	sqlite3.c	/^  int disallow; \/* Do not allow memory allocation *\/$/;"	m	struct:__anon12	file:
displayFittedSequence	Model.cpp	/^void HMM_PP::Model::displayFittedSequence(ostream& stream) {$/;"	f	class:HMM_PP::Model
displayP4	sqlite3.c	/^static char *displayP4(Op *pOp, char *zTemp, int nTemp){$/;"	f	file:
displayViterbiFittedSequence	InferredDataFit.cpp	/^void HMM_PP::InferredDataFit::displayViterbiFittedSequence(ostream& stream) const {$/;"	f	class:HMM_PP::InferredDataFit
dnorm	ModelParams.cpp	/^real HMM_PP::ModelParams::dnorm(const BaseReal x, const BaseReal u, const BaseReal v) {$/;"	f	class:HMM_PP::ModelParams
doNotSpill	sqlite3.c	/^  u8 doNotSpill;              \/* Do not spill the cache when non-zero *\/$/;"	m	struct:Pager	file:
doNotSyncSpill	sqlite3.c	/^  u8 doNotSyncSpill;          \/* Do not do a spill that requires jrnl sync *\/$/;"	m	struct:Pager	file:
doNotUseWAL	sqlite3.c	/^  u8 doNotUseWAL;       \/* If true, do not open write-ahead-log file *\/$/;"	m	struct:BtShared	file:
doSqlite3Free	sqlite3.c	/^static void doSqlite3Free(void *p){$/;"	f	file:
doWalCallbacks	sqlite3.c	/^static int doWalCallbacks(sqlite3 *db){$/;"	f	file:
doclist	sqlite3.c	/^  Fts3Doclist doclist;$/;"	m	struct:Fts3Phrase	file:
doclist	sqlite3.c	/^} doclist;$/;"	v	typeref:struct:Fts3Doclist
done	sqlite3.c	/^    u8 done;               \/* A flag to indicate when processing is finished *\/$/;"	m	struct:ExprList::ExprList_item	file:
dotlockCheckReservedLock	sqlite3.c	/^static int dotlockCheckReservedLock(sqlite3_file *id, int *pResOut) {$/;"	f	file:
dotlockClose	sqlite3.c	/^static int dotlockClose(sqlite3_file *id) {$/;"	f	file:
dotlockLock	sqlite3.c	/^static int dotlockLock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
dotlockUnlock	sqlite3.c	/^static int dotlockUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
double	sqlite3.c	7211;"	d	file:
double	sqlite3.c	7552;"	d	file:
double	sqlite3.c	806;"	d	file:
doubleConsonant	sqlite3.c	/^static int doubleConsonant(const char *z){$/;"	f	file:
doubleToInt64	sqlite3.c	/^static i64 doubleToInt64(double r){$/;"	f	file:
downgradeAllSharedCacheTableLocks	sqlite3.c	/^static void downgradeAllSharedCacheTableLocks(Btree *p){$/;"	f	file:
downgradeAllSharedCacheTableLocks	sqlite3.c	47602;"	d	file:
dropCell	sqlite3.c	/^static void dropCell(MemPage *pPage, int idx, int sz, int *pRC){$/;"	f	file:
dropIndex	ModelWithDB.cpp	/^void HMM_PP::ModelWithDB::dropIndex() {$/;"	f	class:HMM_PP::ModelWithDB
dup8bytes	sqlite3.c	/^static char *dup8bytes(Vdbe *v, const char *in){$/;"	f	file:
dupedExprNodeSize	sqlite3.c	/^static int dupedExprNodeSize(Expr *p, int flags){$/;"	f	file:
dupedExprSize	sqlite3.c	/^static int dupedExprSize(Expr *p, int flags){$/;"	f	file:
dupedExprStructSize	sqlite3.c	/^static int dupedExprStructSize(Expr *p, int flags){$/;"	f	file:
eCoordType	sqlite3.c	/^  int eCoordType;$/;"	m	struct:Rtree	file:
eDest	sqlite3.c	/^  u8 eDest;         \/* How to dispose of the results *\/$/;"	m	struct:SelectDest	file:
eEvalmode	sqlite3.c	/^  int eEvalmode;                  \/* An FTS3_EVAL_XX constant *\/$/;"	m	struct:Fts3Cursor	file:
eFileLock	sqlite3.c	/^  unsigned char eFileLock;            \/* The type of lock held on this fd *\/$/;"	m	struct:unixFile	file:
eFileLock	sqlite3.c	/^  unsigned char eFileLock;        \/* One of SHARED_LOCK, RESERVED_LOCK etc. *\/$/;"	m	struct:unixInodeInfo	file:
eLock	sqlite3.c	/^  u8 eLock;                   \/* Current lock held on database file *\/$/;"	m	struct:Pager	file:
eLock	sqlite3.c	/^  u8 eLock;             \/* READ_LOCK or WRITE_LOCK *\/$/;"	m	struct:BtLock	file:
eOperator	sqlite3.c	/^  Token eOperator;  \/* "like" or "glob" or "regexp" *\/$/;"	m	struct:LikeOp	file:
eOperator	sqlite3.c	/^  u16 eOperator;          \/* A WO_xx value describing <op> *\/$/;"	m	struct:WhereTerm	file:
eOrconf	sqlite3.c	/^  u8 eOrconf;          \/* Default ON CONFLICT policy for trigger steps *\/$/;"	m	struct:Parse	file:
eSearch	sqlite3.c	/^  i16 eSearch;                    \/* Search strategy (see below) *\/$/;"	m	struct:Fts3Cursor	file:
eState	sqlite3.c	/^  u8 eState;                  \/* Pager state (OPEN, READER, WRITER_LOCKED..) *\/$/;"	m	struct:Pager	file:
eState	sqlite3.c	/^  u8 eState;                \/* One of the CURSOR_XXX constants (see below) *\/$/;"	m	struct:BtCursor	file:
eTriggerOp	sqlite3.c	/^  u8 eTriggerOp;       \/* TK_UPDATE, TK_INSERT or TK_DELETE *\/$/;"	m	struct:Parse	file:
eType	sqlite3.c	/^  int eType;                 \/* One of the FTSQUERY_XXX values defined below *\/$/;"	m	struct:Fts3Expr	file:
eType	sqlite3.c	/^  u8 eType;                           \/* Allocation type code *\/$/;"	m	struct:MemBlockHdr	file:
eType	sqlite3.c	/^  u8 eType;         \/* SQLITE_NULL, SQLITE_INTEGER ... etc. *\/$/;"	m	struct:IndexSample	file:
ebcdicToAscii	sqlite3.c	/^const unsigned char ebcdicToAscii[] = {$/;"	v
emissionFunc	Model.cpp	/^real HMM_PP::Model::emissionFunc(const Data* seq, const uint hidden_state, const uint t) const {$/;"	f	class:HMM_PP::Model
emissionFunc	Model.cpp	/^vector<real>* HMM_PP::Model::emissionFunc(const HMM_PP::Data* seq, const uint t) const {$/;"	f	class:HMM_PP::Model
emissionFunc	ModelParams.cpp	/^vector<real>* HMM_PP::ModelParams::emissionFunc(const HMM_PP::Data* sequence, const uint t) const {$/;"	f	class:HMM_PP::ModelParams
emissionFunc	UnivariateCategoricalModelParams.cpp	/^real HMM_PP::UnivariateCategoricalModelParams::emissionFunc(const HMM_PP::Data* sequence, const uint i, const uint t) const {$/;"	f	class:HMM_PP::UnivariateCategoricalModelParams
emissionFunc	UnivariateCategoricalModelParams.cpp	/^vector<real>* HMM_PP::UnivariateCategoricalModelParams::emissionFunc(const HMM_PP::Data* sequence, const uint t) const {$/;"	f	class:HMM_PP::UnivariateCategoricalModelParams
emissionFunc	UnivariateQuantitativeModelParams.cpp	/^real HMM_PP::UnivariateQuantitativeModelParams::emissionFunc(const HMM_PP::Data* sequence, const uint i, const uint t) const {$/;"	f	class:HMM_PP::UnivariateQuantitativeModelParams
emissionFunc	UnivariateQuantitativeModelParams.cpp	/^vector<real>* HMM_PP::UnivariateQuantitativeModelParams::emissionFunc(const HMM_PP::Data* sequence, const uint t) const {$/;"	f	class:HMM_PP::UnivariateQuantitativeModelParams
enable_shared_cache	sqlite3.c	/^  int  (*enable_shared_cache)(int);$/;"	m	struct:sqlite3_api_routines	file:
enable_simulated_io_errors	sqlite3.c	/^void enable_simulated_io_errors(void){$/;"	f
enable_simulated_io_errors	sqlite3.c	40358;"	d	file:
enable_simulated_io_errors	sqlite3.c	8729;"	d	file:
enc	sqlite3.c	/^  u8  enc;            \/* SQLITE_UTF8, SQLITE_UTF16BE, SQLITE_UTF16LE *\/$/;"	m	struct:Mem	file:
enc	sqlite3.c	/^  u8 enc;               \/* Text encoding handled by xCmp() *\/$/;"	m	struct:CollSeq	file:
enc	sqlite3.c	/^  u8 enc;              \/* Text encoding used by this database *\/$/;"	m	struct:Schema	file:
enc	sqlite3.c	/^  u8 enc;             \/* Text encoding - one of the SQLITE_UTF* values *\/$/;"	m	struct:KeyInfo	file:
endpoint	sqlite3.c	/^  FilePoint endpoint;             \/* Pointer to the end of the file *\/$/;"	m	struct:MemJournal	file:
endsWith	utils.cpp	/^bool HMM_PP::endsWith(string str, string suffix) {$/;"	f	class:HMM_PP
ensureCategoryToType	CategoricalData.cpp	/^uint HMM_PP::CategoricalData::ensureCategoryToType(const string& c) {$/;"	f	class:HMM_PP::CategoricalData
ensureCategoryToType	CategoricalData.cpp	/^vector<uint> HMM_PP::CategoricalData::ensureCategoryToType(const vector<string>& c) {$/;"	f	class:HMM_PP::CategoricalData
enterMutex	sqlite3.c	/^static void enterMutex(void){$/;"	f	file:
eof	utils.cpp	/^bool HMM_PP::istreamLineReader::eof() {$/;"	f	class:HMM_PP::istreamLineReader
errCode	sqlite3.c	/^  int errCode;                  \/* Most recent error code (SQLITE_*) *\/$/;"	m	struct:sqlite3	file:
errCode	sqlite3.c	/^  int errCode;                \/* One of several kinds of errors *\/$/;"	m	struct:Pager	file:
errMask	sqlite3.c	/^  int errMask;                  \/* & result codes with this before returning *\/$/;"	m	struct:sqlite3	file:
errMsg	sqlite3.c	/^  StrAccum errMsg;  \/* Accumulate the error message text here *\/$/;"	m	struct:IntegrityCk	file:
errcode	sqlite3.c	/^  int  (*errcode)(sqlite3*db);$/;"	m	struct:sqlite3_api_routines	file:
errlogFunc	sqlite3.c	/^static void errlogFunc($/;"	f	file:
errmsg	sqlite3.c	/^  const char * (*errmsg)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
errmsg16	sqlite3.c	/^  const void * (*errmsg16)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
errorAction	sqlite3.c	/^  u8 errorAction;         \/* Recovery action to do in case of an error *\/$/;"	m	struct:Vdbe	file:
estLog	sqlite3.c	/^static double estLog(double N){$/;"	f	file:
estimatedCost	sqlite3.c	/^  double estimatedCost;      \/* Estimated cost of using this index *\/$/;"	m	struct:sqlite3_index_info	file:
estimates	Simplex.cpp	/^HMM_PP::BaseRealVec HMM_PP::Simplex::estimates() {$/;"	f	class:HMM_PP::Simplex
etBUFSIZE	sqlite3.c	18983;"	d	file:
etByte	sqlite3.c	/^typedef unsigned char etByte;$/;"	t	file:
etCHARX	sqlite3.c	18851;"	d	file:
etDYNSTRING	sqlite3.c	18849;"	d	file:
etEXP	sqlite3.c	18845;"	d	file:
etFLOAT	sqlite3.c	18844;"	d	file:
etGENERIC	sqlite3.c	18846;"	d	file:
etINVALID	sqlite3.c	18862;"	d	file:
etORDINAL	sqlite3.c	18860;"	d	file:
etPERCENT	sqlite3.c	18850;"	d	file:
etPOINTER	sqlite3.c	18858;"	d	file:
etRADIX	sqlite3.c	18843;"	d	file:
etSIZE	sqlite3.c	18847;"	d	file:
etSQLESCAPE	sqlite3.c	18853;"	d	file:
etSQLESCAPE2	sqlite3.c	18854;"	d	file:
etSQLESCAPE3	sqlite3.c	18859;"	d	file:
etSRCLIST	sqlite3.c	18857;"	d	file:
etSTRING	sqlite3.c	18848;"	d	file:
etTOKEN	sqlite3.c	18856;"	d	file:
et_getdigit	sqlite3.c	/^static char et_getdigit(LONGDOUBLE_TYPE *val, int *cnt){$/;"	f	file:
et_info	sqlite3.c	/^typedef struct et_info {   \/* Information about each format field *\/$/;"	s	file:
et_info	sqlite3.c	/^} et_info;$/;"	t	typeref:struct:et_info	file:
evalConstExpr	sqlite3.c	/^static int evalConstExpr(Walker *pWalker, Expr *pExpr){$/;"	f	file:
exclMask	sqlite3.c	/^  u16 exclMask;              \/* Mask of exclusive locks held *\/$/;"	m	struct:unixShm	file:
exclMask	sqlite3.c	/^  u16 exclMask;              \/* Mask of exclusive locks held *\/$/;"	m	struct:winShm	file:
exclMask	sqlite3.c	/^  u32 exclMask;              \/* Mask of exclusive locks held *\/$/;"	m	struct:os2ShmLink	file:
exclMask	sqlite3.c	/^  u8 exclMask;               \/* Mask of exclusive locks held *\/$/;"	m	struct:unixShmNode	file:
exclusiveMode	sqlite3.c	/^  u8 exclusiveMode;           \/* Boolean. True if locking_mode==EXCLUSIVE *\/$/;"	m	struct:Pager	file:
exclusiveMode	sqlite3.c	/^  u8 exclusiveMode;          \/* Non-zero if connection is in exclusive mode *\/$/;"	m	struct:Wal	file:
exec	sqlite3.c	/^  int  (*exec)(sqlite3*,const char*,sqlite3_callback,void*,char**);$/;"	m	struct:sqlite3_api_routines	file:
execExecSql	sqlite3.c	/^static int execExecSql(sqlite3 *db, char **pzErrMsg, const char *zSql){$/;"	f	file:
execSql	sqlite3.c	/^static int execSql(sqlite3 *db, char **pzErrMsg, const char *zSql){$/;"	f	file:
expandBlob	sqlite3.c	56409;"	d	file:
expensive_assert	sqlite3.c	34719;"	d	file:
expensive_assert	sqlite3.c	34721;"	d	file:
expired	sqlite3.c	/^  int  (*expired)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
expired	sqlite3.c	/^  u8 expired;             \/* True if the VM needs to be recompiled *\/$/;"	m	struct:Vdbe	file:
explain	sqlite3.c	/^  u8 explain;             \/* True if EXPLAIN present on SQL command *\/$/;"	m	struct:Vdbe	file:
explain	sqlite3.c	/^  u8 explain;          \/* True if the EXPLAIN flag is found on the query *\/$/;"	m	struct:Parse	file:
explainAppendTerm	sqlite3.c	/^static void explainAppendTerm($/;"	f	file:
explainComposite	sqlite3.c	/^static void explainComposite($/;"	f	file:
explainComposite	sqlite3.c	91324;"	d	file:
explainIndexRange	sqlite3.c	/^static char *explainIndexRange(sqlite3 *db, WhereLevel *pLevel, Table *pTab){$/;"	f	file:
explainOneScan	sqlite3.c	/^static void explainOneScan($/;"	f	file:
explainOneScan	sqlite3.c	101909;"	d	file:
explainSetInteger	sqlite3.c	91282;"	d	file:
explainSetInteger	sqlite3.c	91287;"	d	file:
explainSimpleCount	sqlite3.c	/^static void explainSimpleCount($/;"	f	file:
explainSimpleCount	sqlite3.c	94114;"	d	file:
explainTempTable	sqlite3.c	/^static void explainTempTable(Parse *pParse, const char *zUsage){$/;"	f	file:
explainTempTable	sqlite3.c	91286;"	d	file:
expmask	sqlite3.c	/^  u32 expmask;            \/* Binding to these vars invalidates VM *\/$/;"	m	struct:Vdbe	file:
exprAnalyze	sqlite3.c	/^static void exprAnalyze($/;"	f	file:
exprAnalyzeAll	sqlite3.c	/^static void exprAnalyzeAll($/;"	f	file:
exprAnalyzeOrTerm	sqlite3.c	/^static void exprAnalyzeOrTerm($/;"	f	file:
exprCodeBetween	sqlite3.c	/^static void exprCodeBetween($/;"	f	file:
exprCommute	sqlite3.c	/^static void exprCommute(Parse *pParse, Expr *pExpr){$/;"	f	file:
exprDup	sqlite3.c	/^static Expr *exprDup(sqlite3 *db, Expr *p, int flags, u8 **pzBuffer){$/;"	f	file:
exprIsConst	sqlite3.c	/^static int exprIsConst(Expr *p, int initFlag){$/;"	f	file:
exprListTableUsage	sqlite3.c	/^static Bitmask exprListTableUsage(WhereMaskSet *pMaskSet, ExprList *pList){$/;"	f	file:
exprNodeIsConstant	sqlite3.c	/^static int exprNodeIsConstant(Walker *pWalker, Expr *pExpr){$/;"	f	file:
exprSelectTableUsage	sqlite3.c	/^static Bitmask exprSelectTableUsage(WhereMaskSet *pMaskSet, Select *pS){$/;"	f	file:
exprSetHeight	sqlite3.c	/^static void exprSetHeight(Expr *p){$/;"	f	file:
exprSetHeight	sqlite3.c	71573;"	d	file:
exprStructSize	sqlite3.c	/^static int exprStructSize(Expr *p){$/;"	f	file:
exprTableUsage	sqlite3.c	/^static Bitmask exprTableUsage(WhereMaskSet *pMaskSet, Expr *p){$/;"	f	file:
exprToString	sqlite3.c	/^static char *exprToString(Fts3Expr *pExpr, char *zBuf){$/;"	f	file:
exprWalkNoop	sqlite3.c	/^static int exprWalkNoop(Walker *NotUsed, Expr *NotUsed2){$/;"	f	file:
extended_errcode	sqlite3.c	/^  int (*extended_errcode)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
extended_result_codes	sqlite3.c	/^  int (*extended_result_codes)(sqlite3*,int);$/;"	m	struct:sqlite3_api_routines	file:
f	sqlite3.c	/^  float f;$/;"	m	union:RtreeCoord	file:
f_simplex	Model.cpp	/^BaseReal f_simplex(HMM_PP::BaseRealVec& v, void* d) {$/;"	f
fcntlSizeHint	sqlite3.c	/^static int fcntlSizeHint(unixFile *pFile, i64 nByte){$/;"	f	file:
fd	sqlite3.c	/^  int fd;                           \/* file desc to assoc this lock with *\/$/;"	m	struct:ByteRangeLockPB2	file:
fd	sqlite3.c	/^  int fd;                   \/* File descriptor to close *\/$/;"	m	struct:UnixUnusedFd	file:
fd	sqlite3.c	/^  sqlite3_file *fd;           \/* File descriptor for database *\/$/;"	m	struct:Pager	file:
fdatasync	sqlite3.c	27605;"	d	file:
fetchPayload	sqlite3.c	/^static const unsigned char *fetchPayload($/;"	f	file:
fetch_n	ModelWithDB.cpp	/^uint HMM_PP::ModelWithDB::fetch_n() {$/;"	f	class:HMM_PP::ModelWithDB
fetch_obs_n	ModelWithDB.cpp	/^uint HMM_PP::ModelWithDB::fetch_obs_n() {$/;"	f	class:HMM_PP::ModelWithDB
fetch_prepared	sqlwrap.cpp	/^sqlite3_stmt* SQL::fetch_prepared(const string& key) {$/;"	f	class:SQL
fileExists	utils.cpp	/^bool HMM_PP::fileExists(const string& f) {$/;"	f	class:HMM_PP
fileId	sqlite3.c	/^  struct unixFileId fileId;       \/* The lookup key *\/$/;"	m	struct:unixInodeInfo	typeref:struct:unixInodeInfo::unixFileId	file:
file_control	sqlite3.c	/^  int (*file_control)(sqlite3*,const char*,int,void*);$/;"	m	struct:sqlite3_api_routines	file:
file_format	sqlite3.c	/^  u8 file_format;      \/* Schema format version for this file *\/$/;"	m	struct:Schema	file:
fillInCell	sqlite3.c	/^static int fillInCell($/;"	f	file:
fillInUnixFile	sqlite3.c	/^static int fillInUnixFile($/;"	f	file:
filter	sqlite3.c	/^  Fts3SegFilter filter;$/;"	m	struct:Fts3auxCursor	file:
finalize	sqlite3.c	/^  int  (*finalize)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines	file:
finalize	sqlwrap.cpp	/^void SQL::finalize(sqlite3_stmt* stmt) {$/;"	f	class:SQL
finalizeAggFunctions	sqlite3.c	/^static void finalizeAggFunctions(Parse *pParse, AggInfo *pAggInfo){$/;"	f	file:
findBtree	sqlite3.c	/^static Btree *findBtree(sqlite3 *pErrorDb, sqlite3 *pDb, const char *zDb){$/;"	f	file:
findCell	sqlite3.c	48369;"	d	file:
findCellv2	sqlite3.c	48371;"	d	file:
findCollSeqEntry	sqlite3.c	/^static CollSeq *findCollSeqEntry($/;"	f	file:
findCreateFileMode	sqlite3.c	/^static int findCreateFileMode($/;"	f	file:
findElementGivenHash	sqlite3.c	/^static HashElem *findElementGivenHash($/;"	f	file:
findInodeInfo	sqlite3.c	/^static int findInodeInfo($/;"	f	file:
findLeafNode	sqlite3.c	/^static int findLeafNode(Rtree *pRtree, i64 iRowid, RtreeNode **ppLeaf){$/;"	f	file:
findNextHostParameter	sqlite3.c	/^static int findNextHostParameter(const char *zSql, int *pnToken){$/;"	f	file:
findOverflowCell	sqlite3.c	/^static u8 *findOverflowCell(MemPage *pPage, int iCell){$/;"	f	file:
findReusableFd	sqlite3.c	/^static UnixUnusedFd *findReusableFd(const char *zPath, int flags){$/;"	f	file:
findTerm	sqlite3.c	/^static WhereTerm *findTerm($/;"	f	file:
finder_type	sqlite3.c	/^typedef const sqlite3_io_methods *(*finder_type)(const char*,unixFile*);$/;"	t	file:
finishData	ModelWithDB.cpp	/^void HMM_PP::ModelWithDB::finishData(Data* d) const {$/;"	f	class:HMM_PP::ModelWithDB
finishDataAndFit	ModelWithDB.cpp	/^void HMM_PP::ModelWithDB::finishDataAndFit(InferredDataFit* idf) const {$/;"	f	class:HMM_PP::ModelWithDB
first	sqlite3.c	/^  Fts3HashElem *first;    \/* The first element of the array *\/$/;"	m	struct:Fts3Hash	file:
first	sqlite3.c	/^  HashElem *first;          \/* The first element of the array *\/$/;"	m	struct:Hash	file:
fit	Model.cpp	/^real HMM_PP::Model::fit(bool calcDigammas, bool viterbi, bool timeEvents) {$/;"	f	class:HMM_PP::Model
fit	ModelFromStreamNoStorage.cpp	/^real HMM_PP::ModelFromStreamNoStorage::fit(bool calcDigammas, bool viterbi, bool timeEvents) {$/;"	f	class:HMM_PP::ModelFromStreamNoStorage
fit	ModelWithDB.cpp	/^real HMM_PP::ModelWithDB::fit(bool calcDigammas, bool viterbi, bool timeEvents) {$/;"	f	class:HMM_PP::ModelWithDB
fitSequence	Model.cpp	/^pair<HMM_PP::InferredDataFit*, real> HMM_PP::Model::fitSequence(const Data* seq, bool calcDigammas, bool viterbi, bool timeEvents) {$/;"	f	class:HMM_PP::Model
fixBoundingBox	sqlite3.c	/^static int fixBoundingBox(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
fixLeafParent	sqlite3.c	/^static int fixLeafParent(Rtree *pRtree, RtreeNode *pLeaf){$/;"	f	file:
fkActionTrigger	sqlite3.c	/^static Trigger *fkActionTrigger($/;"	f	file:
fkLookupParent	sqlite3.c	/^static void fkLookupParent($/;"	f	file:
fkScanChildren	sqlite3.c	/^static void fkScanChildren($/;"	f	file:
fkTriggerDelete	sqlite3.c	/^static void fkTriggerDelete(sqlite3 *dbMem, Trigger *p){$/;"	f	file:
fkeyHash	sqlite3.c	/^  Hash fkeyHash;       \/* All foreign keys by referenced table name *\/$/;"	m	struct:Schema	file:
flagPragma	sqlite3.c	/^static int flagPragma(Parse *pParse, const char *zLeft, const char *zRight){$/;"	f	file:
flags	sqlite3.c	/^  etByte flags;            \/* One or more of FLAG_ constants below *\/$/;"	m	struct:et_info	file:
flags	sqlite3.c	/^  int flags;                      \/* xOpen flags *\/$/;"	m	struct:JournalFile	file:
flags	sqlite3.c	/^  int flags;                    \/* Miscellaneous flags. See below *\/$/;"	m	struct:sqlite3	file:
flags	sqlite3.c	/^  int flags;                \/* Flags provided to os2Open() *\/$/;"	m	struct:os2File	file:
flags	sqlite3.c	/^  int flags;                \/* Flags this file descriptor was opened with *\/$/;"	m	struct:UnixUnusedFd	file:
flags	sqlite3.c	/^  int flags;              \/* Copy of "flags" passed to sqlite3_blob_open() *\/$/;"	m	struct:Incrblob	file:
flags	sqlite3.c	/^  int flags;$/;"	m	struct:Fts3SegFilter	file:
flags	sqlite3.c	/^  u16 flags;                     \/* PGHDR flags defined below *\/$/;"	m	struct:PgHdr	file:
flags	sqlite3.c	/^  u16 flags;             \/* Various flags.  EP_* See below *\/$/;"	m	struct:Expr	file:
flags	sqlite3.c	/^  u16 flags;           \/* Flags associated with this schema *\/$/;"	m	struct:Schema	file:
flags	sqlite3.c	/^  u16 flags;          \/* Boolean settings.  UNPACKED_... below *\/$/;"	m	struct:UnpackedRecord	file:
flags	sqlite3.c	/^  u16 flags;          \/* Some combination of MEM_Null, MEM_Str, MEM_Dyn, etc. *\/$/;"	m	struct:Mem	file:
flags	sqlite3.c	/^  u8 flags;            \/* Some combination of SQLITE_FUNC_* *\/$/;"	m	struct:FuncDef	file:
flags2	sqlite3.c	/^  u8 flags2;             \/* Second set of flags.  EP2_... *\/$/;"	m	struct:Expr	file:
flattenSubquery	sqlite3.c	/^static int flattenSubquery($/;"	f	file:
float	sqlite3.c	7553;"	d	file:
floatSwap	sqlite3.c	/^static u64 floatSwap(u64 in){$/;"	f	file:
flockCheckReservedLock	sqlite3.c	/^static int flockCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:
flockClose	sqlite3.c	/^static int flockClose(sqlite3_file *id) {$/;"	f	file:
flockLock	sqlite3.c	/^static int flockLock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
flockUnlock	sqlite3.c	/^static int flockUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
fmtinfo	sqlite3.c	/^static const et_info fmtinfo[] = {$/;"	v	file:
fmttype	sqlite3.c	/^  char fmttype;            \/* The format field code letter *\/$/;"	m	struct:et_info	file:
forwardBackward	InferredDataFit.cpp	/^void HMM_PP::InferredDataFit::forwardBackward(bool calcDigammas) {$/;"	f	class:HMM_PP::InferredDataFit
forwardBackward_Viterbi	InferredDataFit.cpp	/^void HMM_PP::InferredDataFit::forwardBackward_Viterbi(NamedMatrix<real>::MarginalizeFunc margFunc, NamedMatrix<real>& alpha, NamedMatrix<real>& beta, NamedMatrix<real>& gamma, bool normalizeGamma) {$/;"	f	class:HMM_PP::InferredDataFit
free	sqlite3.c	/^  void  (*free)(void*);$/;"	m	struct:sqlite3_api_routines	file:
freeCursorConstraints	sqlite3.c	/^static void freeCursorConstraints(RtreeCursor *pCsr){$/;"	f	file:
freeEphemeralFunction	sqlite3.c	/^static void freeEphemeralFunction(sqlite3 *db, FuncDef *pDef){$/;"	f	file:
freeIndex	sqlite3.c	/^static void freeIndex(sqlite3 *db, Index *p){$/;"	f	file:
freeMappedMemory	MatrixDecomp.cpp	/^void HMM_PP::MatrixDecomp::freeMappedMemory(int sig) {$/;"	f	class:HMM_PP::MatrixDecomp
freeP4	sqlite3.c	/^static void freeP4(sqlite3 *db, int p4type, void *p4){$/;"	f	file:
freePage	sqlite3.c	/^static void freePage(MemPage *pPage, int *pRC){$/;"	f	file:
freePage2	sqlite3.c	/^static int freePage2(BtShared *pBt, MemPage *pMemPage, Pgno iPage){$/;"	f	file:
freeSpace	sqlite3.c	/^static int freeSpace(MemPage *pPage, int start, int size){$/;"	f	file:
freeTempSpace	sqlite3.c	/^static void freeTempSpace(BtShared *pBt){$/;"	f	file:
freeUconvObjects	sqlite3.c	/^static void freeUconvObjects( void ){$/;"	f	file:
free_table	sqlite3.c	/^  void  (*free_table)(char**result);$/;"	m	struct:sqlite3_api_routines	file:
fsFlags	sqlite3.c	/^  unsigned fsFlags;                   \/* cached details from statfs() *\/$/;"	m	struct:unixFile	file:
fts3AllocateSegdirIdx	sqlite3.c	/^static int fts3AllocateSegdirIdx($/;"	f	file:
fts3Appendf	sqlite3.c	/^static void fts3Appendf($/;"	f	file:
fts3BeginMethod	sqlite3.c	/^static int fts3BeginMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3BestIndexMethod	sqlite3.c	/^static int fts3BestIndexMethod(sqlite3_vtab *pVTab, sqlite3_index_info *pInfo){$/;"	f	file:
fts3BestSnippet	sqlite3.c	/^static int fts3BestSnippet($/;"	f	file:
fts3BinCompare	sqlite3.c	/^static int fts3BinCompare(const void *pKey1, int n1, const void *pKey2, int n2){$/;"	f	file:
fts3BinHash	sqlite3.c	/^static int fts3BinHash(const void *pKey, int nKey){$/;"	f	file:
fts3CloseMethod	sqlite3.c	/^static int fts3CloseMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3ColumnFilter	sqlite3.c	/^static void fts3ColumnFilter($/;"	f	file:
fts3ColumnMethod	sqlite3.c	/^static int fts3ColumnMethod($/;"	f	file:
fts3ColumnlistCopy	sqlite3.c	/^static void fts3ColumnlistCopy(char **pp, char **ppPoslist){$/;"	f	file:
fts3ColumnlistCount	sqlite3.c	/^static int fts3ColumnlistCount(char **ppCollist){$/;"	f	file:
fts3CommitMethod	sqlite3.c	/^static int fts3CommitMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3CompareElemByTerm	sqlite3.c	/^static int fts3CompareElemByTerm(const void *lhs, const void *rhs){$/;"	f	file:
fts3ConnectMethod	sqlite3.c	/^static int fts3ConnectMethod($/;"	f	file:
fts3CreateMethod	sqlite3.c	/^static int fts3CreateMethod($/;"	f	file:
fts3CreateTables	sqlite3.c	/^static int fts3CreateTables(Fts3Table *p){$/;"	f	file:
fts3CursorSeek	sqlite3.c	/^static int fts3CursorSeek(sqlite3_context *pContext, Fts3Cursor *pCsr){$/;"	f	file:
fts3DatabasePageSize	sqlite3.c	/^static void fts3DatabasePageSize(int *pRc, Fts3Table *p){$/;"	f	file:
fts3DbExec	sqlite3.c	/^static void fts3DbExec($/;"	f	file:
fts3DeclareVtab	sqlite3.c	/^static void fts3DeclareVtab(int *pRc, Fts3Table *p){$/;"	f	file:
fts3DecodeIntArray	sqlite3.c	/^static void fts3DecodeIntArray($/;"	f	file:
fts3DeleteAll	sqlite3.c	/^static int fts3DeleteAll(Fts3Table *p){$/;"	f	file:
fts3DeleteByRowid	sqlite3.c	/^static int fts3DeleteByRowid($/;"	f	file:
fts3DeleteSegdir	sqlite3.c	/^static int fts3DeleteSegdir($/;"	f	file:
fts3DeleteTerms	sqlite3.c	/^static void fts3DeleteTerms( $/;"	f	file:
fts3DestroyMethod	sqlite3.c	/^static int fts3DestroyMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3DisconnectMethod	sqlite3.c	/^static int fts3DisconnectMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3DoOptimize	sqlite3.c	/^static int fts3DoOptimize(Fts3Table *p, int bReturnDone){$/;"	f	file:
fts3DoclistCountDocids	sqlite3.c	/^static int fts3DoclistCountDocids(int isPoslist, char *aList, int nList){$/;"	f	file:
fts3DoclistOrMerge	sqlite3.c	/^static int fts3DoclistOrMerge($/;"	f	file:
fts3DoclistPhraseMerge	sqlite3.c	/^static void fts3DoclistPhraseMerge($/;"	f	file:
fts3EncodeIntArray	sqlite3.c	/^static void fts3EncodeIntArray($/;"	f	file:
fts3EofMethod	sqlite3.c	/^static int fts3EofMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3EvalAllocateReaders	sqlite3.c	/^static void fts3EvalAllocateReaders($/;"	f	file:
fts3EvalAverageDocsize	sqlite3.c	/^static int fts3EvalAverageDocsize(Fts3Cursor *pCsr, int *pnPage){$/;"	f	file:
fts3EvalDeferredPhrase	sqlite3.c	/^static int fts3EvalDeferredPhrase(Fts3Cursor *pCsr, Fts3Phrase *pPhrase){$/;"	f	file:
fts3EvalDeferredTest	sqlite3.c	/^static int fts3EvalDeferredTest(Fts3Cursor *pCsr, Fts3Expr *pExpr, int *pRc){$/;"	f	file:
fts3EvalGatherStats	sqlite3.c	/^static int fts3EvalGatherStats($/;"	f	file:
fts3EvalLoadDeferred	sqlite3.c	/^static int fts3EvalLoadDeferred(Fts3Cursor *pCsr, int *pRc){$/;"	f	file:
fts3EvalNearTest	sqlite3.c	/^static int fts3EvalNearTest(Fts3Expr *pExpr, int *pRc){$/;"	f	file:
fts3EvalNearTrim2	sqlite3.c	/^static int fts3EvalNearTrim2($/;"	f	file:
fts3EvalNext	sqlite3.c	/^static void fts3EvalNext($/;"	f	file:
fts3EvalPhraseLoad	sqlite3.c	/^static int fts3EvalPhraseLoad($/;"	f	file:
fts3EvalPhraseMergeToken	sqlite3.c	/^static void fts3EvalPhraseMergeToken($/;"	f	file:
fts3EvalPhraseNext	sqlite3.c	/^static int fts3EvalPhraseNext($/;"	f	file:
fts3EvalPhraseStart	sqlite3.c	/^static int fts3EvalPhraseStart(Fts3Cursor *pCsr, int bOptOk, Fts3Phrase *p){$/;"	f	file:
fts3EvalRestart	sqlite3.c	/^static void fts3EvalRestart($/;"	f	file:
fts3EvalSelectDeferred	sqlite3.c	/^static int fts3EvalSelectDeferred($/;"	f	file:
fts3EvalStartReaders	sqlite3.c	/^static void fts3EvalStartReaders($/;"	f	file:
fts3EvalTokenCosts	sqlite3.c	/^static void fts3EvalTokenCosts($/;"	f	file:
fts3EvalUpdateCounts	sqlite3.c	/^static void fts3EvalUpdateCounts(Fts3Expr *pExpr){$/;"	f	file:
fts3EvalZeroPoslist	sqlite3.c	/^static void fts3EvalZeroPoslist(Fts3Phrase *pPhrase){$/;"	f	file:
fts3ExprGlobalHitsCb	sqlite3.c	/^static int fts3ExprGlobalHitsCb($/;"	f	file:
fts3ExprIterate	sqlite3.c	/^static int fts3ExprIterate($/;"	f	file:
fts3ExprIterate2	sqlite3.c	/^static int fts3ExprIterate2($/;"	f	file:
fts3ExprLoadDoclists	sqlite3.c	/^static int fts3ExprLoadDoclists($/;"	f	file:
fts3ExprLoadDoclistsCb	sqlite3.c	/^static int fts3ExprLoadDoclistsCb(Fts3Expr *pExpr, int iPhrase, void *ctx){$/;"	f	file:
fts3ExprLocalHitsCb	sqlite3.c	/^static int fts3ExprLocalHitsCb($/;"	f	file:
fts3ExprParse	sqlite3.c	/^static int fts3ExprParse($/;"	f	file:
fts3ExprPhraseCount	sqlite3.c	/^static int fts3ExprPhraseCount(Fts3Expr *pExpr){$/;"	f	file:
fts3ExprPhraseCountCb	sqlite3.c	/^static int fts3ExprPhraseCountCb(Fts3Expr *pExpr, int iPhrase, void *ctx){$/;"	f	file:
fts3ExprTermOffsetInit	sqlite3.c	/^static int fts3ExprTermOffsetInit(Fts3Expr *pExpr, int iPhrase, void *ctx){$/;"	f	file:
fts3ExprTest	sqlite3.c	/^static void fts3ExprTest($/;"	f	file:
fts3FilterMethod	sqlite3.c	/^static int fts3FilterMethod($/;"	f	file:
fts3FindElementByHash	sqlite3.c	/^static Fts3HashElem *fts3FindElementByHash($/;"	f	file:
fts3FindFunctionMethod	sqlite3.c	/^static int fts3FindFunctionMethod($/;"	f	file:
fts3FunctionArg	sqlite3.c	/^static int fts3FunctionArg($/;"	f	file:
fts3GetDeltaPosition	sqlite3.c	/^static void fts3GetDeltaPosition(char **pp, int *piPos){$/;"	f	file:
fts3GetDeltaVarint	sqlite3.c	/^static void fts3GetDeltaVarint(char **pp, sqlite3_int64 *pVal){$/;"	f	file:
fts3GetDeltaVarint3	sqlite3.c	/^static void fts3GetDeltaVarint3($/;"	f	file:
fts3GetMatchinfo	sqlite3.c	/^static int fts3GetMatchinfo($/;"	f	file:
fts3GetReverseVarint	sqlite3.c	/^static void fts3GetReverseVarint($/;"	f	file:
fts3GobbleInt	sqlite3.c	/^static int fts3GobbleInt(const char **pp, int *pnOut){$/;"	f	file:
fts3HashClear	sqlite3.c	111767;"	d	file:
fts3HashCount	sqlite3.c	111791;"	d	file:
fts3HashData	sqlite3.c	111784;"	d	file:
fts3HashFind	sqlite3.c	111766;"	d	file:
fts3HashFindElem	sqlite3.c	111768;"	d	file:
fts3HashFirst	sqlite3.c	111782;"	d	file:
fts3HashFree	sqlite3.c	/^static void fts3HashFree(void *p){$/;"	f	file:
fts3HashInit	sqlite3.c	111764;"	d	file:
fts3HashInsert	sqlite3.c	111765;"	d	file:
fts3HashInsertElement	sqlite3.c	/^static void fts3HashInsertElement($/;"	f	file:
fts3HashKey	sqlite3.c	111785;"	d	file:
fts3HashKeysize	sqlite3.c	111786;"	d	file:
fts3HashMalloc	sqlite3.c	/^static void *fts3HashMalloc(int n){$/;"	f	file:
fts3HashNext	sqlite3.c	111783;"	d	file:
fts3InitVtab	sqlite3.c	/^static int fts3InitVtab($/;"	f	file:
fts3InsertData	sqlite3.c	/^static int fts3InsertData($/;"	f	file:
fts3InsertDocsize	sqlite3.c	/^static void fts3InsertDocsize($/;"	f	file:
fts3InsertTerms	sqlite3.c	/^static int fts3InsertTerms(Fts3Table *p, sqlite3_value **apVal, u32 *aSz){$/;"	f	file:
fts3IsEmpty	sqlite3.c	/^static int fts3IsEmpty(Fts3Table *p, sqlite3_value *pRowid, int *pisEmpty){$/;"	f	file:
fts3IsSpecialColumn	sqlite3.c	/^static int fts3IsSpecialColumn($/;"	f	file:
fts3LcsIteratorAdvance	sqlite3.c	/^static int fts3LcsIteratorAdvance(LcsIterator *pIter){$/;"	f	file:
fts3MallocZero	sqlite3.c	/^static void *fts3MallocZero(int nByte){$/;"	f	file:
fts3MatchinfoCheck	sqlite3.c	/^static int fts3MatchinfoCheck($/;"	f	file:
fts3MatchinfoFunc	sqlite3.c	/^static void fts3MatchinfoFunc($/;"	f	file:
fts3MatchinfoLcs	sqlite3.c	/^static int fts3MatchinfoLcs(Fts3Cursor *pCsr, MatchInfo *pInfo){$/;"	f	file:
fts3MatchinfoLcsCb	sqlite3.c	/^static int fts3MatchinfoLcsCb($/;"	f	file:
fts3MatchinfoSelectDoctotal	sqlite3.c	/^static int fts3MatchinfoSelectDoctotal($/;"	f	file:
fts3MatchinfoSize	sqlite3.c	/^static int fts3MatchinfoSize(MatchInfo *pInfo, char cArg){$/;"	f	file:
fts3MatchinfoValues	sqlite3.c	/^static int fts3MatchinfoValues($/;"	f	file:
fts3Module	sqlite3.c	/^static const sqlite3_module fts3Module = {$/;"	v	file:
fts3MsrBufferData	sqlite3.c	/^static int fts3MsrBufferData($/;"	f	file:
fts3NextMethod	sqlite3.c	/^static int fts3NextMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3NodeAddTerm	sqlite3.c	/^static int fts3NodeAddTerm($/;"	f	file:
fts3NodeFree	sqlite3.c	/^static void fts3NodeFree(SegmentNode *pTree){$/;"	f	file:
fts3NodeWrite	sqlite3.c	/^static int fts3NodeWrite($/;"	f	file:
fts3OffsetsFunc	sqlite3.c	/^static void fts3OffsetsFunc($/;"	f	file:
fts3OpenMethod	sqlite3.c	/^static int fts3OpenMethod(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCsr){$/;"	f	file:
fts3OptimizeFunc	sqlite3.c	/^static void fts3OptimizeFunc($/;"	f	file:
fts3PendingListAppend	sqlite3.c	/^static int fts3PendingListAppend($/;"	f	file:
fts3PendingListAppendVarint	sqlite3.c	/^static int fts3PendingListAppendVarint($/;"	f	file:
fts3PendingListDelete	sqlite3.c	/^static void fts3PendingListDelete(PendingList *pList){$/;"	f	file:
fts3PendingTermsAdd	sqlite3.c	/^static int fts3PendingTermsAdd($/;"	f	file:
fts3PendingTermsAddOne	sqlite3.c	/^static int fts3PendingTermsAddOne($/;"	f	file:
fts3PendingTermsDocid	sqlite3.c	/^static int fts3PendingTermsDocid(Fts3Table *p, sqlite_int64 iDocid){$/;"	f	file:
fts3PoslistCopy	sqlite3.c	/^static void fts3PoslistCopy(char **pp, char **ppPoslist){$/;"	f	file:
fts3PoslistMerge	sqlite3.c	/^static void fts3PoslistMerge($/;"	f	file:
fts3PoslistNearMerge	sqlite3.c	/^static int fts3PoslistNearMerge($/;"	f	file:
fts3PoslistPhraseMerge	sqlite3.c	/^static int fts3PoslistPhraseMerge($/;"	f	file:
fts3PrefixCompress	sqlite3.c	/^static int fts3PrefixCompress($/;"	f	file:
fts3PrefixParameter	sqlite3.c	/^static int fts3PrefixParameter($/;"	f	file:
fts3PutColNumber	sqlite3.c	/^static int fts3PutColNumber(char **pp, int iCol){$/;"	f	file:
fts3PutDeltaVarint	sqlite3.c	/^static void fts3PutDeltaVarint($/;"	f	file:
fts3PutDeltaVarint3	sqlite3.c	/^static void fts3PutDeltaVarint3($/;"	f	file:
fts3QuoteId	sqlite3.c	/^static char *fts3QuoteId(char const *zInput){$/;"	f	file:
fts3ReadExprList	sqlite3.c	/^static char *fts3ReadExprList(Fts3Table *p, const char *zFunc, int *pRc){$/;"	f	file:
fts3ReadNextPos	sqlite3.c	/^static void fts3ReadNextPos($/;"	f	file:
fts3ReallocOrFree	sqlite3.c	/^static void *fts3ReallocOrFree(void *pOrig, int nNew){$/;"	f	file:
fts3Rehash	sqlite3.c	/^static int fts3Rehash(Fts3Hash *pH, int new_size){$/;"	f	file:
fts3ReleaseMethod	sqlite3.c	/^static int fts3ReleaseMethod(sqlite3_vtab *pVtab, int iSavepoint){$/;"	f	file:
fts3RemoveElementByHash	sqlite3.c	/^static void fts3RemoveElementByHash($/;"	f	file:
fts3RenameMethod	sqlite3.c	/^static int fts3RenameMethod($/;"	f	file:
fts3ReversePoslist	sqlite3.c	/^static void fts3ReversePoslist(char *pStart, char **ppPoslist){$/;"	f	file:
fts3RollbackMethod	sqlite3.c	/^static int fts3RollbackMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3RollbackToMethod	sqlite3.c	/^static int fts3RollbackToMethod(sqlite3_vtab *pVtab, int iSavepoint){$/;"	f	file:
fts3RowidMethod	sqlite3.c	/^static int fts3RowidMethod(sqlite3_vtab_cursor *pCursor, sqlite_int64 *pRowid){$/;"	f	file:
fts3SavepointMethod	sqlite3.c	/^static int fts3SavepointMethod(sqlite3_vtab *pVtab, int iSavepoint){$/;"	f	file:
fts3ScanInteriorNode	sqlite3.c	/^static int fts3ScanInteriorNode($/;"	f	file:
fts3SegReaderCmp	sqlite3.c	/^static int fts3SegReaderCmp(Fts3SegReader *pLhs, Fts3SegReader *pRhs){$/;"	f	file:
fts3SegReaderCursor	sqlite3.c	/^static int fts3SegReaderCursor($/;"	f	file:
fts3SegReaderCursorAddZero	sqlite3.c	/^static int fts3SegReaderCursorAddZero($/;"	f	file:
fts3SegReaderCursorAppend	sqlite3.c	/^static int fts3SegReaderCursorAppend($/;"	f	file:
fts3SegReaderCursorFree	sqlite3.c	/^static void fts3SegReaderCursorFree(Fts3MultiSegReader *pSegcsr){$/;"	f	file:
fts3SegReaderDoclistCmp	sqlite3.c	/^static int fts3SegReaderDoclistCmp(Fts3SegReader *pLhs, Fts3SegReader *pRhs){$/;"	f	file:
fts3SegReaderDoclistCmpRev	sqlite3.c	/^static int fts3SegReaderDoclistCmpRev(Fts3SegReader *pLhs, Fts3SegReader *pRhs){$/;"	f	file:
fts3SegReaderFirstDocid	sqlite3.c	/^static int fts3SegReaderFirstDocid(Fts3Table *pTab, Fts3SegReader *pReader){$/;"	f	file:
fts3SegReaderIncrRead	sqlite3.c	/^static int fts3SegReaderIncrRead(Fts3SegReader *pReader){$/;"	f	file:
fts3SegReaderIsPending	sqlite3.c	119757;"	d	file:
fts3SegReaderIsRootOnly	sqlite3.c	119758;"	d	file:
fts3SegReaderNext	sqlite3.c	/^static int fts3SegReaderNext($/;"	f	file:
fts3SegReaderNextDocid	sqlite3.c	/^static int fts3SegReaderNextDocid($/;"	f	file:
fts3SegReaderRequire	sqlite3.c	/^static int fts3SegReaderRequire(Fts3SegReader *pReader, char *pFrom, int nByte){$/;"	f	file:
fts3SegReaderSort	sqlite3.c	/^static void fts3SegReaderSort($/;"	f	file:
fts3SegReaderStart	sqlite3.c	/^static int fts3SegReaderStart($/;"	f	file:
fts3SegReaderTermCmp	sqlite3.c	/^static int fts3SegReaderTermCmp($/;"	f	file:
fts3SegWriterAdd	sqlite3.c	/^static int fts3SegWriterAdd($/;"	f	file:
fts3SegWriterFlush	sqlite3.c	/^static int fts3SegWriterFlush($/;"	f	file:
fts3SegWriterFree	sqlite3.c	/^static void fts3SegWriterFree(SegmentWriter *pWriter){$/;"	f	file:
fts3SegmentMaxLevel	sqlite3.c	/^static int fts3SegmentMaxLevel(Fts3Table *p, int iIndex, int *pnMax){$/;"	f	file:
fts3SegmentMerge	sqlite3.c	/^static int fts3SegmentMerge(Fts3Table *p, int iIndex, int iLevel){$/;"	f	file:
fts3SelectDocsize	sqlite3.c	/^static int fts3SelectDocsize($/;"	f	file:
fts3SelectLeaf	sqlite3.c	/^static int fts3SelectLeaf($/;"	f	file:
fts3SnippetAdvance	sqlite3.c	/^static void fts3SnippetAdvance(char **ppIter, int *piIter, int iNext){$/;"	f	file:
fts3SnippetDetails	sqlite3.c	/^static void fts3SnippetDetails($/;"	f	file:
fts3SnippetFindPositions	sqlite3.c	/^static int fts3SnippetFindPositions(Fts3Expr *pExpr, int iPhrase, void *ctx){$/;"	f	file:
fts3SnippetFunc	sqlite3.c	/^static void fts3SnippetFunc($/;"	f	file:
fts3SnippetNextCandidate	sqlite3.c	/^static int fts3SnippetNextCandidate(SnippetIter *pIter){$/;"	f	file:
fts3SnippetShift	sqlite3.c	/^static int fts3SnippetShift($/;"	f	file:
fts3SnippetText	sqlite3.c	/^static int fts3SnippetText($/;"	f	file:
fts3SpecialInsert	sqlite3.c	/^static int fts3SpecialInsert(Fts3Table *p, sqlite3_value *pVal){$/;"	f	file:
fts3SqlExec	sqlite3.c	/^static void fts3SqlExec($/;"	f	file:
fts3SqlStmt	sqlite3.c	/^static int fts3SqlStmt($/;"	f	file:
fts3StrCompare	sqlite3.c	/^static int fts3StrCompare(const void *pKey1, int n1, const void *pKey2, int n2){$/;"	f	file:
fts3StrHash	sqlite3.c	/^static int fts3StrHash(const void *pKey, int nKey){$/;"	f	file:
fts3StringAppend	sqlite3.c	/^static int fts3StringAppend($/;"	f	file:
fts3SyncMethod	sqlite3.c	/^static int fts3SyncMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3TermSelect	sqlite3.c	/^static int fts3TermSelect($/;"	f	file:
fts3TermSelectCb	sqlite3.c	/^static int fts3TermSelectCb($/;"	f	file:
fts3TermSelectMerge	sqlite3.c	/^static int fts3TermSelectMerge(Fts3Table *p, TermSelect *pTS){$/;"	f	file:
fts3TreeFinishNode	sqlite3.c	/^static int fts3TreeFinishNode($/;"	f	file:
fts3UpdateDocTotals	sqlite3.c	/^static void fts3UpdateDocTotals($/;"	f	file:
fts3UpdateMethod	sqlite3.c	/^static int fts3UpdateMethod($/;"	f	file:
fts3WriteExprList	sqlite3.c	/^static char *fts3WriteExprList(Fts3Table *p, const char *zFunc, int *pRc){$/;"	f	file:
fts3WriteSegdir	sqlite3.c	/^static int fts3WriteSegdir($/;"	f	file:
fts3WriteSegment	sqlite3.c	/^static int fts3WriteSegment($/;"	f	file:
fts3_isalnum	sqlite3.c	/^static int fts3_isalnum(int x){$/;"	f	file:
fts3auxBestIndexMethod	sqlite3.c	/^static int fts3auxBestIndexMethod($/;"	f	file:
fts3auxCloseMethod	sqlite3.c	/^static int fts3auxCloseMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3auxColumnMethod	sqlite3.c	/^static int fts3auxColumnMethod($/;"	f	file:
fts3auxConnectMethod	sqlite3.c	/^static int fts3auxConnectMethod($/;"	f	file:
fts3auxDisconnectMethod	sqlite3.c	/^static int fts3auxDisconnectMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3auxEofMethod	sqlite3.c	/^static int fts3auxEofMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3auxFilterMethod	sqlite3.c	/^static int fts3auxFilterMethod($/;"	f	file:
fts3auxGrowStatArray	sqlite3.c	/^static int fts3auxGrowStatArray(Fts3auxCursor *pCsr, int nSize){$/;"	f	file:
fts3auxNextMethod	sqlite3.c	/^static int fts3auxNextMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3auxOpenMethod	sqlite3.c	/^static int fts3auxOpenMethod(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCsr){$/;"	f	file:
fts3auxRowidMethod	sqlite3.c	/^static int fts3auxRowidMethod($/;"	f	file:
fts3isspace	sqlite3.c	/^static int fts3isspace(char c){$/;"	f	file:
ftsCompareFunction	sqlite3.c	/^static int (*ftsCompareFunction(int keyClass))(const void*,int,const void*,int){$/;"	f	file:
ftsHashFunction	sqlite3.c	/^static int (*ftsHashFunction(int keyClass))(const void*,int){$/;"	f	file:
fullSync	sqlite3.c	/^  u8 fullSync;                \/* Do extra syncs of the journal for robustness *\/$/;"	m	struct:Pager	file:
full_fsync	sqlite3.c	/^static int full_fsync(int fd, int fullSync, int dataOnly){$/;"	f	file:
functionDestroy	sqlite3.c	/^static void functionDestroy(sqlite3 *db, FuncDef *p){$/;"	f	file:
functionSearch	sqlite3.c	/^static FuncDef *functionSearch($/;"	f	file:
g_elapsed	sqlite3.c	/^static sqlite_uint64 g_elapsed;$/;"	v	file:
g_start	sqlite3.c	/^static sqlite_uint64 g_start;$/;"	v	file:
generateColumnNames	sqlite3.c	/^static void generateColumnNames($/;"	f	file:
generateColumnTypes	sqlite3.c	/^static void generateColumnTypes($/;"	f	file:
generateOutputSubroutine	sqlite3.c	/^static int generateOutputSubroutine($/;"	f	file:
generateSortTail	sqlite3.c	/^static void generateSortTail($/;"	f	file:
geomCallback	sqlite3.c	/^static void geomCallback(sqlite3_context *ctx, int nArg, sqlite3_value **aArg){$/;"	f	file:
get2byte	sqlite3.c	47234;"	d	file:
get2byteNotZero	sqlite3.c	47555;"	d	file:
get4byte	sqlite3.c	47236;"	d	file:
getAllStatesList	InferredDataFit.cpp	/^set<uint>* HMM_PP::InferredDataFit::getAllStatesList() const {$/;"	f	class:HMM_PP::InferredDataFit
getAlpha	InferredDataFit.cpp	/^real HMM_PP::InferredDataFit::getAlpha(const uint t, const uint i) const {$/;"	f	class:HMM_PP::InferredDataFit
getAndInitPage	sqlite3.c	/^static int getAndInitPage($/;"	f	file:
getAutoVacuum	sqlite3.c	/^static int getAutoVacuum(const char *z){$/;"	f	file:
getBeta	InferredDataFit.cpp	/^real HMM_PP::InferredDataFit::getBeta(const uint t, const uint i) const {$/;"	f	class:HMM_PP::InferredDataFit
getCellInfo	sqlite3.c	/^  static void getCellInfo(BtCursor *pCur){$/;"	f	file:
getCellInfo	sqlite3.c	51139;"	d	file:
getData	ModelFromStream.cpp	/^const HMM_PP::Data* HMM_PP::ModelFromStream::getData(const uint i) {$/;"	f	class:HMM_PP::ModelFromStream
getData	ModelWithDB.cpp	/^const HMM_PP::Data* HMM_PP::ModelWithDB::getData(const uint i) {$/;"	f	class:HMM_PP::ModelWithDB
getDataFitResult	ModelFromStream.cpp	/^HMM_PP::InferredDataFit* HMM_PP::ModelFromStream::getDataFitResult(const uint i) {$/;"	f	class:HMM_PP::ModelFromStream
getDataFitResult	ModelWithDB.cpp	/^HMM_PP::InferredDataFit* HMM_PP::ModelWithDB::getDataFitResult(const uint i) {$/;"	f	class:HMM_PP::ModelWithDB
getDigamma	InferredDataFit.cpp	/^real HMM_PP::InferredDataFit::getDigamma(const uint t, const uint i, const uint j) const {$/;"	f	class:HMM_PP::InferredDataFit
getDigits	sqlite3.c	/^static int getDigits(const char *zDate, ...){$/;"	f	file:
getGamma	InferredDataFit.cpp	/^real HMM_PP::InferredDataFit::getGamma(const uint t, const uint i) const {$/;"	f	class:HMM_PP::InferredDataFit
getGaussianParams	UnivariateQuantitativeModelParams.cpp	/^void HMM_PP::UnivariateQuantitativeModelParams::getGaussianParams(BaseRealVec& v) const {$/;"	f	class:HMM_PP::UnivariateQuantitativeModelParams
getHomogeneousStationaryProbs	HomogeneousModelParams.cpp	/^HMM_PP::BaseRealVec HMM_PP::HomogeneousModelParams::getHomogeneousStationaryProbs() const {$/;"	f	class:HMM_PP::HomogeneousModelParams
getIntFromStmt	sqlite3.c	/^static int getIntFromStmt(sqlite3 *db, const char *zSql, int *piVal){$/;"	f	file:
getIstreamLineReaderFromFile	utils.cpp	/^HMM_PP::istreamLineReader* HMM_PP::utils::getIstreamLineReaderFromFile(string file, bool requireNamedFile) {$/;"	f	class:HMM_PP::utils
getLastErrorMsg	sqlite3.c	/^static int getLastErrorMsg(int nBuf, char *zBuf){$/;"	f	file:
getLockingMode	sqlite3.c	/^static int getLockingMode(const char *z){$/;"	f	file:
getMask	sqlite3.c	/^static Bitmask getMask(WhereMaskSet *pMaskSet, int iCursor){$/;"	f	file:
getNextNode	sqlite3.c	/^static int getNextNode($/;"	f	file:
getNextString	sqlite3.c	/^static int getNextString($/;"	f	file:
getNextToken	sqlite3.c	/^static int getNextToken($/;"	f	file:
getNodeSize	sqlite3.c	/^static int getNodeSize($/;"	f	file:
getOstreamWriterFromFile	utils.cpp	/^HMM_PP::ostreamWriter* HMM_PP::utils::getOstreamWriterFromFile(string file) {$/;"	f	class:HMM_PP::utils
getOverflowPage	sqlite3.c	/^static int getOverflowPage($/;"	f	file:
getReadLock	sqlite3.c	/^static int getReadLock( os2File *pFile ){$/;"	f	file:
getReadLock	sqlite3.c	/^static int getReadLock(winFile *pFile){$/;"	f	file:
getRowTrigger	sqlite3.c	/^static TriggerPrg *getRowTrigger($/;"	f	file:
getSafetyLevel	sqlite3.c	/^static u8 getSafetyLevel(const char *z){$/;"	f	file:
getSectorSize	sqlite3.c	/^static int getSectorSize($/;"	f	file:
getTempStore	sqlite3.c	/^static int getTempStore(const char *z){$/;"	f	file:
getTempname	sqlite3.c	/^static int getTempname(int nBuf, char *zBuf ){$/;"	f	file:
getTempname	sqlite3.c	/^static int getTempname(int nBuf, char *zBuf){$/;"	f	file:
getTransMatParams	HomogeneousModelParams.cpp	/^void HMM_PP::HomogeneousModelParams::getTransMatParams(BaseRealVec& v) const {$/;"	f	class:HMM_PP::HomogeneousModelParams
getUniformStartProbs	ModelParams.cpp	/^HMM_PP::BaseRealVec HMM_PP::ModelParams::HiddenStateParams::getUniformStartProbs() const {$/;"	f	class:HMM_PP::ModelParams::HiddenStateParams
getVariableParams	UnivariateCategoricalModelParams.cpp	/^HMM_PP::BaseRealVec HMM_PP::UnivariateCategoricalModelParams::getVariableParams() const {$/;"	f	class:HMM_PP::UnivariateCategoricalModelParams
getVariableParams	UnivariateQuantitativeModelParams.cpp	/^HMM_PP::BaseRealVec HMM_PP::UnivariateQuantitativeModelParams::getVariableParams() const {$/;"	f	class:HMM_PP::UnivariateQuantitativeModelParams
getVarint	sqlite3.c	11522;"	d	file:
getVarint32	sqlite3.c	11520;"	d	file:
getViterbiPath	InferredDataFit.cpp	/^uint HMM_PP::InferredDataFit::getViterbiPath(const uint t) const {$/;"	f	class:HMM_PP::InferredDataFit
getViterbiSegments	InferredDataFit.cpp	/^vector<HMM_PP::ullintPair> HMM_PP::InferredDataFit::getViterbiSegments(const set<uint>* excludeSegmentTypes, const set<uint>* forceSegmentBreakInds) const {$/;"	f	class:HMM_PP::InferredDataFit
get_autocommit	sqlite3.c	/^  int  (*get_autocommit)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
get_auxdata	sqlite3.c	/^  void * (*get_auxdata)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines	file:
get_blob	sqlwrap.cpp	/^blob SQL::get_blob(sqlite3_stmt* stmt, int idx) {$/;"	f	class:SQL
get_double	sqlwrap.cpp	/^double SQL::get_double(sqlite3_stmt* stmt, int idx) {$/;"	f	class:SQL
get_int	sqlwrap.cpp	/^int SQL::get_int(sqlite3_stmt* stmt, int idx) {$/;"	f	class:SQL
get_int64	sqlwrap.cpp	/^sqlite_int64 SQL::get_int64(sqlite3_stmt* stmt, int idx) {$/;"	f	class:SQL
get_table	sqlite3.c	/^  int  (*get_table)(sqlite3*,const char*,char***,int*,int*,char**);$/;"	m	struct:sqlite3_api_routines	file:
get_text	sqlwrap.cpp	/^string SQL::get_text( sqlite3_stmt* stmt, int idx) {$/;"	f	class:SQL
globInfo	sqlite3.c	/^static const struct compareInfo globInfo = { '*', '?', '[', 0 };$/;"	v	typeref:struct:compareInfo	file:
global_recover	sqlite3.c	/^  int  (*global_recover)(void);$/;"	m	struct:sqlite3_api_routines	file:
groupConcatFinalize	sqlite3.c	/^static void groupConcatFinalize(sqlite3_context *context){$/;"	f	file:
groupConcatStep	sqlite3.c	/^static void groupConcatStep($/;"	f	file:
growOpArray	sqlite3.c	/^static int growOpArray(Vdbe *p){$/;"	f	file:
growVTrans	sqlite3.c	/^static int growVTrans(sqlite3 *db){$/;"	f	file:
grp	sqlite3.c	/^  PGroup grp;                    \/* The global PGroup for mode (2) *\/$/;"	m	struct:PCacheGlobal	file:
h	sqlite3.c	/^  HANDLE h;               \/* Handle for accessing the file *\/$/;"	m	struct:winFile	file:
h	sqlite3.c	/^  HFILE h;                  \/* Handle for accessing the file *\/$/;"	m	struct:os2File	file:
h	sqlite3.c	/^  int h, m;          \/* Hour and minutes *\/$/;"	m	struct:DateTime	file:
h	sqlite3.c	/^  int h;                              \/* The file descriptor *\/$/;"	m	struct:unixFile	file:
h	sqlite3.c	/^  int h;                     \/* Open file descriptor *\/$/;"	m	struct:unixShmNode	file:
hFile	sqlite3.c	/^  winFile hFile;             \/* File handle from winOpen *\/$/;"	m	struct:winShmNode	file:
hLockFile	sqlite3.c	/^  HFILE hLockFile;           \/* File used for inter-process memory locking *\/$/;"	m	struct:os2ShmNode	file:
hMap	sqlite3.c	/^    HANDLE hMap;             \/* File handle from CreateFileMapping *\/$/;"	m	struct:winShmNode::ShmRegion	file:
hMutex	sqlite3.c	/^  HANDLE hMutex;          \/* Mutex used to control access to shared lock *\/  $/;"	m	struct:winFile	file:
hPending	sqlite3.c	/^    Fts3Hash hPending;            \/* Pending terms table for this index *\/$/;"	m	struct:Fts3Table::Fts3Index	file:
hShared	sqlite3.c	/^  HANDLE hShared;         \/* Shared memory segment used for locking *\/$/;"	m	struct:winFile	file:
hasAgg	sqlite3.c	/^  u8 hasAgg;           \/* True if aggregates are seen *\/$/;"	m	struct:NameContext	file:
hasData	sqlite3.c	/^  u8 hasData;          \/* True if this page stores data *\/$/;"	m	struct:MemPage	file:
hasDigamma	InferredDataFit.cpp	/^bool HMM_PP::InferredDataFit::hasDigamma() const {$/;"	f	class:HMM_PP::InferredDataFit
hasHotJournal	sqlite3.c	/^static int hasHotJournal(Pager *pPager, int *pExists){$/;"	f	file:
hasMutex	sqlite3.c	/^  u8 hasMutex;               \/* True if holding the unixShmNode mutex *\/$/;"	m	struct:unixShm	file:
hasMutex	sqlite3.c	/^  u8 hasMutex;               \/* True if holding the winShmNode mutex *\/$/;"	m	struct:winShm	file:
hasReadConflicts	sqlite3.c	/^static int hasReadConflicts(Btree *pBtree, Pgno iRoot){$/;"	f	file:
hasReadConflicts	sqlite3.c	47604;"	d	file:
hasSharedCacheTableLock	sqlite3.c	/^static int hasSharedCacheTableLock($/;"	f	file:
hasSharedCacheTableLock	sqlite3.c	47603;"	d	file:
hasViterbi	InferredDataFit.cpp	/^bool HMM_PP::InferredDataFit::hasViterbi() const {$/;"	f	class:HMM_PP::InferredDataFit
hasVowel	sqlite3.c	/^static int hasVowel(const char *z){$/;"	f	file:
hashDestroy	sqlite3.c	/^static void hashDestroy(void *p){$/;"	f	file:
hdr	sqlite3.c	/^    } hdr;$/;"	m	union:Mem3Block::__anon13	typeref:struct:Mem3Block::__anon13::__anon14	file:
hdr	sqlite3.c	/^  WalIndexHdr hdr;           \/* Wal-index header for current transaction *\/$/;"	m	struct:Wal	file:
hdrOffset	sqlite3.c	/^  u8 hdrOffset;        \/* 100 for page 1.  0 otherwise *\/$/;"	m	struct:MemPage	file:
heightOfExpr	sqlite3.c	/^static void heightOfExpr(Expr *p, int *pnHeight){$/;"	f	file:
heightOfExprList	sqlite3.c	/^static void heightOfExprList(ExprList *p, int *pnHeight){$/;"	f	file:
heightOfSelect	sqlite3.c	/^static void heightOfSelect(Select *p, int *pnHeight){$/;"	f	file:
hexFunc	sqlite3.c	/^static void hexFunc($/;"	f	file:
hexdigits	sqlite3.c	/^static const char hexdigits[] = {$/;"	v	file:
hlmask	sqlite3.c	/^  u64 hlmask;                     \/* Mask of snippet terms to highlight *\/$/;"	m	struct:SnippetFragment	file:
ht	sqlite3.c	/^  } *ht;$/;"	m	struct:Fts3Hash	typeref:struct:Fts3Hash::_fts3ht	file:
ht	sqlite3.c	/^  } *ht;$/;"	m	struct:Hash	typeref:struct:Hash::_ht	file:
ht_slot	sqlite3.c	/^typedef u16 ht_slot;$/;"	t	file:
htsize	sqlite3.c	/^  int htsize;             \/* Number of buckets in the hash table *\/$/;"	m	struct:Fts3Hash	file:
htsize	sqlite3.c	/^  unsigned int htsize;      \/* Number of buckets in the hash table *\/$/;"	m	struct:Hash	file:
i	sqlite3.c	/^    i64 i;              \/* Integer value used when MEM_Int is set in flags *\/$/;"	m	union:Mem::__anon11	file:
i	sqlite3.c	/^    int i;                                     \/* Integer value *\/$/;"	m	union:Walker::__anon10	file:
i	sqlite3.c	/^    int i;                 \/* Integer value if p4type==P4_INT32 *\/$/;"	m	union:VdbeOp::__anon1	file:
i	sqlite3.c	/^  int i;$/;"	m	union:RtreeCoord	file:
i	sqlite3.c	/^  unsigned char i, j;            \/* State variables *\/$/;"	m	struct:sqlite3PrngType	file:
i16	sqlite3.c	/^typedef INT16_TYPE i16;            \/* 2-byte signed integer *\/$/;"	t	file:
i16	sqlite3.c	/^typedef short int i16;            \/* 2-byte (or larger) signed integer *\/$/;"	t	file:
i64	sqlite3.c	/^typedef sqlite3_int64 i64;$/;"	t	file:
i64	sqlite3.c	/^typedef sqlite_int64 i64;          \/* 8-byte signed integer *\/$/;"	t	file:
i8	sqlite3.c	/^typedef INT8_TYPE i8;              \/* 1-byte signed integer *\/$/;"	t	file:
iAddr	sqlite3.c	/^  int iAddr;                 \/* Address of next instruction to return *\/$/;"	m	struct:VdbeOpIter	file:
iAgg	sqlite3.c	/^  i16 iAgg;              \/* Which entry in pAggInfo->aCol[] or ->aFunc[] *\/$/;"	m	struct:Expr	file:
iAlias	sqlite3.c	/^    u16 iAlias;            \/* Index into Parse.aAlias[] for zName *\/$/;"	m	struct:ExprList::ExprList_item	file:
iBatch	sqlite3.c	/^  u8 iBatch;                     \/* Current insert batch *\/$/;"	m	struct:RowSet	file:
iBreak	sqlite3.c	/^  int iBreak;                    \/* Jump here to break out of the loop *\/$/;"	m	struct:WhereInfo	file:
iCacheCnt	sqlite3.c	/^  int iCacheCnt;       \/* Counter used to generate aColCache[].lru values *\/$/;"	m	struct:Parse	file:
iCacheLevel	sqlite3.c	/^  int iCacheLevel;     \/* ColCache valid when aColCache[].iLevel<=iCacheLevel *\/$/;"	m	struct:Parse	file:
iCallback	sqlite3.c	/^  u32 iCallback;             \/* Value to pass to log callback (or 0) *\/$/;"	m	struct:Wal	file:
iCell	sqlite3.c	/^  int iCell;                        \/* Index of current cell in pNode *\/$/;"	m	struct:RtreeCursor	file:
iChange	sqlite3.c	/^  u32 iChange;                    \/* Counter incremented each transaction *\/$/;"	m	struct:WalIndexHdr	file:
iCol	sqlite3.c	/^    u16 iCol;              \/* For ORDER BY, column number in result set *\/$/;"	m	struct:ExprList::ExprList_item	file:
iCol	sqlite3.c	/^  int iCol;                       \/* Column of table to populate aTerm for *\/$/;"	m	struct:TermOffsetCtx	file:
iCol	sqlite3.c	/^  int iCol;                       \/* Column snippet is extracted from *\/$/;"	m	struct:SnippetFragment	file:
iCol	sqlite3.c	/^  int iCol;                       \/* Column token must occur in *\/$/;"	m	struct:Fts3DeferredToken	file:
iCol	sqlite3.c	/^  int iCol;                       \/* Current value of 'col' column *\/$/;"	m	struct:Fts3auxCursor	file:
iCol	sqlite3.c	/^  int iCol;                       \/* Extract snippet from this column *\/$/;"	m	struct:SnippetIter	file:
iCol	sqlite3.c	/^  int iCol;                       \/* The column the token must match *\/$/;"	m	struct:Fts3TokenAndCost	file:
iCol	sqlite3.c	/^  int iCol;               \/* Table column this handle is open on *\/$/;"	m	struct:Incrblob	file:
iCol	sqlite3.c	/^  int iCol;$/;"	m	struct:Fts3SegFilter	file:
iColCache	sqlite3.c	/^  u8 iColCache;        \/* Next entry of the cache to replace *\/$/;"	m	struct:Parse	file:
iColFilter	sqlite3.c	/^  int iColFilter;                 \/* If >=0, filter for this column *\/$/;"	m	struct:Fts3MultiSegReader	file:
iColumn	sqlite3.c	/^     int iColumn;              \/* Column number *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_orderby	file:
iColumn	sqlite3.c	/^     int iColumn;              \/* Column on left-hand side of constraint *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	file:
iColumn	sqlite3.c	/^    int iColumn;             \/* Column number within the source table *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
iColumn	sqlite3.c	/^    int iColumn;          \/* Table column number *\/$/;"	m	struct:Parse::yColCache	file:
iColumn	sqlite3.c	/^  int iColumn;               \/* Index of column this phrase must match *\/$/;"	m	struct:Fts3Phrase	file:
iColumn	sqlite3.c	/^  ynVar iColumn;         \/* TK_COLUMN: column index.  -1 for rowid.$/;"	m	struct:Expr	file:
iContinue	sqlite3.c	/^  int iContinue;                 \/* Jump here to continue with next record *\/$/;"	m	struct:WhereInfo	file:
iCoord	sqlite3.c	/^  int iCoord;                     \/* Index of constrained coordinate *\/$/;"	m	struct:RtreeConstraint	file:
iCur	sqlite3.c	/^        int iCur;              \/* The VDBE cursor used by this IN operator *\/$/;"	m	struct:WhereLevel::__anon7::__anon8::InLoop	file:
iCurrent	sqlite3.c	/^  int iCurrent;                   \/* First token of current snippet *\/$/;"	m	struct:SnippetIter	file:
iCurrentBlock	sqlite3.c	/^  sqlite3_int64 iCurrentBlock;    \/* Current leaf block (or 0) *\/$/;"	m	struct:Fts3SegReader	file:
iCursor	sqlite3.c	/^    int iCursor;      \/* The VDBE cursor number used to access this table *\/$/;"	m	struct:SrcList::SrcList_item	file:
iDb	sqlite3.c	/^    int iDb;                    \/* When back is being initialized *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	file:
iDb	sqlite3.c	/^  int iDb;              \/* Index in sqlite3.aDb[] of database holding pTab *\/$/;"	m	struct:AutoincInfo	file:
iDb	sqlite3.c	/^  int iDb;              \/* Index of cursor database in db->aDb[] (or -1) *\/$/;"	m	struct:VdbeCursor	file:
iDb	sqlite3.c	/^  int iDb;             \/* The database containing the table to be locked *\/$/;"	m	struct:TableLock	file:
iDb	sqlite3.c	/^  int iDb;            \/* 0 for main database.  1 for TEMP, 2.. for ATTACHed *\/$/;"	m	struct:__anon9	file:
iDefaultCol	sqlite3.c	/^  int iDefaultCol;                    \/* Default column to query *\/$/;"	m	struct:ParseContext	file:
iDepth	sqlite3.c	/^  int iDepth;                 \/* Current depth of the r-tree structure *\/$/;"	m	struct:Rtree	file:
iDestSchema	sqlite3.c	/^  u32 iDestSchema;         \/* Original schema cookie in destination *\/$/;"	m	struct:sqlite3_backup	file:
iDistinct	sqlite3.c	/^    int iDistinct;           \/* Ephemeral table used to enforce DISTINCT *\/$/;"	m	struct:AggInfo::AggInfo_func	file:
iDivisor	sqlite3.c	/^  u32 iDivisor;   \/* Number of bits handled by each apSub[] entry. *\/$/;"	m	struct:Bitvec	file:
iDocid	sqlite3.c	/^  sqlite3_int64 iDocid;          \/* Current docid (if pList!=0) *\/$/;"	m	struct:Fts3Doclist	file:
iDocid	sqlite3.c	/^  sqlite3_int64 iDocid;      \/* Current docid *\/$/;"	m	struct:Fts3Expr	file:
iDocid	sqlite3.c	/^  sqlite3_int64 iDocid;$/;"	m	struct:Fts3SegReader	file:
iDocid	sqlite3.c	/^  sqlite3_int64 iDocid;$/;"	m	struct:TermOffsetCtx	file:
iDoclistToken	sqlite3.c	/^  int iDoclistToken;$/;"	m	struct:Fts3Phrase	file:
iECursor	sqlite3.c	/^  int iECursor;          \/* VDBE Cursor associated with this ExprList *\/$/;"	m	struct:ExprList	file:
iEndBlock	sqlite3.c	/^  sqlite3_int64 iEndBlock;        \/* Rowid of final block in segment (or 0) *\/$/;"	m	struct:Fts3SegReader	file:
iFirst	sqlite3.c	/^  sqlite3_int64 iFirst;           \/* First slot in %_segments written *\/$/;"	m	struct:SegmentWriter	file:
iForeGuard	sqlite3.c	/^  int iForeGuard;                     \/* Guard word for sanity *\/$/;"	m	struct:MemBlockHdr	file:
iFree	sqlite3.c	/^  sqlite3_int64 iFree;            \/* Next free slot in %_segments *\/$/;"	m	struct:SegmentWriter	file:
iFrom	sqlite3.c	/^    int iFrom;         \/* Index of column in pFrom *\/$/;"	m	struct:FKey::sColMap	file:
iFrom	sqlite3.c	/^  u8 iFrom;             \/* Which entry in the FROM clause *\/$/;"	m	struct:WhereLevel	file:
iGeneration	sqlite3.c	/^  int iGeneration;     \/* Generation counter.  Incremented with each change *\/$/;"	m	struct:Schema	file:
iHdrOffset	sqlite3.c	/^  i64 iHdrOffset;              \/* See above *\/$/;"	m	struct:PagerSavepoint	file:
iHead	sqlite3.c	/^  int iHead;                      \/* Next value in position list *\/$/;"	m	struct:SnippetPhrase	file:
iIdx	sqlite3.c	/^  int iIdx;                       \/* Index within level, or 0x7FFFFFFF for PT *\/$/;"	m	struct:Fts3SegReader	file:
iIdxCur	sqlite3.c	/^  int iIdxCur;          \/* The VDBE cursor used to access pIdx *\/$/;"	m	struct:WhereLevel	file:
iJD	sqlite3.c	/^  sqlite3_int64 iJD; \/* The julian day number times 86400000 *\/$/;"	m	struct:DateTime	file:
iKey	sqlite3.c	/^  unsigned int iKey;             \/* Key value (page number) *\/$/;"	m	struct:PgHdr1	file:
iLastCol	sqlite3.c	/^  sqlite3_int64 iLastCol;$/;"	m	struct:PendingList	file:
iLastDocid	sqlite3.c	/^  sqlite3_int64 iLastDocid;$/;"	m	struct:PendingList	file:
iLastPos	sqlite3.c	/^  sqlite3_int64 iLastPos;$/;"	m	struct:PendingList	file:
iLeafEndBlock	sqlite3.c	/^  sqlite3_int64 iLeafEndBlock;    \/* Rowid of final leaf block to traverse *\/$/;"	m	struct:Fts3SegReader	file:
iLeftJoin	sqlite3.c	/^  int iLeftJoin;        \/* Memory cell used to implement LEFT OUTER JOIN *\/$/;"	m	struct:WhereLevel	file:
iLevel	sqlite3.c	/^    int iLevel;           \/* Nesting level *\/$/;"	m	struct:Parse::yColCache	file:
iLimit	sqlite3.c	/^  int iLimit, iOffset;   \/* Memory registers holding LIMIT & OFFSET counters *\/$/;"	m	struct:Select	file:
iMaster	sqlite3.c	/^  u32 iMaster;$/;"	m	struct:Mem3Global	file:
iMaxKey	sqlite3.c	/^  unsigned int iMaxKey;               \/* Largest key seen since xTruncate() *\/$/;"	m	struct:PCache1	file:
iMem	sqlite3.c	/^    int iMem;                \/* Memory location that acts as accumulator *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
iMem	sqlite3.c	/^    int iMem;                \/* Memory location that acts as accumulator *\/$/;"	m	struct:AggInfo::AggInfo_func	file:
iMem	sqlite3.c	/^  int iMem;         \/* Base register where results are written *\/$/;"	m	struct:SelectDest	file:
iNext	sqlite3.c	/^    int iNext;                    \/* Next slot in aIndex[] not yet returned *\/$/;"	m	struct:WalIterator::WalSegment	file:
iNext	sqlite3.c	/^  Pgno iNext;              \/* Page number of the next source page to copy *\/$/;"	m	struct:sqlite3_backup	file:
iNextSelectId	sqlite3.c	/^  int iNextSelectId;$/;"	m	struct:Parse	file:
iNode	sqlite3.c	/^  i64 iNode;$/;"	m	struct:RtreeNode	file:
iNodeSize	sqlite3.c	/^  int iNodeSize;              \/* Size in bytes of each node in the node table *\/$/;"	m	struct:Rtree	file:
iOff	sqlite3.c	/^  int iOff;                       \/* Offset of this term from read positions *\/$/;"	m	struct:TermOffset	file:
iOffset	sqlite3.c	/^  i64 iOffset;                 \/* Starting offset in main journal *\/$/;"	m	struct:PagerSavepoint	file:
iOffset	sqlite3.c	/^  int iLimit, iOffset;   \/* Memory registers holding LIMIT & OFFSET counters *\/$/;"	m	struct:Select	file:
iOffset	sqlite3.c	/^  int iOffset;                 \/* current position in pInput *\/$/;"	m	struct:simple_tokenizer_cursor	file:
iOffset	sqlite3.c	/^  int iOffset;                 \/* current position in zInput *\/$/;"	m	struct:porter_tokenizer_cursor	file:
iOffset	sqlite3.c	/^  int iOffset;            \/* Byte offset of blob in cursor data *\/$/;"	m	struct:Incrblob	file:
iOffset	sqlite3.c	/^  sqlite3_int64 iOffset;          \/* Offset from the beginning of the file *\/$/;"	m	struct:FilePoint	file:
iOverflow	sqlite3.c	/^  u16 iOverflow; \/* Offset to overflow page number.  Zero if no overflow *\/$/;"	m	struct:CellInfo	file:
iPKey	sqlite3.c	/^  int iPKey;           \/* If not negative, use aCol[iPKey] as the primary key *\/$/;"	m	struct:Table	file:
iPage	sqlite3.c	/^  i16 iPage;                            \/* Index of current page in apPage *\/$/;"	m	struct:BtCursor	file:
iParent	sqlite3.c	/^  int iParent;            \/* Disable pWC->a[iParent] when this term disabled *\/$/;"	m	struct:WhereTerm	file:
iParm	sqlite3.c	/^  int iParm;        \/* A parameter used by the eDest disposal method *\/$/;"	m	struct:SelectDest	file:
iPos	sqlite3.c	/^  int iPos;                       \/* Current position *\/$/;"	m	struct:LcsIterator	file:
iPos	sqlite3.c	/^  int iPos;                       \/* Index of first token in snippet *\/$/;"	m	struct:SnippetFragment	file:
iPos	sqlite3.c	/^  int iPos;                       \/* Position just read from pList *\/$/;"	m	struct:TermOffset	file:
iPosOffset	sqlite3.c	/^  int iPosOffset;                 \/* Tokens count up to end of this phrase *\/$/;"	m	struct:LcsIterator	file:
iPrefEnc	sqlite3.c	/^  u8 iPrefEnc;         \/* Preferred text encoding (SQLITE_UTF8, 16LE, 16BE) *\/$/;"	m	struct:FuncDef	file:
iPrevDocid	sqlite3.c	/^  sqlite_int64 iPrevDocid;        \/* Docid of most recently inserted document *\/$/;"	m	struct:Fts3Table	file:
iPrevId	sqlite3.c	/^  sqlite3_int64 iPrevId;          \/* Previous id read from aDoclist *\/$/;"	m	struct:Fts3Cursor	file:
iPrior	sqlite3.c	/^  int iPrior;                     \/* Last result returned from the iterator *\/$/;"	m	struct:WalIterator	file:
iRangeReg	sqlite3.c	/^  int iRangeReg;       \/* First register in temporary register block *\/$/;"	m	struct:Parse	file:
iReg	sqlite3.c	/^    int iReg;             \/* Reg with value of this column. 0 means none. *\/$/;"	m	struct:Parse::yColCache	file:
iReinsertHeight	sqlite3.c	/^  int iReinsertHeight;        \/* Height of sub-trees Reinsert() has run on *\/$/;"	m	struct:Rtree	file:
iRightJoinTable	sqlite3.c	/^  i16 iRightJoinTable;   \/* If EP_FromJoin, the right table of the join *\/$/;"	m	struct:Expr	file:
iRowid	sqlite3.c	/^  i64 iRowid;$/;"	m	struct:RtreeCell	file:
iRowid	sqlite3.c	/^  sqlite3_int64 iRowid;           \/* Current rowid *\/$/;"	m	struct:Fts3auxCursor	file:
iSavepoint	sqlite3.c	/^  int iSavepoint;           \/* Depth of the SAVEPOINT stack *\/$/;"	m	struct:VTable	file:
iSelectId	sqlite3.c	/^    u8 iSelectId;     \/* If pSelect!=0, the id of the sub-select in EQP *\/$/;"	m	struct:SrcList::SrcList_item	file:
iSelectId	sqlite3.c	/^  int iSelectId;$/;"	m	struct:Parse	file:
iSize	sqlite3.c	/^  i64 iSize;                          \/* Size of this allocation *\/$/;"	m	struct:MemBlockHdr	file:
iSize	sqlite3.c	/^  int iSize;                      \/* Amount of zBuf[] currently used *\/$/;"	m	struct:JournalFile	file:
iSize	sqlite3.c	/^  u32 iSize;      \/* Maximum bit index.  Max iSize is 4,294,967,296. *\/$/;"	m	struct:Bitvec	file:
iSorterColumn	sqlite3.c	/^    int iSorterColumn;       \/* Column number in the sorting index *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
iStartBlock	sqlite3.c	/^  sqlite3_int64 iStartBlock;      \/* Rowid of first leaf block to traverse *\/$/;"	m	struct:Fts3SegReader	file:
iStatement	sqlite3.c	/^  int iStatement;         \/* Statement number (or 0 if has not opened stmt) *\/$/;"	m	struct:Vdbe	file:
iStrategy	sqlite3.c	/^  int iStrategy;                    \/* Copy of idxNum search parameter *\/$/;"	m	struct:RtreeCursor	file:
iSub	sqlite3.c	/^  int iSub;                  \/* 0 = main program, 1 = first sub-program etc. *\/$/;"	m	struct:VdbeOpIter	file:
iSubRec	sqlite3.c	/^  Pgno iSubRec;                \/* Index of first record in sub-journal *\/$/;"	m	struct:PagerSavepoint	file:
iSum	sqlite3.c	/^  i64 iSum;         \/* Integer sum *\/   $/;"	m	struct:SumCtx	file:
iTab	sqlite3.c	/^  int iTab;            \/* The root page of the table to be locked *\/$/;"	m	struct:TableLock	file:
iTabCur	sqlite3.c	/^  int iTabCur;          \/* The VDBE cursor used to access the table *\/$/;"	m	struct:WhereLevel	file:
iTable	sqlite3.c	/^    int iTable;              \/* Cursor number of the source table *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
iTable	sqlite3.c	/^    int iTable;           \/* Table cursor number *\/$/;"	m	struct:Parse::yColCache	file:
iTable	sqlite3.c	/^  Pgno iTable;          \/* Root page of table *\/$/;"	m	struct:BtLock	file:
iTable	sqlite3.c	/^  int iTable;            \/* TK_COLUMN: cursor number of table holding column$/;"	m	struct:Expr	file:
iTail	sqlite3.c	/^  int iTail;                      \/* Next value in trailing position list *\/$/;"	m	struct:SnippetPhrase	file:
iTerm	sqlite3.c	/^  int iTerm;$/;"	m	struct:TermOffsetCtx	file:
iTermOffset	sqlite3.c	/^     int iTermOffset;          \/* Used internally - xBestIndex should ignore *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	file:
iToken	sqlite3.c	/^  int iToken;                     \/* Position of token in phrase *\/$/;"	m	struct:Fts3TokenAndCost	file:
iToken	sqlite3.c	/^  int iToken;                  \/* index of next token to be returned *\/$/;"	m	struct:porter_tokenizer_cursor	file:
iToken	sqlite3.c	/^  int iToken;                  \/* index of next token to be returned *\/$/;"	m	struct:simple_tokenizer_cursor	file:
iToken	sqlite3.c	/^  int iToken;$/;"	m	struct:IcuCursor	file:
iTop	sqlite3.c	/^  int iTop;                      \/* The very beginning of the WHERE loop *\/$/;"	m	struct:WhereInfo	file:
iValue	sqlite3.c	/^    int iValue;            \/* Non-negative integer value if EP_IntValue *\/$/;"	m	union:Expr::__anon4	file:
iVersion	sqlite3.c	/^  int iVersion;            \/* Structure version number (currently 3) *\/$/;"	m	struct:sqlite3_vfs	file:
iVersion	sqlite3.c	/^  int iVersion;$/;"	m	struct:sqlite3_io_methods	file:
iVersion	sqlite3.c	/^  int iVersion;$/;"	m	struct:sqlite3_module	file:
iVersion	sqlite3.c	/^  int iVersion;$/;"	m	struct:sqlite3_tokenizer_module	file:
iVersion	sqlite3.c	/^  u32 iVersion;                   \/* Wal-index version *\/$/;"	m	struct:WalIndexHdr	file:
iZero	sqlite3.c	/^    int iZero;                    \/* Frame number associated with aPgno[0] *\/$/;"	m	struct:WalIterator::WalSegment	file:
icuCaseFunc16	sqlite3.c	/^static void icuCaseFunc16(sqlite3_context *p, int nArg, sqlite3_value **apArg){$/;"	f	file:
icuClose	sqlite3.c	/^static int icuClose(sqlite3_tokenizer_cursor *pCursor){$/;"	f	file:
icuCollationColl	sqlite3.c	/^static int icuCollationColl($/;"	f	file:
icuCollationDel	sqlite3.c	/^static void icuCollationDel(void *pCtx){$/;"	f	file:
icuCreate	sqlite3.c	/^static int icuCreate($/;"	f	file:
icuDestroy	sqlite3.c	/^static int icuDestroy(sqlite3_tokenizer *pTokenizer){$/;"	f	file:
icuFunctionError	sqlite3.c	/^static void icuFunctionError($/;"	f	file:
icuLikeCompare	sqlite3.c	/^static int icuLikeCompare($/;"	f	file:
icuLikeFunc	sqlite3.c	/^static void icuLikeFunc($/;"	f	file:
icuLoadCollation	sqlite3.c	/^static void icuLoadCollation($/;"	f	file:
icuNext	sqlite3.c	/^static int icuNext($/;"	f	file:
icuOpen	sqlite3.c	/^static int icuOpen($/;"	f	file:
icuRegexpDelete	sqlite3.c	/^static void icuRegexpDelete(void *p){$/;"	f	file:
icuRegexpFunc	sqlite3.c	/^static void icuRegexpFunc(sqlite3_context *p, int nArg, sqlite3_value **apArg){$/;"	f	file:
icuTokenizerModule	sqlite3.c	/^static const sqlite3_tokenizer_module icuTokenizerModule = {$/;"	v	file:
id	sqlite3.c	/^  int  id;          \/* Mutex type *\/$/;"	m	struct:sqlite3_mutex	file:
id	sqlite3.c	/^  int id;                    \/* Mutex type *\/$/;"	m	struct:sqlite3_mutex	file:
id	sqlite3.c	/^  int id;     \/* The mutex type *\/$/;"	m	struct:sqlite3_debug_mutex	file:
id	sqlite3.c	/^  u8 id;                     \/* Id of this connection with its os2ShmNode *\/$/;"	m	struct:os2ShmLink	file:
id	sqlite3.c	/^  u8 id;                     \/* Id of this connection with its winShmNode *\/$/;"	m	struct:winShm	file:
id	sqlite3.c	/^  u8 id;                     \/* Id of this connection within its unixShmNode *\/$/;"	m	struct:unixShm	file:
identLength	sqlite3.c	/^static int identLength(const char *z){$/;"	f	file:
identPut	sqlite3.c	/^static void identPut(char *z, int *pIdx, char *zSignedIdent){$/;"	f	file:
idum	CRandom.cpp	/^int CRandom::idum=0;$/;"	m	class:CRandom	file:
idx	sqlite3.c	/^    int idx;          \/* Index in some Table.aCol[] of a column named zName *\/$/;"	m	struct:IdList::IdList_item	file:
idx	sqlite3.c	/^    u16 idx;            \/* Insert this cell before idx-th non-overflow cell *\/$/;"	m	struct:MemPage::_OvflCell	file:
idxHash	sqlite3.c	/^  Hash idxHash;        \/* All (named) indices indexed by name *\/$/;"	m	struct:Schema	file:
idxNum	sqlite3.c	/^  int idxNum;                \/* Number used to identify the index *\/$/;"	m	struct:sqlite3_index_info	file:
idxStr	sqlite3.c	/^  char *idxStr;              \/* String, possibly obtained from sqlite3_malloc *\/$/;"	m	struct:sqlite3_index_info	file:
ifnullFunc	sqlite3.c	82591;"	d	file:
importVtabErrMsg	sqlite3.c	/^static void importVtabErrMsg(Vdbe *p, sqlite3_vtab *pVtab){$/;"	f	file:
in	sqlite3.c	/^    } in;                 \/* Used when plan.wsFlags&WHERE_IN_ABLE *\/$/;"	m	union:WhereLevel::__anon7	typeref:struct:WhereLevel::__anon7::__anon8	file:
inNormalWrite	sqlite3.c	/^  unsigned char inNormalWrite;   \/* True if in a normal write operation *\/$/;"	m	struct:unixFile	file:
inProgress	sqlite3.c	/^  int inProgress;                   \/* True while initialization in progress *\/$/;"	m	struct:Sqlite3Config	file:
inTrans	sqlite3.c	/^  u8 inTrans;          \/* 0: not writable.  1: Transaction.  2: Checkpoint *\/$/;"	m	struct:Db	file:
inTrans	sqlite3.c	/^  u8 inTrans;        \/* TRANS_NONE, TRANS_READ or TRANS_WRITE *\/$/;"	m	struct:Btree	file:
inTransaction	sqlite3.c	/^  int inTransaction;     \/* True after xBegin but before xCommit\/xRollback *\/$/;"	m	struct:Fts3Table	file:
inTransaction	sqlite3.c	/^  u8 inTransaction;     \/* Transaction state *\/$/;"	m	struct:BtShared	file:
inVtabMethod	sqlite3.c	/^  u8 inVtabMethod;        \/* See comments above *\/$/;"	m	struct:Vdbe	file:
incrVacuum	sqlite3.c	/^  u8 incrVacuum;        \/* True if incr-vacuum is enabled *\/$/;"	m	struct:BtShared	file:
incrVacuumStep	sqlite3.c	/^static int incrVacuumStep(BtShared *pBt, Pgno nFin, Pgno iLastPg){$/;"	f	file:
indexable	sqlite3.c	/^  Bitmask indexable;       \/* Bitmask of all indexable tables in the clause *\/$/;"	m	struct:WhereOrInfo	file:
info	sqlite3.c	/^  CellInfo info;            \/* A parse of the cell we are pointing at *\/$/;"	m	struct:BtCursor	file:
init	sqlite3.c	/^  } init;$/;"	m	struct:sqlite3	typeref:struct:sqlite3::sqlite3InitInfo	file:
initMaskSet	sqlite3.c	98722;"	d	file:
initSignalHandlers	MatrixDecomp.cpp	/^void HMM_PP::MatrixDecomp::initSignalHandlers() {$/;"	f	class:HMM_PP::MatrixDecomp
initUconvObjects	sqlite3.c	/^static void initUconvObjects( void ){$/;"	f	file:
initiallyEmpty	sqlite3.c	/^  u8 initiallyEmpty;    \/* Database is empty at start of transaction *\/$/;"	m	struct:BtShared	file:
ino	sqlite3.c	/^  ino_t ino;                  \/* Inode number *\/$/;"	m	struct:unixFileId	file:
inodeList	sqlite3.c	/^static unixInodeInfo *inodeList = 0;$/;"	v	file:
insertBinaryOperator	sqlite3.c	/^static void insertBinaryOperator($/;"	f	file:
insertCell	sqlite3.c	/^static void insertCell($/;"	f	file:
insertElement	sqlite3.c	/^static void insertElement($/;"	f	file:
insertSegments	InferredDataFit.cpp	/^void HMM_PP::InferredDataFit::insertSegments(vector<HMM_PP::ullintPair>& segments, const uint start, const uint stop, const set<uint>* forceSegmentBreakInds) {$/;"	f	class:HMM_PP::InferredDataFit
int2str	utils.cpp	/^string HMM_PP::int2str(const uint i)  {$/;"	f	class:HMM_PP
int64Table	sqlwrap.cpp	/^vector<sqlite_int64> SQL::int64Table(const string& q, int cols) {$/;"	f	class:SQL
int64Table	sqlwrap.cpp	/^vector<sqlite_int64> SQL::int64Table(sqlite3_stmt* stmt, int cols) {$/;"	f	class:SQL
intKey	sqlite3.c	/^  u8 intKey;           \/* True if intkey flag is set *\/$/;"	m	struct:MemPage	file:
intTable	sqlwrap.cpp	/^vector<int> SQL::intTable(const string& q, int cols) {$/;"	f	class:SQL
intTable	sqlwrap.cpp	/^vector<int> SQL::intTable(sqlite3_stmt* stmt, int cols) {$/;"	f	class:SQL
intTestFunc	sqlite3.c	/^static void intTestFunc($/;"	f	file:
interruptx	sqlite3.c	/^  void  (*interruptx)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
invalidateAllOverflowCache	sqlite3.c	/^static void invalidateAllOverflowCache(BtShared *pBt){$/;"	f	file:
invalidateAllOverflowCache	sqlite3.c	47997;"	d	file:
invalidateCursorsOnModifiedBtrees	sqlite3.c	/^static void invalidateCursorsOnModifiedBtrees(sqlite3 *db){$/;"	f	file:
invalidateIncrblobCursors	sqlite3.c	/^static void invalidateIncrblobCursors($/;"	f	file:
invalidateIncrblobCursors	sqlite3.c	47998;"	d	file:
invalidateOverflowCache	sqlite3.c	/^static void invalidateOverflowCache(BtCursor *pCur){$/;"	f	file:
invalidateOverflowCache	sqlite3.c	47996;"	d	file:
invalidateTempStorage	sqlite3.c	/^static int invalidateTempStorage(Parse *pParse){$/;"	f	file:
isAppropriateForFactoring	sqlite3.c	/^static int isAppropriateForFactoring(Expr *p){$/;"	f	file:
isAttached	sqlite3.c	/^  int isAttached;          \/* True once backup has been registered with pager *\/$/;"	m	struct:sqlite3_backup	file:
isCandidateForInOpt	sqlite3.c	/^static int isCandidateForInOpt(Select *p){$/;"	f	file:
isCheck	sqlite3.c	/^  u8 isCheck;          \/* True if resolving names in a CHECK constraint *\/$/;"	m	struct:NameContext	file:
isConsonant	sqlite3.c	/^static int isConsonant(const char *z){$/;"	f	file:
isDate	sqlite3.c	/^static int isDate($/;"	f	file:
isDeferred	sqlite3.c	/^  u8 isDeferred;    \/* True if constraint checking is deferred till COMMIT *\/$/;"	m	struct:FKey	file:
isDelete	sqlite3.c	/^  int isDelete;                       \/* Delete on close if true *\/$/;"	m	struct:unixFile	file:
isDelim	sqlite3.c	118819;"	d	file:
isDirty	sqlite3.c	/^  int isDirty;$/;"	m	struct:RtreeNode	file:
isEof	sqlite3.c	/^  int isEof;                      \/* True if cursor is at EOF *\/$/;"	m	struct:Fts3auxCursor	file:
isEof	sqlite3.c	/^  u8 isEof;                       \/* True if at End Of Results *\/$/;"	m	struct:Fts3Cursor	file:
isError	sqlite3.c	/^  int isError;          \/* Error code returned by the function. *\/$/;"	m	struct:sqlite3_context	file:
isExclusive	sqlite3.c	/^  u8 isExclusive;       \/* True if pWriter has an EXCLUSIVE lock on the db *\/$/;"	m	struct:BtShared	file:
isFatalError	sqlite3.c	/^static int isFatalError(int rc){$/;"	f	file:
isHidden	sqlite3.c	/^  u8 isHidden;     \/* True if this column is 'hidden' *\/$/;"	m	struct:Column	file:
isIncrblobHandle	sqlite3.c	/^  u8 isIncrblobHandle;      \/* True if this cursor is an incr. io handle *\/$/;"	m	struct:BtCursor	file:
isIndex	sqlite3.c	/^  Bool isIndex;         \/* True if an index containing keys only - no data *\/$/;"	m	struct:VdbeCursor	file:
isInit	sqlite3.c	/^  int isInit;                       \/* True after initialization has finished *\/$/;"	m	struct:Sqlite3Config	file:
isInit	sqlite3.c	/^  int isInit;                    \/* True if initialized *\/$/;"	m	struct:PCacheGlobal	file:
isInit	sqlite3.c	/^  u8 isInit;                      \/* 1 when initialized *\/$/;"	m	struct:WalIndexHdr	file:
isInit	sqlite3.c	/^  u8 isInit;           \/* True if previously initialized. MUST BE FIRST! *\/$/;"	m	struct:MemPage	file:
isInit	sqlite3.c	/^  unsigned char isInit;          \/* True if initialized *\/$/;"	m	struct:sqlite3PrngType	file:
isInterrupted	sqlite3.c	/^    volatile int isInterrupted; \/* True if sqlite3_interrupt has been called *\/$/;"	m	union:sqlite3::__anon2	file:
isLikeOrGlob	sqlite3.c	/^static int isLikeOrGlob($/;"	f	file:
isLookaside	sqlite3.c	/^static int isLookaside(sqlite3 *db, void *p){$/;"	f	file:
isLookaside	sqlite3.c	18443;"	d	file:
isMallocInit	sqlite3.c	/^  int isMallocInit;                 \/* True after malloc is initialized *\/$/;"	m	struct:Sqlite3Config	file:
isMatchOfColumn	sqlite3.c	/^static int isMatchOfColumn($/;"	f	file:
isMatchinfoNeeded	sqlite3.c	/^  int isMatchinfoNeeded;          \/* True when aMatchinfo[] needs filling in *\/$/;"	m	struct:Fts3Cursor	file:
isMultiWrite	sqlite3.c	/^  u8 isMultiWrite;     \/* True if statement may affect\/insert multiple rows *\/$/;"	m	struct:Parse	file:
isMutexInit	sqlite3.c	/^  int isMutexInit;                  \/* True after mutexes are initialized *\/$/;"	m	struct:Sqlite3Config	file:
isNT	sqlite3.c	/^  static int isNT(void){$/;"	f	file:
isNT	sqlite3.c	31579;"	d	file:
isNot	sqlite3.c	/^  int isNot;                          \/* True if getNextNode() sees a unary - *\/$/;"	m	struct:ParseContext	file:
isOpen	sqlite3.c	37567;"	d	file:
isOrdered	sqlite3.c	/^  Bool isOrdered;       \/* True if the underlying table is BTREE_UNORDERED *\/$/;"	m	struct:VdbeCursor	file:
isPCacheInit	sqlite3.c	/^  int isPCacheInit;                 \/* True after malloc is initialized *\/$/;"	m	struct:Sqlite3Config	file:
isPending	sqlite3.c	/^  u8 isPending;         \/* If waiting for read-locks to clear *\/$/;"	m	struct:BtShared	file:
isPopulated	sqlite3.c	/^    u8 isPopulated;   \/* Temporary table associated with SELECT is populated *\/$/;"	m	struct:SrcList::SrcList_item	file:
isPrefix	sqlite3.c	/^  int isPrefix;                   \/* True if token ends with a "*" character *\/$/;"	m	struct:Fts3PhraseToken	file:
isPrepareV2	sqlite3.c	/^  u8 isPrepareV2;         \/* True if prepared with prepare_v2() *\/$/;"	m	struct:Vdbe	file:
isPrimKey	sqlite3.c	/^  u8 isPrimKey;    \/* True if this column is part of the PRIMARY KEY *\/$/;"	m	struct:Column	file:
isReadonly	sqlite3.c	/^  u8 isReadonly;             \/* True if read-only *\/$/;"	m	struct:unixShmNode	file:
isReqPos	sqlite3.c	/^  int isReqPos;$/;"	m	struct:TermSelect	file:
isRequireSeek	sqlite3.c	/^  u8 isRequireSeek;               \/* True if must seek pStmt to %_content row *\/$/;"	m	struct:Fts3Cursor	file:
isSimpleCount	sqlite3.c	/^static Table *isSimpleCount(Select *p, AggInfo *pAggInfo){$/;"	f	file:
isSorted	sqlite3.c	/^  u8 isSorted;                   \/* True if pEntry is sorted *\/$/;"	m	struct:RowSet	file:
isSortingIndex	sqlite3.c	/^static int isSortingIndex($/;"	f	file:
isSystemTable	sqlite3.c	/^static int isSystemTable(Parse *pParse, const char *zName){$/;"	f	file:
isTable	sqlite3.c	/^  Bool isTable;         \/* True if a table requiring integer keys *\/$/;"	m	struct:VdbeCursor	file:
isTransactionSavepoint	sqlite3.c	/^  u8 isTransactionSavepoint;    \/* True if the outermost savepoint is a TS *\/$/;"	m	struct:sqlite3	file:
isValidCategory	CategoricalData.cpp	/^bool HMM_PP::CategoricalData::isValidCategory(const string& c) {$/;"	f	class:HMM_PP::CategoricalData
isView	sqlite3.c	81825;"	d	file:
isView	sqlite3.c	81826;"	d	file:
isView	sqlite3.c	82005;"	d	file:
isView	sqlite3.c	85526;"	d	file:
isView	sqlite3.c	85527;"	d	file:
isView	sqlite3.c	86065;"	d	file:
isView	sqlite3.c	96403;"	d	file:
isView	sqlite3.c	96404;"	d	file:
isView	sqlite3.c	96812;"	d	file:
isVowel	sqlite3.c	/^static int isVowel(const char *z){$/;"	f	file:
isWriteLock	sqlite3.c	/^  u8 isWriteLock;      \/* True for write lock.  False for a read lock *\/$/;"	m	struct:TableLock	file:
istreamLineReader	utils.cpp	/^HMM_PP::istreamLineReader::istreamLineReader(istream& stream, bool deleteInner)$/;"	f	class:HMM_PP::istreamLineReader
iv	CRandom.cpp	/^vector<int> CRandom::iv;$/;"	m	class:CRandom	file:
ix	sqlite3.c	/^  int ix[BMS];                  \/* Cursor assigned to each bit *\/$/;"	m	struct:WhereMaskSet	file:
iy	CRandom.cpp	/^int         CRandom::iy=0;$/;"	m	class:CRandom	file:
j	sqlite3.c	/^  unsigned char i, j;            \/* State variables *\/$/;"	m	struct:sqlite3PrngType	file:
jfd	sqlite3.c	/^  sqlite3_file *jfd;          \/* File descriptor for main journal *\/$/;"	m	struct:Pager	file:
jointype	sqlite3.c	/^    u8 jointype;      \/* Type of join between this able and the previous *\/$/;"	m	struct:SrcList::SrcList_item	file:
journalHdr	sqlite3.c	/^  i64 journalHdr;             \/* Byte offset to previous journal header *\/$/;"	m	struct:Pager	file:
journalHdrOffset	sqlite3.c	/^static i64 journalHdrOffset(Pager *pPager){$/;"	f	file:
journalMode	sqlite3.c	/^  u8 journalMode;             \/* One of the PAGER_JOURNALMODE_* values *\/$/;"	m	struct:Pager	file:
journalOff	sqlite3.c	/^  i64 journalOff;             \/* Current write offset in the journal file *\/$/;"	m	struct:Pager	file:
journalSizeLimit	sqlite3.c	/^  i64 journalSizeLimit;       \/* Size limit for persistent journal files *\/$/;"	m	struct:Pager	file:
jrnlBufferSize	sqlite3.c	/^static int jrnlBufferSize(Pager *pPager){$/;"	f	file:
jrnlClose	sqlite3.c	/^static int jrnlClose(sqlite3_file *pJfd){$/;"	f	file:
jrnlFileSize	sqlite3.c	/^static int jrnlFileSize(sqlite3_file *pJfd, sqlite_int64 *pSize){$/;"	f	file:
jrnlRead	sqlite3.c	/^static int jrnlRead($/;"	f	file:
jrnlSync	sqlite3.c	/^static int jrnlSync(sqlite3_file *pJfd, int flags){$/;"	f	file:
jrnlTruncate	sqlite3.c	/^static int jrnlTruncate(sqlite3_file *pJfd, sqlite_int64 size){$/;"	f	file:
jrnlWrite	sqlite3.c	/^static int jrnlWrite($/;"	f	file:
juliandayFunc	sqlite3.c	/^static void juliandayFunc($/;"	f	file:
key	sqlite3.c	/^struct AttachKey { int type;  Token key; };$/;"	m	struct:AttachKey	file:
keyClass	sqlite3.c	/^  char keyClass;          \/* HASH_INT, _POINTER, _STRING, _BINARY *\/$/;"	m	struct:Fts3Hash	file:
keyConf	sqlite3.c	/^  u8 keyConf;          \/* What to do in case of uniqueness conflict on iPKey *\/$/;"	m	struct:Table	file:
keyInfoFromExprList	sqlite3.c	/^static KeyInfo *keyInfoFromExprList(Parse *pParse, ExprList *pList){$/;"	f	file:
keywordCode	sqlite3.c	/^static int keywordCode(const char *z, int n){$/;"	f	file:
last	CRandom.cpp	/^double CRandom::last = 0;$/;"	m	class:CRandom	file:
lastErrno	sqlite3.c	/^  DWORD lastErrno;           \/* The Windows errno from the last I\/O error *\/$/;"	m	struct:winShmNode	file:
lastErrno	sqlite3.c	/^  DWORD lastErrno;        \/* The Windows errno from the last I\/O error *\/$/;"	m	struct:winFile	file:
lastErrno	sqlite3.c	/^  int lastErrno;                      \/* The unix errno from last I\/O error *\/$/;"	m	struct:unixFile	file:
lastRowid	sqlite3.c	/^  i64 lastRowid;                \/* ROWID of most recent insert (see above) *\/$/;"	m	struct:sqlite3	file:
lastRowid	sqlite3.c	/^  i64 lastRowid;          \/* Last insert rowid (sqlite3.lastRowid) *\/$/;"	m	struct:VdbeFrame	file:
lastRowid	sqlite3.c	/^  i64 lastRowid;        \/* Last rowid from a Next or NextIdx operation *\/$/;"	m	struct:VdbeCursor	file:
last_insert_rowid	sqlite3.c	/^  sqlite_int64  (*last_insert_rowid)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
last_insert_rowid	sqlite3.c	/^static void last_insert_rowid($/;"	f	file:
leaf	sqlite3.c	/^  u8 leaf;             \/* True if leaf flag is set *\/$/;"	m	struct:MemPage	file:
leaveMutex	sqlite3.c	/^static void leaveMutex(void){$/;"	f	file:
leftColumn	sqlite3.c	/^    int leftColumn;         \/* Column number of X in "X <op> <expr>" *\/$/;"	m	union:WhereTerm::__anon17	file:
leftCursor	sqlite3.c	/^  int leftCursor;         \/* Cursor number of X in "X <op> <expr>" *\/$/;"	m	struct:WhereTerm	file:
length	sqlite3.c	/^  unsigned long long length;        \/* nbr of bytes to lock *\/$/;"	m	struct:ByteRangeLockPB2	file:
lengthFunc	sqlite3.c	/^static void lengthFunc($/;"	f	file:
lhs	sqlite3.c	/^  YYCODETYPE lhs;         \/* Symbol on the left-hand side of the rule *\/$/;"	m	struct:__anon20	file:
libversion	sqlite3.c	/^  const char * (*libversion)(void);$/;"	m	struct:sqlite3_api_routines	file:
libversion_number	sqlite3.c	/^  int  (*libversion_number)(void);$/;"	m	struct:sqlite3_api_routines	file:
likeFunc	sqlite3.c	/^static void likeFunc($/;"	f	file:
likeInfoAlt	sqlite3.c	/^static const struct compareInfo likeInfoAlt = { '%', '_',   0, 0 };$/;"	v	typeref:struct:compareInfo	file:
likeInfoNorm	sqlite3.c	/^static const struct compareInfo likeInfoNorm = { '%', '_',   0, 1 };$/;"	v	typeref:struct:compareInfo	file:
likely	sqlite3.c	535;"	d	file:
likely	sqlite3.c	538;"	d	file:
limit	sqlite3.c	/^  int (*limit)(sqlite3*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
list	sqlite3.c	/^    } list;$/;"	m	union:Mem3Block::__anon13	typeref:struct:Mem3Block::__anon13::__anon15	file:
loadAllData	Model.cpp	/^void HMM_PP::Model::loadAllData() {$/;"	f	class:HMM_PP::Model
loadAllData	ModelFromStream.cpp	/^void HMM_PP::ModelFromStream::loadAllData() {$/;"	f	class:HMM_PP::ModelFromStream
loadAllData	ModelWithDB.cpp	/^void HMM_PP::ModelWithDB::loadAllData() {$/;"	f	class:HMM_PP::ModelWithDB
loadAnalysis	sqlite3.c	/^static void loadAnalysis(Parse *pParse, int iDb){$/;"	f	file:
loadExt	sqlite3.c	/^static void loadExt(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
local	sqlite3.c	/^  winceLock local;        \/* Locks obtained by this instance of winFile *\/$/;"	m	struct:winFile	file:
local_ioerr	sqlite3.c	/^static void local_ioerr(){$/;"	f	file:
localtime	sqlite3.c	/^struct tm *__cdecl localtime(const time_t *t)$/;"	f
localtimeOffset	sqlite3.c	/^static sqlite3_int64 localtimeOffset($/;"	f	file:
locateFkeyIndex	sqlite3.c	/^static int locateFkeyIndex($/;"	f	file:
lock	sqlite3.c	/^  BtLock lock;       \/* Object used to lock page 1 *\/$/;"	m	struct:Btree	file:
lockBtree	sqlite3.c	/^static int lockBtree(BtShared *pBt){$/;"	f	file:
lockBtreeMutex	sqlite3.c	/^static void lockBtreeMutex(Btree *p){$/;"	f	file:
lockError	sqlite3.c	/^  u8 lockError;              \/* True if a locking error has occurred *\/$/;"	m	struct:Wal	file:
lockMask	sqlite3.c	/^  yDbMask lockMask;       \/* Subset of btreeMask that requires a lock *\/$/;"	m	struct:Vdbe	file:
lockProxy	sqlite3.c	/^  unixFile *lockProxy;         \/* Open proxy lock file *\/$/;"	m	struct:proxyLockingContext	file:
lockProxyPath	sqlite3.c	/^  char *lockProxyPath;         \/* Name of the proxy lock file *\/$/;"	m	struct:proxyLockingContext	file:
lockTrace	sqlite3.c	/^static int lockTrace(int fd, int op, struct flock *p){$/;"	f	file:
locked	sqlite3.c	/^  u8 locked;         \/* True if db currently has pBt locked *\/$/;"	m	struct:Btree	file:
lockingContext	sqlite3.c	/^  void *lockingContext;               \/* Locking style specific state *\/$/;"	m	struct:unixFile	file:
locktype	sqlite3.c	/^  int locktype;             \/* Type of lock currently held on this file *\/$/;"	m	struct:os2File	file:
locktype	sqlite3.c	/^  unsigned char locktype; \/* Type of lock currently held on this file *\/$/;"	m	struct:winFile	file:
log	sqlite3.c	/^  void (*log)(int,const char*,...);$/;"	m	struct:sqlite3_api_routines	file:
logBadConnection	sqlite3.c	/^static void logBadConnection(const char *zType){$/;"	f	file:
lookaside	sqlite3.c	/^  Lookaside lookaside;          \/* Lookaside malloc configuration *\/$/;"	m	struct:sqlite3	file:
lookupName	sqlite3.c	/^static int lookupName($/;"	f	file:
lookup_int	sqlwrap.cpp	/^int SQL::lookup_int(const string& q) {$/;"	f	class:SQL
lookup_int	sqlwrap.cpp	/^int SQL::lookup_int(sqlite3_stmt* stmt) {$/;"	f	class:SQL
lookup_int64	sqlwrap.cpp	/^sqlite_int64 SQL::lookup_int64(sqlite3_stmt* stmt) {$/;"	f	class:SQL
lowerFunc	sqlite3.c	/^static void lowerFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
lru	sqlite3.c	/^    int lru;              \/* Least recently used entry has the smallest value *\/$/;"	m	struct:Parse::yColCache	file:
m	sqlite3.c	/^  int h, m;          \/* Hour and minutes *\/$/;"	m	struct:DateTime	file:
m	sqlite3.c	/^  sqlite3_mem_methods m;            \/* Low-level memory allocation interface *\/$/;"	m	struct:Sqlite3Config	file:
m_eq_1	sqlite3.c	/^static int m_eq_1(const char *z){$/;"	f	file:
m_gt_0	sqlite3.c	/^static int m_gt_0(const char *z){$/;"	f	file:
m_gt_1	sqlite3.c	/^static int m_gt_1(const char *z){$/;"	f	file:
magic	sqlite3.c	/^  u32 magic;                      \/* Always RTREE_GEOMETRY_MAGIC *\/$/;"	m	struct:RtreeMatchArg	file:
magic	sqlite3.c	/^  u32 magic;                    \/* Magic number for detect library misuse *\/$/;"	m	struct:sqlite3	file:
magic	sqlite3.c	/^  u32 magic;              \/* Magic number for sanity checking *\/$/;"	m	struct:Vdbe	file:
major	sqlite3.c	/^  YYCODETYPE major;      \/* The major token value.  This is the code$/;"	m	struct:yyStackEntry	file:
malloc	sqlite3.c	/^  void *(*malloc)(int);$/;"	m	struct:sqlite3_api_routines	file:
mallocFailed	sqlite3.c	/^  int mallocFailed; \/* A memory allocation error has occurred *\/$/;"	m	struct:IntegrityCk	file:
mallocFailed	sqlite3.c	/^  u8   mallocFailed;   \/* Becomes true if any memory allocation fails *\/$/;"	m	struct:StrAccum	file:
mallocFailed	sqlite3.c	/^  u8 mallocFailed;              \/* True if we have seen a malloc failure *\/$/;"	m	struct:sqlite3	file:
mallocWithAlarm	sqlite3.c	/^static int mallocWithAlarm(int n, void **pp){$/;"	f	file:
mask	sqlite3.c	/^  struct {int value; int mask;} yy215;$/;"	m	struct:__anon18::__anon19	file:
maskPage	sqlite3.c	/^  u16 maskPage;        \/* Mask for page offset *\/$/;"	m	struct:MemPage	file:
matchAll	sqlite3.c	/^  u8 matchAll;$/;"	m	struct:compareInfo	file:
matchOne	sqlite3.c	/^  u8 matchOne;$/;"	m	struct:compareInfo	file:
matchQuality	sqlite3.c	/^static int matchQuality(FuncDef *p, int nArg, u8 enc){$/;"	f	file:
matchSet	sqlite3.c	/^  u8 matchSet;$/;"	m	struct:compareInfo	file:
maxCount	sqlite3.c	/^  u32 maxCount;       \/* Maximum instantaneous currentCount *\/$/;"	m	struct:Mem5Global	file:
maxLeaf	sqlite3.c	/^  u16 maxLeaf;          \/* Maximum local payload in a LEAFDATA table *\/$/;"	m	struct:BtShared	file:
maxLocal	sqlite3.c	/^  u16 maxLocal;         \/* Maximum local payload in non-LEAFDATA tables *\/$/;"	m	struct:BtShared	file:
maxLocal	sqlite3.c	/^  u16 maxLocal;        \/* Copy of BtShared.maxLocal or BtShared.maxLeaf *\/$/;"	m	struct:MemPage	file:
maxOut	sqlite3.c	/^  u32 maxOut;         \/* Maximum instantaneous currentOut *\/$/;"	m	struct:Mem5Global	file:
maxRequest	sqlite3.c	/^  u32 maxRequest;     \/* Largest allocation (exclusive of internal frag) *\/$/;"	m	struct:Mem5Global	file:
mayAbort	sqlite3.c	/^  u8 mayAbort;         \/* True if statement may throw an ABORT exception *\/$/;"	m	struct:Parse	file:
mbcsToUnicode	sqlite3.c	/^static WCHAR *mbcsToUnicode(const char *zFilename){$/;"	f	file:
mem	sqlite3.c	/^} mem;$/;"	v	typeref:struct:__anon12	file:
mem0	sqlite3.c	/^} mem0 = { 0, 0, 0, 0, 0, 0, 0, 0 };$/;"	v	typeref:struct:Mem0Global	file:
mem0	sqlite3.c	18081;"	d	file:
mem3	sqlite3.c	/^} mem3 = { 97535575 };$/;"	v	typeref:struct:Mem3Global	file:
mem3	sqlite3.c	15549;"	d	file:
mem5	sqlite3.c	/^} mem5;$/;"	v	typeref:struct:Mem5Global	file:
mem5	sqlite3.c	16232;"	d	file:
memAboutToChange	sqlite3.c	62307;"	d	file:
memAboutToChange	sqlite3.c	62309;"	d	file:
memDb	sqlite3.c	/^  u8 memDb;                   \/* True to inhibit all file I\/O *\/$/;"	m	struct:Pager	file:
memIsValid	sqlite3.c	12693;"	d	file:
memTracePrint	sqlite3.c	/^static void memTracePrint(FILE *out, Mem *p){$/;"	f	file:
memjrnlClose	sqlite3.c	/^static int memjrnlClose(sqlite3_file *pJfd){$/;"	f	file:
memjrnlFileSize	sqlite3.c	/^static int memjrnlFileSize(sqlite3_file *pJfd, sqlite_int64 *pSize){$/;"	f	file:
memjrnlRead	sqlite3.c	/^static int memjrnlRead($/;"	f	file:
memjrnlSync	sqlite3.c	/^static int memjrnlSync(sqlite3_file *NotUsed, int NotUsed2){$/;"	f	file:
memjrnlTruncate	sqlite3.c	/^static int memjrnlTruncate(sqlite3_file *pJfd, sqlite_int64 size){$/;"	f	file:
memjrnlWrite	sqlite3.c	/^static int memjrnlWrite($/;"	f	file:
memory_highwater	sqlite3.c	/^  sqlite3_int64 (*memory_highwater)(int);$/;"	m	struct:sqlite3_api_routines	file:
memory_used	sqlite3.c	/^  sqlite3_int64 (*memory_used)(void);$/;"	m	struct:sqlite3_api_routines	file:
memsys3Checkout	sqlite3.c	/^static void *memsys3Checkout(u32 i, u32 nBlock){$/;"	f	file:
memsys3Enter	sqlite3.c	/^static void memsys3Enter(void){$/;"	f	file:
memsys3Free	sqlite3.c	/^void memsys3Free(void *pPrior){$/;"	f
memsys3FreeUnsafe	sqlite3.c	/^void memsys3FreeUnsafe(void *pOld){$/;"	f
memsys3FromMaster	sqlite3.c	/^static void *memsys3FromMaster(u32 nBlock){$/;"	f	file:
memsys3Init	sqlite3.c	/^static int memsys3Init(void *NotUsed){$/;"	f	file:
memsys3Leave	sqlite3.c	/^static void memsys3Leave(void){$/;"	f	file:
memsys3Link	sqlite3.c	/^static void memsys3Link(u32 i){$/;"	f	file:
memsys3LinkIntoList	sqlite3.c	/^static void memsys3LinkIntoList(u32 i, u32 *pRoot){$/;"	f	file:
memsys3Malloc	sqlite3.c	/^static void *memsys3Malloc(int nBytes){$/;"	f	file:
memsys3MallocUnsafe	sqlite3.c	/^static void *memsys3MallocUnsafe(int nByte){$/;"	f	file:
memsys3Merge	sqlite3.c	/^static void memsys3Merge(u32 *pRoot){$/;"	f	file:
memsys3OutOfMemory	sqlite3.c	/^static void memsys3OutOfMemory(int nByte){$/;"	f	file:
memsys3Realloc	sqlite3.c	/^void *memsys3Realloc(void *pPrior, int nBytes){$/;"	f
memsys3Roundup	sqlite3.c	/^static int memsys3Roundup(int n){$/;"	f	file:
memsys3Shutdown	sqlite3.c	/^static void memsys3Shutdown(void *NotUsed){$/;"	f	file:
memsys3Size	sqlite3.c	/^static int memsys3Size(void *p){$/;"	f	file:
memsys3Unlink	sqlite3.c	/^static void memsys3Unlink(u32 i){$/;"	f	file:
memsys3UnlinkFromList	sqlite3.c	/^static void memsys3UnlinkFromList(u32 i, u32 *pRoot){$/;"	f	file:
memsys5Enter	sqlite3.c	/^static void memsys5Enter(void){$/;"	f	file:
memsys5Free	sqlite3.c	/^static void memsys5Free(void *pPrior){$/;"	f	file:
memsys5FreeUnsafe	sqlite3.c	/^static void memsys5FreeUnsafe(void *pOld){$/;"	f	file:
memsys5Init	sqlite3.c	/^static int memsys5Init(void *NotUsed){$/;"	f	file:
memsys5Leave	sqlite3.c	/^static void memsys5Leave(void){$/;"	f	file:
memsys5Link	sqlite3.c	/^static void memsys5Link(int i, int iLogsize){$/;"	f	file:
memsys5Log	sqlite3.c	/^static int memsys5Log(int iValue){$/;"	f	file:
memsys5Malloc	sqlite3.c	/^static void *memsys5Malloc(int nBytes){$/;"	f	file:
memsys5MallocUnsafe	sqlite3.c	/^static void *memsys5MallocUnsafe(int nByte){$/;"	f	file:
memsys5Realloc	sqlite3.c	/^static void *memsys5Realloc(void *pPrior, int nBytes){$/;"	f	file:
memsys5Roundup	sqlite3.c	/^static int memsys5Roundup(int n){$/;"	f	file:
memsys5Shutdown	sqlite3.c	/^static void memsys5Shutdown(void *NotUsed){$/;"	f	file:
memsys5Size	sqlite3.c	/^static int memsys5Size(void *p){$/;"	f	file:
memsys5Unlink	sqlite3.c	/^static void memsys5Unlink(int i, int iLogsize){$/;"	f	file:
memsys5UnlinkFirst	sqlite3.c	/^static int memsys5UnlinkFirst(int iLogsize){$/;"	f	file:
minLeaf	sqlite3.c	/^  u16 minLeaf;          \/* Minimum local payload in a LEAFDATA table *\/$/;"	m	struct:BtShared	file:
minLocal	sqlite3.c	/^  u16 minLocal;         \/* Minimum local payload in non-LEAFDATA tables *\/$/;"	m	struct:BtShared	file:
minLocal	sqlite3.c	/^  u16 minLocal;        \/* Copy of BtShared.minLocal or BtShared.minLeaf *\/$/;"	m	struct:MemPage	file:
minMaxFinalize	sqlite3.c	/^static void minMaxFinalize(sqlite3_context *context){$/;"	f	file:
minMaxQuery	sqlite3.c	/^static u8 minMaxQuery(Select *p){$/;"	f	file:
minWriteFileFormat	sqlite3.c	/^  u8 minWriteFileFormat;  \/* Minimum file format for writable database files *\/$/;"	m	struct:Vdbe	file:
minmaxFunc	sqlite3.c	/^static void minmaxFunc($/;"	f	file:
minmaxStep	sqlite3.c	/^static void minmaxStep($/;"	f	file:
minor	sqlite3.c	/^  YYMINORTYPE minor;     \/* The user-supplied minor token value.  This$/;"	m	struct:yyStackEntry	file:
mnMaster	sqlite3.c	/^  u32 mnMaster;$/;"	m	struct:Mem3Global	file:
mnReq	sqlite3.c	/^  int mnReq, mxReq;                 \/* Min and max heap requests sizes *\/$/;"	m	struct:Sqlite3Config	file:
modifyPagePointer	sqlite3.c	/^static int modifyPagePointer(MemPage *pPage, Pgno iFrom, Pgno iTo, u8 eType){$/;"	f	file:
moveToChild	sqlite3.c	/^static int moveToChild(BtCursor *pCur, u32 newPgno){$/;"	f	file:
moveToLeftmost	sqlite3.c	/^static int moveToLeftmost(BtCursor *pCur){$/;"	f	file:
moveToParent	sqlite3.c	/^static void moveToParent(BtCursor *pCur){$/;"	f	file:
moveToRightmost	sqlite3.c	/^static int moveToRightmost(BtCursor *pCur){$/;"	f	file:
moveToRoot	sqlite3.c	/^static int moveToRoot(BtCursor *pCur){$/;"	f	file:
movetoTarget	sqlite3.c	/^  i64 movetoTarget;     \/* Argument to the deferred sqlite3BtreeMoveto() *\/$/;"	m	struct:VdbeCursor	file:
mprintf	sqlite3.c	/^  char * (*mprintf)(const char*,...);$/;"	m	struct:sqlite3_api_routines	file:
multiSelect	sqlite3.c	/^static int multiSelect($/;"	f	file:
multiSelectCollSeq	sqlite3.c	/^static CollSeq *multiSelectCollSeq(Parse *pParse, Select *p, int iCol){$/;"	f	file:
multiSelectOrderBy	sqlite3.c	/^static int multiSelectOrderBy($/;"	f	file:
multiplyMessageTimesEmissionProbs	InferredDataFit.cpp	/^void HMM_PP::InferredDataFit::multiplyMessageTimesEmissionProbs(NamedVector<real>& message, const uint t, const Constraint* constraints) const {$/;"	f	class:HMM_PP::InferredDataFit
mutex	sqlite3.c	/^  CRITICAL_SECTION mutex;    \/* Mutex controlling the lock *\/$/;"	m	struct:sqlite3_mutex	file:
mutex	sqlite3.c	/^  HMTX mutex;       \/* Mutex controlling the lock *\/$/;"	m	struct:sqlite3_mutex	file:
mutex	sqlite3.c	/^  pthread_mutex_t mutex;     \/* Mutex controlling the lock *\/$/;"	m	struct:sqlite3_mutex	file:
mutex	sqlite3.c	/^  sqlite3_mutex *mutex;          \/* MUTEX_STATIC_LRU or NULL *\/$/;"	m	struct:PGroup	file:
mutex	sqlite3.c	/^  sqlite3_mutex *mutex;          \/* Mutex for accessing the following: *\/$/;"	m	struct:PCacheGlobal	file:
mutex	sqlite3.c	/^  sqlite3_mutex *mutex;         \/* Connection mutex *\/$/;"	m	struct:sqlite3	file:
mutex	sqlite3.c	/^  sqlite3_mutex *mutex;         \/* Mutex to serialize access *\/$/;"	m	struct:Mem0Global	file:
mutex	sqlite3.c	/^  sqlite3_mutex *mutex;      \/* Mutex to access this object *\/$/;"	m	struct:os2ShmNode	file:
mutex	sqlite3.c	/^  sqlite3_mutex *mutex;      \/* Mutex to access this object *\/$/;"	m	struct:unixShmNode	file:
mutex	sqlite3.c	/^  sqlite3_mutex *mutex;      \/* Mutex to access this object *\/$/;"	m	struct:winShmNode	file:
mutex	sqlite3.c	/^  sqlite3_mutex *mutex; \/* Non-recursive mutex required to access this object *\/$/;"	m	struct:BtShared	file:
mutex	sqlite3.c	/^  sqlite3_mutex *mutex;$/;"	m	struct:Mem3Global	file:
mutex	sqlite3.c	/^  sqlite3_mutex *mutex;$/;"	m	struct:Mem5Global	file:
mutex	sqlite3.c	/^  sqlite3_mutex *mutex;$/;"	m	struct:__anon12	file:
mutex	sqlite3.c	/^  sqlite3_mutex_methods mutex;      \/* Low-level mutex interface *\/$/;"	m	struct:Sqlite3Config	file:
mutexIsInit	sqlite3.c	/^static SQLITE_WSD int mutexIsInit = 0;$/;"	v	file:
mutex_alloc	sqlite3.c	/^  sqlite3_mutex *(*mutex_alloc)(int);$/;"	m	struct:sqlite3_api_routines	file:
mutex_enter	sqlite3.c	/^  void (*mutex_enter)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines	file:
mutex_free	sqlite3.c	/^  void (*mutex_free)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines	file:
mutex_leave	sqlite3.c	/^  void (*mutex_leave)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines	file:
mutex_try	sqlite3.c	/^  int (*mutex_try)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines	file:
mxAlloc	sqlite3.c	/^  int  mxAlloc;        \/* Maximum allowed string length *\/$/;"	m	struct:StrAccum	file:
mxCurrent	sqlite3.c	/^  int mxCurrent[NCSIZE];   \/* Highwater mark for nCurrent *\/$/;"	m	struct:__anon12	file:
mxErr	sqlite3.c	/^  int mxErr;        \/* Stop accumulating errors when this reaches zero *\/$/;"	m	struct:IntegrityCk	file:
mxFrame	sqlite3.c	/^  u32 mxFrame;                    \/* Index of last valid frame in the WAL *\/$/;"	m	struct:WalIndexHdr	file:
mxOut	sqlite3.c	/^  int mxOut;              \/* Highwater mark for nOut *\/$/;"	m	struct:Lookaside	file:
mxParserStack	sqlite3.c	/^  int mxParserStack;                \/* maximum depth of the parser stack *\/$/;"	m	struct:Sqlite3Config	file:
mxPathname	sqlite3.c	/^  int mxPathname;          \/* Maximum file pathname length *\/$/;"	m	struct:sqlite3_vfs	file:
mxPgno	sqlite3.c	/^  Pgno mxPgno;                \/* Maximum allowed size of the database *\/$/;"	m	struct:Pager	file:
mxPinned	sqlite3.c	/^  int mxPinned;                  \/* nMaxpage + 10 - nMinPage *\/$/;"	m	struct:PGroup	file:
mxReq	sqlite3.c	/^  int mnReq, mxReq;                 \/* Min and max heap requests sizes *\/$/;"	m	struct:Sqlite3Config	file:
mxSavepoint	sqlite3.c	/^  int mxSavepoint;       \/* Largest valid xSavepoint integer *\/$/;"	m	struct:Fts3Table	file:
mxStrlen	sqlite3.c	/^  int mxStrlen;                     \/* Maximum string length *\/$/;"	m	struct:Sqlite3Config	file:
mxValue	sqlite3.c	/^  int mxValue[10];          \/* Maximum value *\/$/;"	m	struct:sqlite3StatType	file:
mxWalSize	sqlite3.c	/^  i64 mxWalSize;             \/* Truncate WAL to this size upon reset *\/$/;"	m	struct:Wal	file:
n	sqlite3.c	/^  i64 n;$/;"	m	struct:CountCtx	file:
n	sqlite3.c	/^  int n;                          \/* Length of z in bytes (excl. nul-term) *\/$/;"	m	struct:StrBuffer	file:
n	sqlite3.c	/^  int n;                          \/* Number of bytes in buffer z *\/$/;"	m	struct:Fts3PhraseToken	file:
n	sqlite3.c	/^  int n;                        \/* Number of assigned cursor values *\/$/;"	m	struct:WhereMaskSet	file:
n	sqlite3.c	/^  int n;              \/* Number of characters in string value, excluding '\\0' *\/$/;"	m	struct:Mem	file:
n	sqlite3.c	/^  unsigned int n;    \/* Number of characters in this token *\/$/;"	m	struct:Token	file:
n90pct	sqlite3.c	/^  unsigned int n90pct;                \/* nMax*9\/10 *\/$/;"	m	struct:PCache1	file:
nAccumulator	sqlite3.c	/^  int nAccumulator;       \/* Number of columns that show through to the output.$/;"	m	struct:AggInfo	file:
nAdvance	sqlite3.c	/^  int nAdvance;                   \/* How many seg-readers to advance *\/$/;"	m	struct:Fts3MultiSegReader	file:
nAlias	sqlite3.c	/^  int nAlias;          \/* Number of aliased result set columns *\/$/;"	m	struct:Parse	file:
nAliasAlloc	sqlite3.c	/^  int nAliasAlloc;     \/* Number of allocated slots for aAlias[] *\/$/;"	m	struct:Parse	file:
nAll	sqlite3.c	/^  int nAll;                      \/* Size of a[] in bytes *\/$/;"	m	struct:Fts3Doclist	file:
nAlloc	sqlite3.c	/^  i16 nAlloc;      \/* Number of entries allocated in a[] below *\/$/;"	m	struct:SrcList	file:
nAlloc	sqlite3.c	/^  int  nAlloc;         \/* Amount of space allocated in zText *\/$/;"	m	struct:StrAccum	file:
nAlloc	sqlite3.c	/^  int nAlloc;                     \/* Allocated size of buffer z in bytes *\/$/;"	m	struct:StrBuffer	file:
nAlloc	sqlite3.c	/^  int nAlloc;            \/* Number of entries allocated below *\/$/;"	m	struct:ExprList	file:
nAlloc	sqlite3.c	/^  int nAlloc;        \/* Slots allocated for azResult[] *\/$/;"	m	struct:TabResult	file:
nAlloc	sqlite3.c	/^  int nAlloc;      \/* Number of entries allocated for a[] below *\/$/;"	m	struct:IdList	file:
nAlloc	sqlite3.c	/^  int nAlloc[NCSIZE];      \/* Total number of allocations *\/$/;"	m	struct:__anon12	file:
nAlloc	sqlite3.c	/^  u64 nAlloc;         \/* Total number of calls to malloc *\/$/;"	m	struct:Mem5Global	file:
nAllocated	sqlite3.c	/^  int nAllocated;              \/* space allocated to zToken buffer *\/$/;"	m	struct:porter_tokenizer_cursor	file:
nArg	sqlite3.c	/^  i16 nArg;            \/* Number of arguments.  -1 means unlimited *\/$/;"	m	struct:FuncDef	file:
nAux	sqlite3.c	/^  int nAux;                     \/* Number of entries allocated for apAux[] *\/$/;"	m	struct:VdbeFunc	file:
nBackfill	sqlite3.c	/^  u32 nBackfill;                  \/* Number of WAL frames backfilled into DB *\/$/;"	m	struct:WalCkptInfo	file:
nBacktrace	sqlite3.c	/^  char nBacktrace;                    \/* Number of backtraces on this alloc *\/$/;"	m	struct:MemBlockHdr	file:
nBacktrace	sqlite3.c	/^  int nBacktrace;$/;"	m	struct:__anon12	file:
nBacktraceSlots	sqlite3.c	/^  char nBacktraceSlots;               \/* Available backtrace slots *\/$/;"	m	struct:MemBlockHdr	file:
nBackup	sqlite3.c	/^  int nBackup;       \/* Number of backup operations reading this btree *\/$/;"	m	struct:Btree	file:
nBlock	sqlite3.c	/^  int nBlock;      \/* Number of szAtom sized blocks in zPool *\/$/;"	m	struct:Mem5Global	file:
nBuf	sqlite3.c	/^  int nBuf;                       \/* Size of zBuf[] in bytes *\/$/;"	m	struct:JournalFile	file:
nBuffer	sqlite3.c	/^  int nBuffer;                    \/* Allocated size of aBuffer[] in bytes *\/$/;"	m	struct:Fts3MultiSegReader	file:
nBuffer	sqlite3.c	/^  int nBuffer;$/;"	m	struct:IcuCursor	file:
nBusy	sqlite3.c	/^  int nBusy;                  \/* Current number of users of this structure *\/$/;"	m	struct:Rtree	file:
nBusy	sqlite3.c	/^  int nBusy;                 \/* Incremented with each busy call *\/$/;"	m	struct:BusyHandler	file:
nByte	sqlite3.c	/^  int nByte;              \/* Size of open blob, in bytes *\/$/;"	m	struct:Incrblob	file:
nByte	sqlite3.c	/^  u8 nByte;         \/* Size in byte of text or blob. *\/$/;"	m	struct:IndexSample	file:
nBytes	sqlite3.c	/^  int nBytes;                  \/* size of the input *\/$/;"	m	struct:simple_tokenizer_cursor	file:
nBytesPerCell	sqlite3.c	/^  int nBytesPerCell;          \/* Bytes consumed per cell *\/$/;"	m	struct:Rtree	file:
nCell	sqlite3.c	/^  u16 nCell;           \/* Number of cells on this page, local and ovfl *\/$/;"	m	struct:MemPage	file:
nChange	sqlite3.c	/^  int nChange;                  \/* Value returned by sqlite3_changes() *\/$/;"	m	struct:sqlite3	file:
nChange	sqlite3.c	/^  int nChange;            \/* Number of db changes made since last reset *\/$/;"	m	struct:Vdbe	file:
nChange	sqlite3.c	/^  int nChange;            \/* Statement changes (Vdbe.nChanges)     *\/$/;"	m	struct:VdbeFrame	file:
nChar	sqlite3.c	/^  int  nChar;          \/* Length of the string so far *\/$/;"	m	struct:StrAccum	file:
nChar	sqlite3.c	/^  int nChar;                  \/* Number of UChar elements in pInput *\/$/;"	m	struct:IcuCursor	file:
nChild	sqlite3.c	/^  u8 nChild;              \/* Number of children that must disable us *\/$/;"	m	struct:WhereTerm	file:
nChildCsr	sqlite3.c	/^  int nChildCsr;          \/* Number of cursors for child frame *\/$/;"	m	struct:VdbeFrame	file:
nChildMem	sqlite3.c	/^  int nChildMem;          \/* Number of memory cells for child frame *\/$/;"	m	struct:VdbeFrame	file:
nCkpt	sqlite3.c	/^  u32 nCkpt;                 \/* Checkpoint sequence counter in the wal-header *\/$/;"	m	struct:Wal	file:
nCol	sqlite3.c	/^  int nCol;                           \/* Number of entries in azCol[] *\/$/;"	m	struct:ParseContext	file:
nCol	sqlite3.c	/^  int nCol;                       \/* Number of columns in table *\/$/;"	m	struct:MatchInfo	file:
nCol	sqlite3.c	/^  int nCol;            \/* Number of columns in this table *\/$/;"	m	struct:Table	file:
nCol	sqlite3.c	/^  int nCol;         \/* Number of columns in this key *\/$/;"	m	struct:FKey	file:
nColCache	sqlite3.c	/^  u8 nColCache;        \/* Number of entries in the column cache *\/$/;"	m	struct:Parse	file:
nColumn	sqlite3.c	/^  int nColumn;                    \/* number of named columns in virtual table *\/$/;"	m	struct:Fts3Table	file:
nColumn	sqlite3.c	/^  int nColumn;            \/* Number of used entries in aCol[] *\/$/;"	m	struct:AggInfo	file:
nColumn	sqlite3.c	/^  int nColumn;       \/* Number of columns in the result *\/$/;"	m	struct:TabResult	file:
nColumn	sqlite3.c	/^  int nColumn;     \/* Number of columns in the table used by this index *\/$/;"	m	struct:Index	file:
nColumnAlloc	sqlite3.c	/^  int nColumnAlloc;       \/* Number of slots allocated for aCol[] *\/$/;"	m	struct:AggInfo	file:
nConstraint	sqlite3.c	/^  int nConstraint;                  \/* Number of entries in aConstraint *\/$/;"	m	struct:RtreeCursor	file:
nConstraint	sqlite3.c	/^  int nConstraint;           \/* Number of entries in aConstraint *\/$/;"	m	struct:sqlite3_index_info	file:
nCost	sqlite3.c	/^  int nCost;                      \/* Cost of running iterator *\/$/;"	m	struct:Fts3MultiSegReader	file:
nCsr	sqlite3.c	/^  int nCsr;                     \/* Number of cursors required *\/$/;"	m	struct:SubProgram	file:
nCurrent	sqlite3.c	/^  int nCurrent[NCSIZE];    \/* Current number of allocations *\/$/;"	m	struct:__anon12	file:
nCurrentPage	sqlite3.c	/^  int nCurrentPage;              \/* Number of purgeable pages allocated *\/$/;"	m	struct:PGroup	file:
nCursor	sqlite3.c	/^  u16 nCursor;            \/* Number of entries in apCsr *\/$/;"	m	struct:VdbeFrame	file:
nCursor	sqlite3.c	/^  u16 nCursor;            \/* Number of slots in apCsr[] *\/$/;"	m	struct:Vdbe	file:
nData	sqlite3.c	/^  int nData;                      \/* Bytes of data in aData *\/$/;"	m	struct:SegmentWriter	file:
nData	sqlite3.c	/^  int nData;                      \/* Bytes of valid data so far *\/$/;"	m	struct:SegmentNode	file:
nData	sqlite3.c	/^  int nData;         \/* Slots used in azResult[].  (nRow+1)*nColumn *\/$/;"	m	struct:TabResult	file:
nData	sqlite3.c	/^  int nData;$/;"	m	struct:PendingList	file:
nData	sqlite3.c	/^  u32 nData;     \/* Number of bytes of data *\/$/;"	m	struct:CellInfo	file:
nDb	sqlite3.c	/^  int nDb;                      \/* Number of backends currently in use *\/$/;"	m	struct:sqlite3	file:
nDeferredCons	sqlite3.c	/^  i64 nDeferredCons;                  \/* Number of deferred fk violations *\/$/;"	m	struct:Savepoint	file:
nDeferredCons	sqlite3.c	/^  i64 nDeferredCons;            \/* Net deferred constraints this transaction. *\/$/;"	m	struct:sqlite3	file:
nDepth	sqlite3.c	/^  int nDepth;          \/* Depth of subquery recursion. 1 for no recursion *\/$/;"	m	struct:NameContext	file:
nDim	sqlite3.c	/^  int nDim;                   \/* Number of dimensions *\/$/;"	m	struct:Rtree	file:
nDoc	sqlite3.c	/^    sqlite3_int64 nDoc;           \/* 'documents' values for current csr row *\/$/;"	m	struct:Fts3auxCursor::Fts3auxColstats	file:
nDoc	sqlite3.c	/^  sqlite3_int64 nDoc;             \/* Documents in table *\/$/;"	m	struct:Fts3Cursor	file:
nDoc	sqlite3.c	/^  sqlite3_int64 nDoc;             \/* Number of docs in database *\/$/;"	m	struct:MatchInfo	file:
nDoclist	sqlite3.c	/^  int nDoclist;                   \/* Size of aDoclist[] in bytes *\/$/;"	m	struct:Fts3MultiSegReader	file:
nDoclist	sqlite3.c	/^  int nDoclist;                   \/* Size of buffer at aDoclist *\/$/;"	m	struct:Fts3Cursor	file:
nDoclist	sqlite3.c	/^  int nDoclist;                   \/* Size of doclist in current entry *\/$/;"	m	struct:Fts3SegReader	file:
nEntry	sqlite3.c	/^    int nEntry;                   \/* Nr. of entries in aPgno[] and aIndex[] *\/$/;"	m	struct:WalIterator::WalSegment	file:
nEntry	sqlite3.c	/^  int nEntry;                     \/* Number of terms written to node so far *\/$/;"	m	struct:SegmentNode	file:
nEq	sqlite3.c	/^  u32 nEq;                       \/* Number of == constraints *\/$/;"	m	struct:WherePlan	file:
nErr	sqlite3.c	/^  int nErr;            \/* Number of errors encountered while resolving names *\/$/;"	m	struct:NameContext	file:
nErr	sqlite3.c	/^  int nErr;            \/* Number of errors seen *\/$/;"	m	struct:Parse	file:
nErr	sqlite3.c	/^  int nErr;         \/* Number of messages written to zErrMsg so far *\/$/;"	m	struct:IntegrityCk	file:
nExpr	sqlite3.c	/^  int nExpr;             \/* Number of expressions on the list *\/$/;"	m	struct:ExprList	file:
nExt	sqlite3.c	/^  int nExt;              \/* Number of entries in aExt[] *\/          $/;"	m	struct:sqlite3AutoExtList	file:
nExtension	sqlite3.c	/^  int nExtension;               \/* Number of loaded extensions *\/$/;"	m	struct:sqlite3	file:
nExtra	sqlite3.c	/^  u16 nExtra;                 \/* Add this many bytes to each in-memory page *\/$/;"	m	struct:Pager	file:
nField	sqlite3.c	/^  int nField;           \/* Number of fields in the header *\/$/;"	m	struct:VdbeCursor	file:
nField	sqlite3.c	/^  u16 nField;         \/* Number of entries in aColl[] *\/$/;"	m	struct:KeyInfo	file:
nField	sqlite3.c	/^  u16 nField;         \/* Number of entries in apMem[] *\/$/;"	m	struct:UnpackedRecord	file:
nFkConstraint	sqlite3.c	/^  i64 nFkConstraint;      \/* Number of imm. FK constraints this VM *\/$/;"	m	struct:Vdbe	file:
nFrame	sqlite3.c	/^  int nFrame;             \/* Number of frames in pFrame list *\/$/;"	m	struct:Vdbe	file:
nFree	sqlite3.c	/^  u16 nFree;           \/* Number of free bytes on the page *\/$/;"	m	struct:MemPage	file:
nFreeSlot	sqlite3.c	/^  int nFreeSlot;                 \/* Number of unused pcache slots *\/$/;"	m	struct:PCacheGlobal	file:
nFresh	sqlite3.c	/^  u16 nFresh;                    \/* Number of objects on pFresh *\/$/;"	m	struct:RowSet	file:
nFunc	sqlite3.c	/^  int nFunc;              \/* Number of entries in aFunc[] *\/$/;"	m	struct:AggInfo	file:
nFuncAlloc	sqlite3.c	/^  int nFuncAlloc;         \/* Number of slots allocated for aFunc[] *\/$/;"	m	struct:AggInfo	file:
nHash	sqlite3.c	/^  unsigned int nHash;                 \/* Number of slots in apHash[] *\/$/;"	m	struct:PCache1	file:
nHeader	sqlite3.c	/^  u16 nHeader;   \/* Size of the cell content header in bytes *\/$/;"	m	struct:CellInfo	file:
nHeap	sqlite3.c	/^  int nHeap;                        \/* Size of pHeap[] *\/$/;"	m	struct:Sqlite3Config	file:
nHeight	sqlite3.c	/^  int nHeight;            \/* Expression tree height of current sub-select *\/$/;"	m	struct:Parse	file:
nHeight	sqlite3.c	/^  int nHeight;           \/* Height of the tree headed by this node *\/$/;"	m	struct:Expr	file:
nHit	sqlite3.c	/^  int nHit, nMiss;            \/* Cache hits and missing *\/$/;"	m	struct:Pager	file:
nId	sqlite3.c	/^  int nId;         \/* Number of identifiers on the list *\/$/;"	m	struct:IdList	file:
nIn	sqlite3.c	/^      int nIn;              \/* Number of entries in aInLoop[] *\/$/;"	m	struct:WhereLevel::__anon7::__anon8	file:
nIndex	sqlite3.c	/^  int nIndex;                     \/* Size of aIndex[] *\/$/;"	m	struct:Fts3Table	file:
nInput	sqlite3.c	/^  int nInput;                  \/* size of the input *\/$/;"	m	struct:porter_tokenizer_cursor	file:
nKey	sqlite3.c	/^  const char *pKey; int nKey;  \/* Key associated with this element *\/$/;"	m	struct:HashElem	file:
nKey	sqlite3.c	/^  i64 nKey;        \/* Size of pKey, or last integer key *\/$/;"	m	struct:BtCursor	file:
nKey	sqlite3.c	/^  i64 nKey;      \/* The key for INTKEY tables, or number of bytes in key *\/$/;"	m	struct:CellInfo	file:
nKey	sqlite3.c	/^  void *pKey; int nKey;      \/* Key associated with this element *\/$/;"	m	struct:Fts3HashElem	file:
nLabel	sqlite3.c	/^  int nLabel;             \/* Number of labels used *\/$/;"	m	struct:Vdbe	file:
nLabelAlloc	sqlite3.c	/^  int nLabelAlloc;        \/* Number of slots allocated in aLabel[] *\/$/;"	m	struct:Vdbe	file:
nLevel	sqlite3.c	/^  int nLevel;                    \/* Number of nested loop *\/$/;"	m	struct:WhereInfo	file:
nList	sqlite3.c	/^  int nList;                     \/* Length of position list *\/$/;"	m	struct:Fts3Doclist	file:
nLocal	sqlite3.c	/^  u16 nLocal;    \/* Amount of payload held locally *\/$/;"	m	struct:CellInfo	file:
nLock	sqlite3.c	/^  int nLock;                      \/* Number of outstanding file locks *\/$/;"	m	struct:unixInodeInfo	file:
nLookaside	sqlite3.c	/^  int nLookaside;                   \/* Default lookaside buffer count *\/$/;"	m	struct:Sqlite3Config	file:
nMalloc	sqlite3.c	/^  int nMalloc;                    \/* Size of malloc'd buffer at zMalloc *\/$/;"	m	struct:SegmentNode	file:
nMalloc	sqlite3.c	/^  int nMalloc;                    \/* Size of malloc'd buffer at zMalloc *\/$/;"	m	struct:SegmentWriter	file:
nMatchinfo	sqlite3.c	/^  int nMatchinfo;                 \/* Number of elements in aMatchinfo[] *\/$/;"	m	struct:Fts3Cursor	file:
nMax	sqlite3.c	/^  int nMax;                           \/* Configured cache size *\/$/;"	m	struct:PCache	file:
nMax	sqlite3.c	/^  unsigned int nMax;                  \/* Configured "cache_size" value *\/$/;"	m	struct:PCache1	file:
nMaxArg	sqlite3.c	/^  int nMaxArg;         \/* Max args passed to user function by sub-program *\/$/;"	m	struct:Parse	file:
nMaxPage	sqlite3.c	/^  int nMaxPage;                  \/* Sum of nMax for purgeable caches *\/$/;"	m	struct:PGroup	file:
nMaxPendingData	sqlite3.c	/^  int nMaxPendingData;            \/* Max pending data before flush to disk *\/$/;"	m	struct:Fts3Table	file:
nMem	sqlite3.c	/^  int nMem;                     \/* Number of memory cells required *\/$/;"	m	struct:SubProgram	file:
nMem	sqlite3.c	/^  int nMem;               \/* Number of entries in aMem *\/$/;"	m	struct:VdbeFrame	file:
nMem	sqlite3.c	/^  int nMem;               \/* Number of memory locations currently allocated *\/$/;"	m	struct:Vdbe	file:
nMem	sqlite3.c	/^  int nMem;            \/* Number of memory cells used so far *\/$/;"	m	struct:Parse	file:
nMem	sqlite3.c	/^  int nMem;         \/* Number of registers allocated *\/$/;"	m	struct:SelectDest	file:
nMin	sqlite3.c	/^  unsigned int nMin;                  \/* Minimum number of pages reserved *\/$/;"	m	struct:PCache1	file:
nMinPage	sqlite3.c	/^  int nMinPage;                  \/* Sum of nMin for purgeable caches *\/$/;"	m	struct:PGroup	file:
nMiss	sqlite3.c	/^  int nHit, nMiss;            \/* Cache hits and missing *\/$/;"	m	struct:Pager	file:
nModuleArg	sqlite3.c	/^  int nModuleArg;      \/* Number of arguments to the module *\/$/;"	m	struct:Table	file:
nName	sqlite3.c	/^  int nName;                    \/* Length of the zCanonicalName[] string *\/$/;"	m	struct:vxworksFileId	file:
nNear	sqlite3.c	/^  int nNear;                 \/* Valid if eType==FTSQUERY_NEAR *\/$/;"	m	struct:Fts3Expr	file:
nNest	sqlite3.c	/^  int nNest;                          \/* Number of nested brackets *\/$/;"	m	struct:ParseContext	file:
nNode	sqlite3.c	/^  int nNode;                      \/* Size of buffer at aNode (or 0) *\/$/;"	m	struct:Fts3SegReader	file:
nNodeSize	sqlite3.c	/^  int nNodeSize;                  \/* Soft limit for node size *\/$/;"	m	struct:Fts3Table	file:
nOcc	sqlite3.c	/^    sqlite3_int64 nOcc;           \/* 'occurrences' values for current csr row *\/$/;"	m	struct:Fts3auxCursor::Fts3auxColstats	file:
nOffsetList	sqlite3.c	/^  int nOffsetList;                \/* For descending pending seg-readers only *\/$/;"	m	struct:Fts3SegReader	file:
nOp	sqlite3.c	/^  int nOp;                      \/* Elements in aOp[] *\/$/;"	m	struct:SubProgram	file:
nOp	sqlite3.c	/^  int nOp;                \/* Number of instructions in the program *\/$/;"	m	struct:Vdbe	file:
nOp	sqlite3.c	/^  int nOp;                \/* Size of aOp array *\/$/;"	m	struct:VdbeFrame	file:
nOpAlloc	sqlite3.c	/^  int nOpAlloc;           \/* Number of slots allocated for aOp[] *\/$/;"	m	struct:Vdbe	file:
nOrderBy	sqlite3.c	/^  int nOrderBy;              \/* Number of terms in the ORDER BY clause *\/$/;"	m	struct:sqlite3_index_info	file:
nOrig	sqlite3.c	/^  Pgno nOrig;                  \/* Original number of pages in file *\/$/;"	m	struct:PagerSavepoint	file:
nOut	sqlite3.c	/^  int nOut;               \/* Number of buffers currently checked out *\/$/;"	m	struct:Lookaside	file:
nOverflow	sqlite3.c	/^  u8 nOverflow;        \/* Number of overflow cell bodies in aCell[] *\/$/;"	m	struct:MemPage	file:
nOvfl	sqlite3.c	/^  int nOvfl;$/;"	m	struct:Fts3TokenAndCost	file:
nPage	sqlite3.c	/^  Pgno nPage;       \/* Number of pages in the database *\/$/;"	m	struct:IntegrityCk	file:
nPage	sqlite3.c	/^  int nPage;                        \/* Number of pages in pPage[] *\/$/;"	m	struct:Sqlite3Config	file:
nPage	sqlite3.c	/^  u32 nPage;                      \/* Size of database in pages *\/$/;"	m	struct:WalIndexHdr	file:
nPage	sqlite3.c	/^  u32 nPage;            \/* Number of pages in the database *\/$/;"	m	struct:BtShared	file:
nPage	sqlite3.c	/^  unsigned int nPage;                 \/* Total number of pages in apHash *\/$/;"	m	struct:PCache1	file:
nPagecount	sqlite3.c	/^  Pgno nPagecount;         \/* Total number of pages to copy *\/$/;"	m	struct:sqlite3_backup	file:
nParam	sqlite3.c	/^  int nParam;                     \/* Size of array aParam[] *\/$/;"	m	struct:sqlite3_rtree_geometry	file:
nParam	sqlite3.c	/^  int nParam;$/;"	m	struct:RtreeMatchArg	file:
nPayload	sqlite3.c	/^  u32 nPayload;  \/* Total amount of payload *\/$/;"	m	struct:CellInfo	file:
nPendingData	sqlite3.c	/^  int nPendingData;               \/* Current bytes of pending data *\/$/;"	m	struct:Fts3Table	file:
nPgsz	sqlite3.c	/^  int nPgsz;                      \/* Page size for host database *\/$/;"	m	struct:Fts3Table	file:
nPhrase	sqlite3.c	/^  int nPhrase;                    \/* Number of matchable phrases in query *\/$/;"	m	struct:Fts3Cursor	file:
nPhrase	sqlite3.c	/^  int nPhrase;                    \/* Number of matchable phrases in query *\/$/;"	m	struct:MatchInfo	file:
nPhrase	sqlite3.c	/^  int nPhrase;                    \/* Number of phrases in query *\/$/;"	m	struct:SnippetIter	file:
nPhrase	sqlite3.c	/^  int nPhrase;                    \/* Number of phrases seen so far *\/$/;"	m	struct:LoadDoclistCtx	file:
nPool	sqlite3.c	/^  u32 nPool;$/;"	m	struct:Mem3Global	file:
nPopulate	sqlite3.c	/^  int nPopulate;                  \/* If >0, bytes of buffer aNode[] loaded *\/$/;"	m	struct:Fts3SegReader	file:
nPrefix	sqlite3.c	/^    int nPrefix;                  \/* Prefix length (0 for main terms index) *\/$/;"	m	struct:Fts3Table::Fts3Index	file:
nProgressOps	sqlite3.c	/^  int nProgressOps;             \/* Number of opcodes for progress callback *\/$/;"	m	struct:sqlite3	file:
nQPlan	sqlite3.c	/^static int nQPlan = 0;              \/* Next free slow in _query_plan[] *\/$/;"	v	file:
nQueryLoop	sqlite3.c	/^  double nQueryLoop;   \/* Estimated number of iterations of a query *\/$/;"	m	struct:Parse	file:
nRangeReg	sqlite3.c	/^  int nRangeReg;       \/* Size of the temporary register block *\/$/;"	m	struct:Parse	file:
nRead	sqlite3.c	/^  int nRead, nWrite;          \/* Database pages read\/written *\/$/;"	m	struct:Pager	file:
nReaders	sqlite3.c	/^  int nReaders;       \/* Number of reader locks obtained *\/$/;"	m	struct:winceLock	file:
nRec	sqlite3.c	/^  int nRec;                   \/* Pages journalled since last j-header written *\/$/;"	m	struct:Pager	file:
nRecyclable	sqlite3.c	/^  unsigned int nRecyclable;           \/* Number of pages in the LRU list *\/$/;"	m	struct:PCache1	file:
nRef	sqlite3.c	/^  i16 nRef;                      \/* Number of users of this page *\/$/;"	m	struct:PgHdr	file:
nRef	sqlite3.c	/^  int nRef;                           \/* Number of referenced pages *\/$/;"	m	struct:PCache	file:
nRef	sqlite3.c	/^  int nRef;                       \/* NO LONGER USED *\/$/;"	m	struct:sqlite3_vtab	file:
nRef	sqlite3.c	/^  int nRef;                       \/* Number of pointers to this structure *\/$/;"	m	struct:unixInodeInfo	file:
nRef	sqlite3.c	/^  int nRef;                     \/* Number of references to this one *\/$/;"	m	struct:vxworksFileId	file:
nRef	sqlite3.c	/^  int nRef;                  \/* Number of os2ShmLink objects pointing to this *\/$/;"	m	struct:os2ShmNode	file:
nRef	sqlite3.c	/^  int nRef;                  \/* Number of unixShm objects pointing to this *\/$/;"	m	struct:unixShmNode	file:
nRef	sqlite3.c	/^  int nRef;                  \/* Number of winShm objects pointing to this *\/$/;"	m	struct:winShmNode	file:
nRef	sqlite3.c	/^  int nRef;                 \/* Number of pointers to this structure *\/$/;"	m	struct:VTable	file:
nRef	sqlite3.c	/^  int nRef;             \/* Number of references to this structure *\/$/;"	m	struct:BtShared	file:
nRef	sqlite3.c	/^  int nRef;            \/* Number of names resolved by this context *\/$/;"	m	struct:NameContext	file:
nRef	sqlite3.c	/^  int nRef;$/;"	m	struct:FuncDestructor	file:
nRef	sqlite3.c	/^  int nRef;$/;"	m	struct:RtreeNode	file:
nRef	sqlite3.c	/^  u16 nRef;            \/* Number of pointers to this Table *\/$/;"	m	struct:Table	file:
nRef	sqlite3.c	/^  volatile int nRef;         \/* Number of enterances *\/$/;"	m	struct:sqlite3_mutex	file:
nRef	sqlite3.c	/^  volatile int nRef;         \/* Number of entrances *\/$/;"	m	struct:sqlite3_mutex	file:
nRefInitMutex	sqlite3.c	/^  int nRefInitMutex;                \/* Number of users of pInitMutex *\/$/;"	m	struct:Sqlite3Config	file:
nRegion	sqlite3.c	/^  int nRegion;               \/* Size of array apRegion *\/$/;"	m	struct:os2ShmNode	file:
nRegion	sqlite3.c	/^  int nRegion;               \/* Size of array apRegion *\/$/;"	m	struct:winShmNode	file:
nRegion	sqlite3.c	/^  u16 nRegion;               \/* Size of array apRegion *\/$/;"	m	struct:unixShmNode	file:
nRemaining	sqlite3.c	/^  Pgno nRemaining;         \/* Number of pages left to copy *\/$/;"	m	struct:sqlite3_backup	file:
nResColumn	sqlite3.c	/^  u16 nResColumn;         \/* Number of columns in one row of the result set *\/$/;"	m	struct:Vdbe	file:
nReserve	sqlite3.c	/^  i16 nReserve;               \/* Number of unused bytes at end of each page *\/$/;"	m	struct:Pager	file:
nReserve	sqlite3.c	/^  int nReserve;                  \/* Try to keep nFreeSlot above this *\/$/;"	m	struct:PCacheGlobal	file:
nRow	sqlite3.c	/^  double nRow;                   \/* Estimated number of rows (for EQP) *\/$/;"	m	struct:WherePlan	file:
nRow	sqlite3.c	/^  int nRow;          \/* Number of rows in the result *\/$/;"	m	struct:TabResult	file:
nRowAvg	sqlite3.c	/^  int nRowAvg;                    \/* Average size of database rows, in pages *\/$/;"	m	struct:Fts3Cursor	file:
nRowEst	sqlite3.c	/^  unsigned nRowEst;    \/* Estimated rows in table - from sqlite_stat1 table *\/$/;"	m	struct:Table	file:
nRowOut	sqlite3.c	/^  double nRowOut;                \/* Estimated number of output rows *\/$/;"	m	struct:WhereInfo	file:
nSavepoint	sqlite3.c	/^  int nSavepoint;               \/* Number of non-transaction savepoints *\/$/;"	m	struct:sqlite3	file:
nSavepoint	sqlite3.c	/^  int nSavepoint;             \/* Number of elements in aSavepoint[] *\/$/;"	m	struct:Pager	file:
nScratch	sqlite3.c	/^  int nScratch;                     \/* Number of scratch buffers *\/$/;"	m	struct:Sqlite3Config	file:
nScratchFree	sqlite3.c	/^  u32 nScratchFree;$/;"	m	struct:Mem0Global	file:
nSegment	sqlite3.c	/^  int nSegment;                   \/* Number of entries in aSegment[] *\/$/;"	m	struct:WalIterator	file:
nSegment	sqlite3.c	/^  int nSegment;                   \/* Size of apSegment array *\/$/;"	m	struct:Fts3MultiSegReader	file:
nSelectRow	sqlite3.c	/^  double nSelectRow;     \/* Estimated number of result rows *\/$/;"	m	struct:Select	file:
nSet	sqlite3.c	/^  int nSet;            \/* Number of sets used so far *\/$/;"	m	struct:Parse	file:
nSet	sqlite3.c	/^  u32 nSet;       \/* Number of bits that are set - only valid for aHash$/;"	m	struct:Bitvec	file:
nShared	sqlite3.c	/^  int nShared;                    \/* Number of SHARED locks held *\/$/;"	m	struct:unixInodeInfo	file:
nSize	sqlite3.c	/^  int nSize;                      \/* Size of allocation at aData *\/$/;"	m	struct:SegmentWriter	file:
nSize	sqlite3.c	/^  u16 nSize;     \/* Size of the cell content on the main b-tree page *\/$/;"	m	struct:CellInfo	file:
nSlot	sqlite3.c	/^  int nSlot;                     \/* The number of pcache slots *\/$/;"	m	struct:PCacheGlobal	file:
nSlot	sqlite3.c	/^  int nSlot;               \/* Number of entries in a[] *\/$/;"	m	struct:WhereClause	file:
nSnippet	sqlite3.c	/^  int nSnippet;                   \/* Requested snippet length (in tokens) *\/$/;"	m	struct:SnippetIter	file:
nSortingColumn	sqlite3.c	/^  int nSortingColumn;     \/* Number of columns in the sorting index *\/$/;"	m	struct:AggInfo	file:
nSpace	sqlite3.c	/^  int nSpace;$/;"	m	struct:PendingList	file:
nSrc	sqlite3.c	/^  i16 nSrc;        \/* Number of tables or subqueries in the FROM clause *\/$/;"	m	struct:SrcList	file:
nStat	sqlite3.c	/^  int nStat;                      \/* Size of aStat[] array *\/$/;"	m	struct:Fts3auxCursor	file:
nStatement	sqlite3.c	/^  int nStatement;               \/* Number of nested statement-transactions  *\/$/;"	m	struct:sqlite3	file:
nStmtDefCons	sqlite3.c	/^  i64 nStmtDefCons;       \/* Number of def. constraints when stmt started *\/$/;"	m	struct:Vdbe	file:
nStop	sqlite3.c	/^  int nStop;                      \/* Byte-length of string zStop *\/$/;"	m	struct:Fts3auxCursor	file:
nSub	sqlite3.c	/^  int nSub;                  \/* Number of entries in apSub *\/$/;"	m	struct:VdbeOpIter	file:
nSubRec	sqlite3.c	/^  u32 nSubRec;                \/* Number of records written to sub-journal *\/$/;"	m	struct:Pager	file:
nTab	sqlite3.c	/^  int nTab;            \/* Number of previously allocated VDBE cursors *\/$/;"	m	struct:Parse	file:
nTable	sqlite3.c	/^  int nTable;                   \/* Number of tables in the database *\/$/;"	m	struct:sqlite3	file:
nTableLock	sqlite3.c	/^  int nTableLock;        \/* Number of locks in aTableLock *\/$/;"	m	struct:Parse	file:
nTempInUse	sqlite3.c	/^  u8 nTempInUse;       \/* Number of aTempReg[] currently checked out *\/$/;"	m	struct:Parse	file:
nTempReg	sqlite3.c	/^  u8 nTempReg;         \/* Number of temporary registers in aTempReg[] *\/$/;"	m	struct:Parse	file:
nTerm	sqlite3.c	/^  int nTerm;                      \/* Number of bytes in current term *\/$/;"	m	struct:Fts3SegReader	file:
nTerm	sqlite3.c	/^  int nTerm;                      \/* Number of bytes in zTerm *\/$/;"	m	struct:SegmentNode	file:
nTerm	sqlite3.c	/^  int nTerm;                      \/* Number of bytes in zTerm *\/$/;"	m	struct:SegmentWriter	file:
nTerm	sqlite3.c	/^  int nTerm;                      \/* Size of zTerm in bytes *\/$/;"	m	struct:Fts3MultiSegReader	file:
nTerm	sqlite3.c	/^  int nTerm;               \/* Number of terms *\/$/;"	m	struct:WhereClause	file:
nTerm	sqlite3.c	/^  int nTerm;$/;"	m	struct:Fts3SegFilter	file:
nTermAlloc	sqlite3.c	/^  int nTermAlloc;                 \/* Allocated size of zTerm buffer *\/$/;"	m	struct:Fts3SegReader	file:
nTitle	sqlite3.c	/^  int nTitle;        \/* Bytes of zTitle to save.  Includes '\\0' and padding *\/$/;"	m	struct:__anon12	file:
nTitle	sqlite3.c	/^  u8 nTitle;                          \/* Bytes of title; includes '\\0' *\/$/;"	m	struct:MemBlockHdr	file:
nToken	sqlite3.c	/^  int nToken;                     \/* Number of tokens in phrase *\/$/;"	m	struct:SnippetPhrase	file:
nToken	sqlite3.c	/^  int nToken;                     \/* Number of tokens seen so far *\/$/;"	m	struct:LoadDoclistCtx	file:
nToken	sqlite3.c	/^  int nToken;                \/* Number of tokens in the phrase *\/$/;"	m	struct:Fts3Phrase	file:
nTokenAllocated	sqlite3.c	/^  int nTokenAllocated;         \/* space allocated to zToken buffer *\/$/;"	m	struct:simple_tokenizer_cursor	file:
nTotalChange	sqlite3.c	/^  int nTotalChange;             \/* Value returned by sqlite3_total_changes() *\/$/;"	m	struct:sqlite3	file:
nTransaction	sqlite3.c	/^  int nTransaction;     \/* Number of open transactions (read + write) *\/$/;"	m	struct:BtShared	file:
nVTrans	sqlite3.c	/^  int nVTrans;                  \/* Allocated size of aVTrans *\/$/;"	m	struct:sqlite3	file:
nVar	sqlite3.c	/^  int nVar;            \/* Number of '?' variables seen in the SQL so far *\/$/;"	m	struct:Parse	file:
nVar	sqlite3.c	/^  ynVar nVar;             \/* Number of entries in aVar[] *\/$/;"	m	struct:Vdbe	file:
nVtabLock	sqlite3.c	/^  int nVtabLock;             \/* Number of virtual tables to lock *\/$/;"	m	struct:Parse	file:
nWiData	sqlite3.c	/^  int nWiData;               \/* Size of array apWiData *\/$/;"	m	struct:Wal	file:
nWrite	sqlite3.c	/^  int nRead, nWrite;          \/* Database pages read\/written *\/$/;"	m	struct:Pager	file:
nZero	sqlite3.c	/^    int nZero;          \/* Used when bit MEM_Zero is set in flags *\/$/;"	m	union:Mem::__anon11	file:
nameClash	sqlite3.c	/^  u8 nameClash;        \/* A permanent table name clashes with temp table name *\/$/;"	m	struct:Parse	file:
nearlyFull	sqlite3.c	/^  int nearlyFull;$/;"	m	struct:Mem0Global	file:
needToFreeIdxStr	sqlite3.c	/^  int needToFreeIdxStr;      \/* Free idxStr using sqlite3_free() if true *\/$/;"	m	struct:sqlite3_index_info	file:
nelderMead	Model.cpp	/^bool HMM_PP::Model::nelderMead()  {$/;"	f	class:HMM_PP::Model
nested	sqlite3.c	/^  u8 nested;           \/* Number of nested calls to the parser\/code generator *\/$/;"	m	struct:Parse	file:
newDatabase	sqlite3.c	/^static int newDatabase(BtShared *pBt){$/;"	f	file:
newRowid	sqlite3.c	/^static int newRowid(Rtree *pRtree, i64 *piRowid){$/;"	f	file:
newTnum	sqlite3.c	/^    int newTnum;                \/* Rootpage of table being initialized *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	file:
newmask	sqlite3.c	/^  u32 newmask;         \/* Mask of new.* columns referenced *\/$/;"	m	struct:Parse	file:
next	sqlite3.c	/^      u32 next;       \/* Index in mem3.aPool[] of next free chunk *\/$/;"	m	struct:Mem3Block::__anon13::__anon15	file:
next	sqlite3.c	/^  Fts3HashElem *next, *prev; \/* Next and previous elements in the table *\/$/;"	m	struct:Fts3HashElem	file:
next	sqlite3.c	/^  HashElem *next, *prev;       \/* Next and previous elements in the table *\/$/;"	m	struct:HashElem	file:
next	sqlite3.c	/^  int next;       \/* Index of next free chunk *\/$/;"	m	struct:Mem5Link	file:
nextAutovac	sqlite3.c	/^  signed char nextAutovac;      \/* Autovac setting after VACUUM if >=0 *\/$/;"	m	struct:sqlite3	file:
nextPagesize	sqlite3.c	/^  int nextPagesize;             \/* Pagesize after VACUUM if >0 *\/$/;"	m	struct:sqlite3	file:
nextShmId	sqlite3.c	/^  u8 nextShmId;              \/* Next available unixShm.id value *\/$/;"	m	struct:unixShmNode	file:
nextShmId	sqlite3.c	/^  u8 nextShmId;              \/* Next available winShm.id value *\/$/;"	m	struct:winShmNode	file:
next_stmt	sqlite3.c	/^  sqlite3_stmt *(*next_stmt)(sqlite3*,sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
nfsUnlock	sqlite3.c	/^static int nfsUnlock(sqlite3_file *id, int eFileLock){$/;"	f	file:
noCase	sqlite3.c	/^  u8 noCase;$/;"	m	struct:compareInfo	file:
noReadlock	sqlite3.c	/^  u8 noReadlock;              \/* Do not bother to obtain readlocks *\/$/;"	m	struct:Pager	file:
noSync	sqlite3.c	/^  u8 noSync;                  \/* Do not sync the journal if true *\/$/;"	m	struct:Pager	file:
nocaseCollatingFunc	sqlite3.c	/^static int nocaseCollatingFunc($/;"	f	file:
nodeAcquire	sqlite3.c	/^nodeAcquire($/;"	f	file:
nodeDeleteCell	sqlite3.c	/^static void nodeDeleteCell(Rtree *pRtree, RtreeNode *pNode, int iCell){$/;"	f	file:
nodeGetCell	sqlite3.c	/^static void nodeGetCell($/;"	f	file:
nodeGetCoord	sqlite3.c	/^static void nodeGetCoord($/;"	f	file:
nodeGetRowid	sqlite3.c	/^static i64 nodeGetRowid($/;"	f	file:
nodeHash	sqlite3.c	/^static int nodeHash(i64 iNode){$/;"	f	file:
nodeHashDelete	sqlite3.c	/^static void nodeHashDelete(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
nodeHashInsert	sqlite3.c	/^static void nodeHashInsert(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
nodeHashLookup	sqlite3.c	/^static RtreeNode *nodeHashLookup(Rtree *pRtree, i64 iNode){$/;"	f	file:
nodeInsertCell	sqlite3.c	/^nodeInsertCell($/;"	f	file:
nodeNew	sqlite3.c	/^static RtreeNode *nodeNew(Rtree *pRtree, RtreeNode *pParent){$/;"	f	file:
nodeOverwriteCell	sqlite3.c	/^static void nodeOverwriteCell($/;"	f	file:
nodeParentIndex	sqlite3.c	/^static int nodeParentIndex(Rtree *pRtree, RtreeNode *pNode, int *piIndex){$/;"	f	file:
nodeReference	sqlite3.c	/^static void nodeReference(RtreeNode *p){$/;"	f	file:
nodeRelease	sqlite3.c	/^nodeRelease(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
nodeRowidIndex	sqlite3.c	/^static int nodeRowidIndex($/;"	f	file:
nodeWrite	sqlite3.c	/^nodeWrite(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
nodeZero	sqlite3.c	/^static void nodeZero(Rtree *pRtree, RtreeNode *p){$/;"	f	file:
nolockCheckReservedLock	sqlite3.c	/^static int nolockCheckReservedLock(sqlite3_file *NotUsed, int *pResOut){$/;"	f	file:
nolockClose	sqlite3.c	/^static int nolockClose(sqlite3_file *id) {$/;"	f	file:
nolockLock	sqlite3.c	/^static int nolockLock(sqlite3_file *NotUsed, int NotUsed2){$/;"	f	file:
nolockUnlock	sqlite3.c	/^static int nolockUnlock(sqlite3_file *NotUsed, int NotUsed2){$/;"	f	file:
noopMutexAlloc	sqlite3.c	/^static sqlite3_mutex *noopMutexAlloc(int id){ $/;"	f	file:
noopMutexEnd	sqlite3.c	/^static int noopMutexEnd(void){ return SQLITE_OK; }$/;"	f	file:
noopMutexEnter	sqlite3.c	/^static void noopMutexEnter(sqlite3_mutex *p){ UNUSED_PARAMETER(p); return; }$/;"	f	file:
noopMutexFree	sqlite3.c	/^static void noopMutexFree(sqlite3_mutex *p){ UNUSED_PARAMETER(p); return; }$/;"	f	file:
noopMutexInit	sqlite3.c	/^static int noopMutexInit(void){ return SQLITE_OK; }$/;"	f	file:
noopMutexLeave	sqlite3.c	/^static void noopMutexLeave(sqlite3_mutex *p){ UNUSED_PARAMETER(p); return; }$/;"	f	file:
noopMutexTry	sqlite3.c	/^static int noopMutexTry(sqlite3_mutex *p){$/;"	f	file:
not	sqlite3.c	/^  int not;         \/* True if the NOT keyword is present *\/$/;"	m	struct:LikeOp	file:
notIndexed	sqlite3.c	/^    u8 notIndexed;    \/* True if there is a NOT INDEXED clause *\/$/;"	m	struct:SrcList::SrcList_item	file:
notNull	sqlite3.c	/^  u8 notNull;      \/* True if there is a NOT NULL constraint *\/$/;"	m	struct:Column	file:
notUsed1	sqlite3.c	/^    double notUsed1;            \/* Spacer *\/$/;"	m	union:sqlite3::__anon2	file:
nowValue	sqlite3.c	/^  int nowValue[10];         \/* Current value *\/$/;"	m	struct:sqlite3StatType	file:
nrhs	sqlite3.c	/^  unsigned char nrhs;     \/* Number of right-hand side symbols in the rule *\/$/;"	m	struct:__anon20	file:
nullRow	sqlite3.c	/^  Bool nullRow;         \/* True if pointing to a row with no data *\/$/;"	m	struct:VdbeCursor	file:
nullifFunc	sqlite3.c	/^static void nullifFunc($/;"	f	file:
nzVar	sqlite3.c	/^  int nzVar;           \/* Number of available slots in azVar[] *\/$/;"	m	struct:Parse	file:
nzVar	sqlite3.c	/^  ynVar nzVar;            \/* Number of entries in azVar[] *\/$/;"	m	struct:Vdbe	file:
obs	MultivariateCategoricalData.cpp	/^uint HMM_PP::MultivariateCategoricalData::obs(const uint t, const uint j) {$/;"	f	class:HMM_PP::MultivariateCategoricalData
offset	sqlite3.c	/^  unsigned long long offset;        \/* offset to first byte to lock *\/$/;"	m	struct:ByteRangeLockPB2	file:
offsetof	sqlite3.c	7610;"	d	file:
okOnePass	sqlite3.c	/^  u8 okOnePass;        \/* Ok to use one-pass algorithm for UPDATE or DELETE *\/$/;"	m	struct:WhereInfo	file:
oldLockingContext	sqlite3.c	/^  void *oldLockingContext;     \/* Original lockingcontext to restore on close *\/$/;"	m	struct:proxyLockingContext	file:
oldmask	sqlite3.c	/^  u32 oldmask;         \/* Mask of old.* columns referenced *\/$/;"	m	struct:Parse	file:
omit	sqlite3.c	/^    unsigned char omit;      \/* Do not code a test for this constraint *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint_usage	file:
onError	sqlite3.c	/^  u8 onError;      \/* OE_Abort, OE_Ignore, OE_Replace, or OE_None *\/$/;"	m	struct:Index	file:
onErrorText	sqlite3.c	/^static const char *onErrorText(int onError){$/;"	f	file:
op	sqlite3.c	/^     unsigned char op;         \/* Constraint operator *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	file:
op	sqlite3.c	/^  int op;                         \/* Constraining operation *\/$/;"	m	struct:RtreeConstraint	file:
op	sqlite3.c	/^  u8 op, p5;            \/* Opcode and P5 of the opcode that ends the loop *\/$/;"	m	struct:WhereLevel	file:
op	sqlite3.c	/^  u8 op;                   \/* Split operator.  TK_AND or TK_OR *\/$/;"	m	struct:WhereClause	file:
op	sqlite3.c	/^  u8 op;                  \/* One of TK_DELETE, TK_UPDATE, TK_INSERT         *\/$/;"	m	struct:Trigger	file:
op	sqlite3.c	/^  u8 op;                 \/* One of: TK_UNION TK_ALL TK_INTERSECT TK_EXCEPT *\/$/;"	m	struct:Select	file:
op	sqlite3.c	/^  u8 op;                 \/* Operation performed by this node *\/$/;"	m	struct:Expr	file:
op	sqlite3.c	/^  u8 op;               \/* One of TK_DELETE, TK_UPDATE, TK_INSERT, TK_SELECT *\/$/;"	m	struct:TriggerStep	file:
op2	sqlite3.c	/^  u8 op2;                \/* If a TK_REGISTER, the original value of Expr.op *\/$/;"	m	struct:Expr	file:
opIterNext	sqlite3.c	/^static Op *opIterNext(VdbeOpIter *p){$/;"	f	file:
opPrecedence	sqlite3.c	/^static int opPrecedence(Fts3Expr *p){$/;"	f	file:
opcode	sqlite3.c	/^  u8 opcode;          \/* What operation to perform *\/$/;"	m	struct:VdbeOp	file:
opcode	sqlite3.c	/^  u8 opcode;          \/* What operation to perform *\/$/;"	m	struct:VdbeOpList	file:
open	sqlite3.c	/^  int  (*open)(const char*,sqlite3**);$/;"	m	struct:sqlite3_api_routines	file:
open	sqlwrap.cpp	/^bool SQL::open(const string& n, const string& scratch) {$/;"	f	class:SQL
open16	sqlite3.c	/^  int  (*open16)(const void*,sqlite3**);$/;"	m	struct:sqlite3_api_routines	file:
openDatabase	sqlite3.c	/^static int openDatabase($/;"	f	file:
openDirectory	sqlite3.c	/^static int openDirectory(const char *zFilename, int *pFd){$/;"	f	file:
openFlags	sqlite3.c	/^  int openFlags;                      \/* The flags specified at open() *\/$/;"	m	struct:unixFile	file:
openFlags	sqlite3.c	/^  u8 openFlags;         \/* Flags to sqlite3BtreeOpen() *\/$/;"	m	struct:BtShared	file:
openFlags	sqlite3.c	/^  unsigned int openFlags;       \/* Flags passed to sqlite3_vfs.xOpen() *\/$/;"	m	struct:sqlite3	file:
openStatTable	sqlite3.c	/^static void openStatTable($/;"	f	file:
openSubJournal	sqlite3.c	/^static int openSubJournal(Pager *pPager){$/;"	f	file:
open_v2	sqlite3.c	/^  int (*open_v2)(const char*,sqlite3**,int,const char*);$/;"	m	struct:sqlite3_api_routines	file:
operator >>	utils.cpp	/^HMM_PP::istreamLineReader& HMM_PP::istreamLineReader::operator>>(string& s) {$/;"	f	class:HMM_PP::istreamLineReader
operatorMask	sqlite3.c	/^static u16 operatorMask(int op){$/;"	f	file:
opflags	sqlite3.c	/^  u8 opflags;         \/* Mask of the OPFLG_* flags in opcodes.h *\/$/;"	m	struct:VdbeOp	file:
optimize	Simplex.cpp	/^bool HMM_PP::Simplex::optimize() {$/;"	f	class:HMM_PP::Simplex
optimize	Simplex.cpp	/^bool HMM_PP::Simplex::optimize(const uint rounds) {$/;"	f	class:HMM_PP::Simplex
orconf	sqlite3.c	/^  int orconf;             \/* Default ON CONFLICT policy *\/$/;"	m	struct:TriggerPrg	file:
orconf	sqlite3.c	/^  u8 orconf;           \/* OE_Rollback etc. *\/$/;"	m	struct:TriggerStep	file:
orderByConsumed	sqlite3.c	/^  int orderByConsumed;       \/* True if output is already ordered *\/$/;"	m	struct:sqlite3_index_info	file:
orphanTrigger	sqlite3.c	/^    u8 orphanTrigger;           \/* Last statement is orphaned TEMP trigger *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	file:
os2Access	sqlite3.c	/^static int os2Access($/;"	f	file:
os2CheckReservedLock	sqlite3.c	/^static int os2CheckReservedLock( sqlite3_file *id, int *pOut ){$/;"	f	file:
os2Close	sqlite3.c	/^static int os2Close( sqlite3_file *id ){$/;"	f	file:
os2CurrentTime	sqlite3.c	/^static int os2CurrentTime( sqlite3_vfs *pVfs, double *prNow ){$/;"	f	file:
os2CurrentTimeInt64	sqlite3.c	/^static int os2CurrentTimeInt64(sqlite3_vfs *pVfs, sqlite3_int64 *piNow){$/;"	f	file:
os2Delete	sqlite3.c	/^static int os2Delete($/;"	f	file:
os2DeviceCharacteristics	sqlite3.c	/^static int os2DeviceCharacteristics(sqlite3_file *id){$/;"	f	file:
os2DlClose	sqlite3.c	/^static void os2DlClose(sqlite3_vfs *pVfs, void *pHandle){$/;"	f	file:
os2DlClose	sqlite3.c	24054;"	d	file:
os2DlError	sqlite3.c	/^static void os2DlError(sqlite3_vfs *pVfs, int nBuf, char *zBufOut){$/;"	f	file:
os2DlError	sqlite3.c	24052;"	d	file:
os2DlOpen	sqlite3.c	/^static void *os2DlOpen(sqlite3_vfs *pVfs, const char *zFilename){$/;"	f	file:
os2DlOpen	sqlite3.c	24051;"	d	file:
os2DlSym	sqlite3.c	/^static void (*os2DlSym(sqlite3_vfs *pVfs, void *pHandle, const char *zSymbol))(void){$/;"	f	file:
os2DlSym	sqlite3.c	24053;"	d	file:
os2File	sqlite3.c	/^struct os2File {$/;"	s	file:
os2File	sqlite3.c	/^typedef struct os2File os2File;         \/* The file structure *\/$/;"	t	typeref:struct:os2File	file:
os2FileControl	sqlite3.c	/^static int os2FileControl(sqlite3_file *id, int op, void *pArg){$/;"	f	file:
os2FileSize	sqlite3.c	/^static int os2FileSize( sqlite3_file *id, sqlite3_int64 *pSize ){$/;"	f	file:
os2FullPathname	sqlite3.c	/^static int os2FullPathname($/;"	f	file:
os2GetLastError	sqlite3.c	/^static int os2GetLastError(sqlite3_vfs *pVfs, int nBuf, char *zBuf){$/;"	f	file:
os2IoMethod	sqlite3.c	/^static const sqlite3_io_methods os2IoMethod = {$/;"	v	file:
os2Lock	sqlite3.c	/^static int os2Lock( sqlite3_file *id, int locktype ){$/;"	f	file:
os2MutexAlloc	sqlite3.c	/^static sqlite3_mutex *os2MutexAlloc(int iType){$/;"	f	file:
os2MutexEnd	sqlite3.c	/^static int os2MutexEnd(void){ return SQLITE_OK; }$/;"	f	file:
os2MutexEnter	sqlite3.c	/^static void os2MutexEnter(sqlite3_mutex *p){$/;"	f	file:
os2MutexFree	sqlite3.c	/^static void os2MutexFree(sqlite3_mutex *p){$/;"	f	file:
os2MutexHeld	sqlite3.c	/^static int os2MutexHeld(sqlite3_mutex *p){$/;"	f	file:
os2MutexInit	sqlite3.c	/^static int os2MutexInit(void){ return SQLITE_OK; }$/;"	f	file:
os2MutexLeave	sqlite3.c	/^static void os2MutexLeave(sqlite3_mutex *p){$/;"	f	file:
os2MutexNotheld	sqlite3.c	/^static int os2MutexNotheld(sqlite3_mutex *p){$/;"	f	file:
os2MutexTrace	sqlite3.c	/^static void os2MutexTrace(sqlite3_mutex *p, char *pAction){$/;"	f	file:
os2MutexTry	sqlite3.c	/^static int os2MutexTry(sqlite3_mutex *p){$/;"	f	file:
os2Open	sqlite3.c	/^static int os2Open($/;"	f	file:
os2OpenSharedMemory	sqlite3.c	/^static int os2OpenSharedMemory( os2File *fd, int szRegion ) {$/;"	f	file:
os2PurgeShmNodes	sqlite3.c	/^static void os2PurgeShmNodes( int deleteFlag ) {$/;"	f	file:
os2Randomness	sqlite3.c	/^static int os2Randomness(sqlite3_vfs *pVfs, int nBuf, char *zBuf ){$/;"	f	file:
os2Read	sqlite3.c	/^static int os2Read($/;"	f	file:
os2SectorSize	sqlite3.c	/^static int os2SectorSize(sqlite3_file *id){$/;"	f	file:
os2ShmBarrier	sqlite3.c	/^static void os2ShmBarrier($/;"	f	file:
os2ShmBarrier	sqlite3.c	23672;"	d	file:
os2ShmEnterMutex	sqlite3.c	/^static void os2ShmEnterMutex(void){$/;"	f	file:
os2ShmLeaveMutex	sqlite3.c	/^static void os2ShmLeaveMutex(void){$/;"	f	file:
os2ShmLink	sqlite3.c	/^struct os2ShmLink {$/;"	s	file:
os2ShmLink	sqlite3.c	/^typedef struct os2ShmLink os2ShmLink;   \/* A connection to shared-memory *\/$/;"	t	typeref:struct:os2ShmLink	file:
os2ShmLock	sqlite3.c	/^static int os2ShmLock($/;"	f	file:
os2ShmLock	sqlite3.c	23671;"	d	file:
os2ShmMap	sqlite3.c	/^static int os2ShmMap($/;"	f	file:
os2ShmMap	sqlite3.c	23670;"	d	file:
os2ShmMutexHeld	sqlite3.c	/^static int os2ShmMutexHeld(void) {$/;"	f	file:
os2ShmNode	sqlite3.c	/^struct os2ShmNode {$/;"	s	file:
os2ShmNode	sqlite3.c	/^typedef struct os2ShmNode os2ShmNode;   \/* A shared descritive memory node *\/$/;"	t	typeref:struct:os2ShmNode	file:
os2ShmNodeList	sqlite3.c	/^static os2ShmNode *os2ShmNodeList = NULL;$/;"	v	file:
os2ShmSystemLock	sqlite3.c	/^static int os2ShmSystemLock($/;"	f	file:
os2ShmUnmap	sqlite3.c	/^static int os2ShmUnmap($/;"	f	file:
os2ShmUnmap	sqlite3.c	23673;"	d	file:
os2Sleep	sqlite3.c	/^static int os2Sleep( sqlite3_vfs *pVfs, int microsec ){$/;"	f	file:
os2Sync	sqlite3.c	/^static int os2Sync( sqlite3_file *id, int flags ){$/;"	f	file:
os2Truncate	sqlite3.c	/^static int os2Truncate( sqlite3_file *id, i64 nByte ){$/;"	f	file:
os2Unlock	sqlite3.c	/^static int os2Unlock( sqlite3_file *id, int locktype ){$/;"	f	file:
os2Write	sqlite3.c	/^static int os2Write($/;"	f	file:
osAccess	sqlite3.c	24784;"	d	file:
osClose	sqlite3.c	24781;"	d	file:
osFallocate	sqlite3.c	24860;"	d	file:
osFchmod	sqlite3.c	24853;"	d	file:
osFcntl	sqlite3.c	24810;"	d	file:
osFcntl	sqlite3.c	25057;"	d	file:
osFcntl	sqlite3.c	25058;"	d	file:
osFstat	sqlite3.c	24800;"	d	file:
osFtruncate	sqlite3.c	24807;"	d	file:
osGetcwd	sqlite3.c	24787;"	d	file:
osLocaltime	sqlite3.c	/^static int osLocaltime(time_t *t, struct tm *pTm){$/;"	f	file:
osOpen	sqlite3.c	24778;"	d	file:
osPread	sqlite3.c	24820;"	d	file:
osPread64	sqlite3.c	24827;"	d	file:
osPwrite	sqlite3.c	24837;"	d	file:
osPwrite64	sqlite3.c	24845;"	d	file:
osRead	sqlite3.c	24813;"	d	file:
osStat	sqlite3.c	24790;"	d	file:
osWrite	sqlite3.c	24830;"	d	file:
ostreamWriter	utils.cpp	/^HMM_PP::ostreamWriter::ostreamWriter(ostream& stream, bool deleteInner)$/;"	f	class:HMM_PP::ostreamWriter
overflow	sqlite3.c	/^  u8 overflow;      \/* True if integer overflow seen *\/$/;"	m	struct:SumCtx	file:
overload_function	sqlite3.c	/^  int (*overload_function)(sqlite3*, const char *zFuncName, int nArg);$/;"	m	struct:sqlite3_api_routines	file:
owner	sqlite3.c	/^  volatile DWORD owner;      \/* Thread holding this mutex *\/$/;"	m	struct:sqlite3_mutex	file:
owner	sqlite3.c	/^  volatile pthread_t owner;  \/* Thread that is within this mutex *\/$/;"	m	struct:sqlite3_mutex	file:
p	sqlite3.c	/^    void *p;               \/* Generic pointer *\/$/;"	m	union:VdbeOp::__anon1	file:
p1	sqlite3.c	/^  int p1, p2;           \/* Operands of the opcode used to ends the loop *\/$/;"	m	struct:WhereLevel	file:
p1	sqlite3.c	/^  int p1;             \/* First operand *\/$/;"	m	struct:VdbeOp	file:
p1	sqlite3.c	/^  signed char p1;     \/* First operand *\/$/;"	m	struct:VdbeOpList	file:
p2	sqlite3.c	/^  int p1, p2;           \/* Operands of the opcode used to ends the loop *\/$/;"	m	struct:WhereLevel	file:
p2	sqlite3.c	/^  int p2;             \/* Second parameter (often the jump destination) *\/$/;"	m	struct:VdbeOp	file:
p2	sqlite3.c	/^  signed char p2;     \/* Second parameter (often the jump destination) *\/$/;"	m	struct:VdbeOpList	file:
p3	sqlite3.c	/^  int p3;             \/* The third parameter *\/$/;"	m	struct:VdbeOp	file:
p3	sqlite3.c	/^  signed char p3;     \/* Third parameter *\/$/;"	m	struct:VdbeOpList	file:
p4	sqlite3.c	/^  } p4;$/;"	m	struct:VdbeOp	typeref:union:VdbeOp::__anon1	file:
p4type	sqlite3.c	/^  signed char p4type; \/* One of the P4_xxx constants for p4 *\/$/;"	m	struct:VdbeOp	file:
p5	sqlite3.c	/^  u8 op, p5;            \/* Opcode and P5 of the opcode that ends the loop *\/$/;"	m	struct:WhereLevel	file:
p5	sqlite3.c	/^  u8 p5;              \/* Fifth parameter is an unsigned character *\/$/;"	m	struct:VdbeOp	file:
pAggInfo	sqlite3.c	/^  AggInfo *pAggInfo;     \/* Used by TK_AGG_COLUMN and TK_AGG_FUNCTION *\/$/;"	m	struct:Expr	file:
pAggInfo	sqlite3.c	/^  AggInfo *pAggInfo;   \/* Information about aggregates at this level *\/$/;"	m	struct:NameContext	file:
pAinc	sqlite3.c	/^  AutoincInfo *pAinc;  \/* Information about AUTOINCREMENT counters *\/$/;"	m	struct:Parse	file:
pAndInfo	sqlite3.c	/^    WhereAndInfo *pAndInfo; \/* Extra information if eOperator==WO_AND *\/$/;"	m	union:WhereTerm::__anon17	file:
pAppData	sqlite3.c	/^  void *pAppData;                \/* Argument to xInit() and xShutdown() *\/$/;"	m	struct:sqlite3_mem_methods	file:
pAppData	sqlite3.c	/^  void *pAppData;          \/* Pointer to application-specific data *\/$/;"	m	struct:sqlite3_vfs	file:
pArg	sqlite3.c	/^  void *pArg;                \/* First arg to busy callback *\/$/;"	m	struct:BusyHandler	file:
pArg	sqlite3.c	/^  void *pArg;$/;"	m	struct:sqlite3_pcache_methods	file:
pAuthArg	sqlite3.c	/^  void *pAuthArg;               \/* 1st argument to the access auth function *\/$/;"	m	struct:sqlite3	file:
pAux	sqlite3.c	/^    void *pAux;                   \/* Aux data for the i-th argument *\/$/;"	m	struct:VdbeFunc::AuxData	file:
pAux	sqlite3.c	/^  void *pAux;                          \/* pAux passed to create_module() *\/$/;"	m	struct:Module	file:
pBackup	sqlite3.c	/^  sqlite3_backup *pBackup;    \/* Pointer to list of ongoing backup processes *\/$/;"	m	struct:Pager	file:
pBlob	sqlite3.c	/^  sqlite3_blob *pBlob;            \/* If not NULL, blob handle to read node *\/$/;"	m	struct:Fts3SegReader	file:
pBlockingConnection	sqlite3.c	/^  sqlite3 *pBlockingConnection; \/* Connection that caused SQLITE_LOCKED *\/$/;"	m	struct:sqlite3	file:
pBt	sqlite3.c	/^  BtShared *pBt;            \/* The BtShared this cursor points to *\/$/;"	m	struct:BtCursor	file:
pBt	sqlite3.c	/^  BtShared *pBt;       \/* Pointer to BtShared that this page is part of *\/$/;"	m	struct:MemPage	file:
pBt	sqlite3.c	/^  BtShared *pBt;     \/* Sharable content of this btree *\/$/;"	m	struct:Btree	file:
pBt	sqlite3.c	/^  BtShared *pBt;    \/* The tree being checked out *\/$/;"	m	struct:IntegrityCk	file:
pBt	sqlite3.c	/^  Btree *pBt;           \/* Separate file holding temporary table *\/$/;"	m	struct:VdbeCursor	file:
pBt	sqlite3.c	/^  Btree *pBt;          \/* The B*Tree structure for this database file *\/$/;"	m	struct:Db	file:
pBtree	sqlite3.c	/^  Btree *pBtree;            \/* The Btree to which this cursor belongs *\/$/;"	m	struct:BtCursor	file:
pBtree	sqlite3.c	/^  Btree *pBtree;        \/* Btree handle holding this lock *\/$/;"	m	struct:BtLock	file:
pBusyHandlerArg	sqlite3.c	/^  void *pBusyHandlerArg;      \/* Context argument for xBusyHandler *\/$/;"	m	struct:Pager	file:
pCache	sqlite3.c	/^  PCache *pCache;                \/* Cache that owns this page *\/$/;"	m	struct:PgHdr	file:
pCache	sqlite3.c	/^  PCache1 *pCache;               \/* Cache that currently owns this page *\/$/;"	m	struct:PgHdr1	file:
pCache	sqlite3.c	/^  sqlite3_pcache *pCache;             \/* Pluggable cache module *\/$/;"	m	struct:PCache	file:
pCell	sqlite3.c	/^    u8 *pCell;          \/* Pointers to the body of the overflow cell *\/$/;"	m	struct:MemPage::_OvflCell	file:
pCell	sqlite3.c	/^  u8 *pCell;     \/* Pointer to the start of cell content *\/$/;"	m	struct:CellInfo	file:
pCheck	sqlite3.c	/^  Expr *pCheck;        \/* The AND of all CHECK constraints *\/$/;"	m	struct:Table	file:
pChunk	sqlite3.c	/^  FileChunk *pChunk;              \/* Specific chunk into which cursor points *\/$/;"	m	struct:FilePoint	file:
pChunk	sqlite3.c	/^  struct RowSetChunk *pChunk;    \/* List of all chunk allocations *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetChunk	file:
pCodec	sqlite3.c	/^  void *pCodec;               \/* First argument to xCodec... methods *\/$/;"	m	struct:Pager	file:
pColl	sqlite3.c	/^    CollSeq *pColl;        \/* Used when p4type is P4_COLLSEQ *\/$/;"	m	union:VdbeOp::__anon1	file:
pColl	sqlite3.c	/^  CollSeq *pColl;        \/* The collation type of the column or 0 *\/$/;"	m	struct:Expr	file:
pColl	sqlite3.c	/^  CollSeq *pColl;       \/* Collating sequence *\/$/;"	m	struct:sqlite3_context	file:
pCollNeededArg	sqlite3.c	/^  void *pCollNeededArg;$/;"	m	struct:sqlite3	file:
pColumns	sqlite3.c	/^  IdList *pColumns;       \/* If this is an UPDATE OF <column-list> trigger,$/;"	m	struct:Trigger	file:
pCommitArg	sqlite3.c	/^  void *pCommitArg;                 \/* Argument to xCommitCallback() *\/   $/;"	m	struct:sqlite3	file:
pContext	sqlite3.c	/^  void *pContext;                 \/* Copy of pContext passed to s_r_g_c() *\/$/;"	m	struct:sqlite3_rtree_geometry	file:
pContext	sqlite3.c	/^  void *pContext;$/;"	m	struct:RtreeGeomCallback	file:
pContext	sqlite3.c	/^  void *pContext;$/;"	m	struct:RtreeMatchArg	file:
pCsr	sqlite3.c	/^  BtCursor *pCsr;         \/* Cursor pointing at blob row *\/$/;"	m	struct:Incrblob	file:
pCsr	sqlite3.c	/^  Fts3Cursor *pCsr;               \/* Cursor snippet is being generated from *\/$/;"	m	struct:SnippetIter	file:
pCsr	sqlite3.c	/^  Fts3Cursor *pCsr;               \/* FTS3 Cursor *\/$/;"	m	struct:LoadDoclistCtx	file:
pCsr	sqlite3.c	/^  Fts3Cursor *pCsr;$/;"	m	struct:TermOffsetCtx	file:
pCtx	sqlite3.c	/^  sqlite3_context *pCtx;              \/* Write error message here *\/$/;"	m	struct:ParseContext	file:
pCurrent	sqlite3.c	/^  sqlite3_syscall_ptr pCurrent; \/* Current value of the system call *\/$/;"	m	struct:unix_syscall	file:
pCursor	sqlite3.c	/^  BtCursor *pCursor;    \/* A list of all open cursors *\/$/;"	m	struct:BtShared	file:
pCursor	sqlite3.c	/^  BtCursor *pCursor;    \/* The cursor structure of the backend *\/$/;"	m	struct:VdbeCursor	file:
pCursor	sqlite3.c	/^  Fts3Cursor *pCursor;            \/* FTS3 Cursor *\/$/;"	m	struct:MatchInfo	file:
pData	sqlite3.c	/^  void *pData;                   \/* Content of this page *\/$/;"	m	struct:PgHdr	file:
pDbFd	sqlite3.c	/^  sqlite3_file *pDbFd;       \/* File handle for the database file *\/$/;"	m	struct:Wal	file:
pDbPage	sqlite3.c	/^  DbPage *pDbPage;     \/* Pager page handle *\/$/;"	m	struct:MemPage	file:
pDef	sqlite3.c	/^    FuncDef *pDef;      \/* Used only when flags==MEM_Agg *\/$/;"	m	union:Mem::__anon11	file:
pDefault	sqlite3.c	/^  sqlite3_syscall_ptr pDefault; \/* Default value *\/$/;"	m	struct:unix_syscall	file:
pDeferred	sqlite3.c	/^  Fts3DeferredToken *pDeferred;   \/* Deferred search tokens, if any *\/$/;"	m	struct:Fts3Cursor	file:
pDeferred	sqlite3.c	/^  Fts3DeferredToken *pDeferred;   \/* Deferred token object for this token *\/$/;"	m	struct:Fts3PhraseToken	file:
pDelFrame	sqlite3.c	/^  VdbeFrame *pDelFrame;   \/* List of frame objects to free on VM reset *\/$/;"	m	struct:Vdbe	file:
pDeleteNode	sqlite3.c	/^  sqlite3_stmt *pDeleteNode;$/;"	m	struct:Rtree	file:
pDeleteParent	sqlite3.c	/^  sqlite3_stmt *pDeleteParent;$/;"	m	struct:Rtree	file:
pDeleteRowid	sqlite3.c	/^  sqlite3_stmt *pDeleteRowid;$/;"	m	struct:Rtree	file:
pDeleted	sqlite3.c	/^  RtreeNode *pDeleted;$/;"	m	struct:Rtree	file:
pDest	sqlite3.c	/^  Btree *pDest;            \/* Destination b-tree file *\/$/;"	m	struct:sqlite3_backup	file:
pDestDb	sqlite3.c	/^  sqlite3* pDestDb;        \/* Destination database handle *\/$/;"	m	struct:sqlite3_backup	file:
pDestructor	sqlite3.c	/^  FuncDestructor *pDestructor;   \/* Reference counted destructor function *\/$/;"	m	struct:FuncDef	file:
pDflt	sqlite3.c	/^  Expr *pDflt;     \/* Default value of this column *\/$/;"	m	struct:Column	file:
pDfltColl	sqlite3.c	/^  CollSeq *pDfltColl;           \/* The default collating sequence (BINARY) *\/$/;"	m	struct:sqlite3	file:
pDirty	sqlite3.c	/^  PgHdr *pDirty, *pDirtyTail;         \/* List of dirty pages in LRU order *\/$/;"	m	struct:PCache	file:
pDirty	sqlite3.c	/^  PgHdr *pDirty;                 \/* Transient list of dirty pages *\/$/;"	m	struct:PgHdr	file:
pDirtyNext	sqlite3.c	/^  PgHdr *pDirtyNext;             \/* Next element in list of dirty pages *\/$/;"	m	struct:PgHdr	file:
pDirtyPrev	sqlite3.c	/^  PgHdr *pDirtyPrev;             \/* Previous element in list of dirty pages *\/$/;"	m	struct:PgHdr	file:
pDirtyTail	sqlite3.c	/^  PgHdr *pDirty, *pDirtyTail;         \/* List of dirty pages in LRU order *\/$/;"	m	struct:PCache	file:
pDisconnect	sqlite3.c	/^  VTable *pDisconnect;    \/* Disconnect these in next sqlite3_prepare() *\/$/;"	m	struct:sqlite3	file:
pEList	sqlite3.c	/^  ExprList *pEList;      \/* The fields of the result *\/$/;"	m	struct:Select	file:
pEList	sqlite3.c	/^  ExprList *pEList;    \/* Optional list of named expressions *\/$/;"	m	struct:NameContext	file:
pEnd	sqlite3.c	/^  void *pEnd;             \/* First byte past end of available space *\/$/;"	m	struct:Lookaside	file:
pEnd	sqlite3.c	/^  void *pStart, *pEnd;           \/* Bounds of pagecache malloc range *\/$/;"	m	struct:PCacheGlobal	file:
pEntry	sqlite3.c	/^  struct RowSetEntry *pEntry;    \/* List of entries using pRight *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetEntry	file:
pErr	sqlite3.c	/^  sqlite3_value *pErr;          \/* Most recent error message *\/$/;"	m	struct:sqlite3	file:
pExpr	sqlite3.c	/^    Expr *pExpr;             \/* Expression encoding the function *\/$/;"	m	struct:AggInfo::AggInfo_func	file:
pExpr	sqlite3.c	/^    Expr *pExpr;             \/* The original expression *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
pExpr	sqlite3.c	/^    Expr *pExpr;           \/* The list of expressions *\/$/;"	m	struct:ExprList::ExprList_item	file:
pExpr	sqlite3.c	/^  Expr *pExpr;            \/* Pointer to the subexpression that is this term *\/$/;"	m	struct:WhereTerm	file:
pExpr	sqlite3.c	/^  Expr *pExpr;          \/* The expression parse tree *\/$/;"	m	struct:ExprSpan	file:
pExpr	sqlite3.c	/^  Fts3Expr *pExpr;                \/* Parsed MATCH query string *\/$/;"	m	struct:Fts3Cursor	file:
pExpr	sqlite3.c	/^  Fts3Expr *pExpr;                \/* Pointer to phrase expression *\/$/;"	m	struct:LcsIterator	file:
pExprList	sqlite3.c	/^  ExprList *pExprList; \/* SET clause for UPDATE.  VALUES clause for INSERT *\/$/;"	m	struct:TriggerStep	file:
pExtra	sqlite3.c	/^  void *pExtra;                  \/* Extra content *\/$/;"	m	struct:PgHdr	file:
pFKey	sqlite3.c	/^  FKey *pFKey;         \/* Linked list of all foreign keys in this table *\/$/;"	m	struct:Table	file:
pFiller	sqlite3.c	/^  void *pFiller;      \/* So that sizeof(Mem) is a multiple of 8 *\/$/;"	m	struct:Mem	file:
pFilter	sqlite3.c	/^  Fts3SegFilter *pFilter;         \/* Pointer to filter object *\/$/;"	m	struct:Fts3MultiSegReader	file:
pFirst	sqlite3.c	/^  FileChunk *pFirst;              \/* Head of in-memory chunk-list *\/$/;"	m	struct:MemJournal	file:
pFirst	sqlite3.c	/^  os2ShmLink *pFirst;        \/* First os2ShmLink object pointing to this *\/$/;"	m	struct:os2ShmNode	file:
pFirst	sqlite3.c	/^  struct MemBlockHdr *pFirst;$/;"	m	struct:__anon12	typeref:struct:__anon12::MemBlockHdr	file:
pFirst	sqlite3.c	/^  unixShm *pFirst;           \/* All unixShm objects pointing to this *\/$/;"	m	struct:unixShmNode	file:
pFirst	sqlite3.c	/^  winShm *pFirst;            \/* All winShm objects pointing to this *\/$/;"	m	struct:winShmNode	file:
pFrame	sqlite3.c	/^    VdbeFrame *pFrame;  \/* Used when flags==MEM_Frame *\/$/;"	m	union:Mem::__anon11	file:
pFrame	sqlite3.c	/^  VdbeFrame *pFrame;      \/* Parent frame *\/$/;"	m	struct:Vdbe	file:
pFree	sqlite3.c	/^  LookasideSlot *pFree;   \/* List of available buffers *\/$/;"	m	struct:Lookaside	file:
pFree	sqlite3.c	/^  PgFreeslot *pFree;             \/* Free page blocks *\/$/;"	m	struct:PCacheGlobal	file:
pFree	sqlite3.c	/^  void *pFree;            \/* Free this when deleting the vdbe *\/$/;"	m	struct:Vdbe	file:
pFresh	sqlite3.c	/^  struct RowSetEntry *pFresh;    \/* Source of new entry objects *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetEntry	file:
pFrom	sqlite3.c	/^  Table *pFrom;     \/* Table containing the REFERENCES clause (aka: Child) *\/$/;"	m	struct:FKey	file:
pFts3Tab	sqlite3.c	/^  Fts3Table *pFts3Tab;$/;"	m	struct:Fts3auxTable	file:
pFunc	sqlite3.c	/^    FuncDef *pFunc;          \/* The aggregate function implementation *\/$/;"	m	struct:AggInfo::AggInfo_func	file:
pFunc	sqlite3.c	/^    FuncDef *pFunc;        \/* Used when p4type is P4_FUNCDEF *\/$/;"	m	union:VdbeOp::__anon1	file:
pFunc	sqlite3.c	/^  FuncDef *pFunc;               \/* The definition of the function *\/$/;"	m	struct:VdbeFunc	file:
pFunc	sqlite3.c	/^  FuncDef *pFunc;       \/* Pointer to function information.  MUST BE FIRST *\/$/;"	m	struct:sqlite3_context	file:
pGeom	sqlite3.c	/^  sqlite3_rtree_geometry *pGeom;  \/* Constraint callback argument for a MATCH *\/$/;"	m	struct:RtreeConstraint	file:
pGroup	sqlite3.c	/^  PGroup *pGroup;                     \/* PGroup this cache belongs to *\/$/;"	m	struct:PCache1	file:
pGroupBy	sqlite3.c	/^  ExprList *pGroupBy;     \/* The group by clause *\/$/;"	m	struct:AggInfo	file:
pGroupBy	sqlite3.c	/^  ExprList *pGroupBy;    \/* The GROUP BY clause *\/$/;"	m	struct:Select	file:
pHasContent	sqlite3.c	/^  Bitvec *pHasContent;  \/* Set of pages moved to free-list this transaction *\/$/;"	m	struct:BtShared	file:
pHash	sqlite3.c	/^  FuncDef *pHash;      \/* Next with a different name but the same hash *\/$/;"	m	struct:FuncDef	file:
pHaving	sqlite3.c	/^  Expr *pHaving;         \/* The HAVING clause *\/$/;"	m	struct:Select	file:
pHead	sqlite3.c	/^  char *pHead;                    \/* Position list data following iHead *\/$/;"	m	struct:SnippetPhrase	file:
pHeap	sqlite3.c	/^  void *pHeap;                      \/* Heap storage space *\/$/;"	m	struct:Sqlite3Config	file:
pI64	sqlite3.c	/^    i64 *pI64;             \/* Used when p4type is P4_INT64 *\/$/;"	m	union:VdbeOp::__anon1	file:
pId	sqlite3.c	/^  struct vxworksFileId *pId;          \/* Unique file ID *\/$/;"	m	struct:unixFile	typeref:struct:unixFile::vxworksFileId	file:
pId	sqlite3.c	/^  struct vxworksFileId *pId;  \/* Unique file ID for vxworks. *\/$/;"	m	struct:unixFileId	typeref:struct:unixFileId::vxworksFileId	file:
pIdList	sqlite3.c	/^  IdList *pIdList;     \/* Column names for INSERT *\/$/;"	m	struct:TriggerStep	file:
pIdx	sqlite3.c	/^    Index *pIdx;                   \/* Index when WHERE_INDEXED is true *\/$/;"	m	union:WherePlan::__anon6	file:
pIdxInfo	sqlite3.c	/^  sqlite3_index_info *pIdxInfo;  \/* Index info for n-th source table *\/$/;"	m	struct:WhereLevel	file:
pInJournal	sqlite3.c	/^  Bitvec *pInJournal;         \/* One bit for each page in the database file *\/$/;"	m	struct:Pager	file:
pInSavepoint	sqlite3.c	/^  Bitvec *pInSavepoint;        \/* Set of pages in this savepoint *\/$/;"	m	struct:PagerSavepoint	file:
pIndex	sqlite3.c	/^    Index *pIndex;    \/* Index structure corresponding to zIndex, if any *\/$/;"	m	struct:SrcList::SrcList_item	file:
pIndex	sqlite3.c	/^  Index *pIndex;       \/* List of SQL indexes on this table. *\/$/;"	m	struct:Table	file:
pInitMutex	sqlite3.c	/^  sqlite3_mutex *pInitMutex;        \/* Mutex used by sqlite3_initialize() *\/$/;"	m	struct:Sqlite3Config	file:
pInode	sqlite3.c	/^  unixInodeInfo *pInode;              \/* Info about locks on this inode *\/$/;"	m	struct:unixFile	file:
pInode	sqlite3.c	/^  unixInodeInfo *pInode;     \/* unixInodeInfo that owns this SHM node *\/$/;"	m	struct:unixShmNode	file:
pInput	sqlite3.c	/^  const char *pInput;          \/* input we are tokenizing *\/$/;"	m	struct:simple_tokenizer_cursor	file:
pIter	sqlite3.c	/^  UBreakIterator *pIter;      \/* ICU break-iterator object *\/$/;"	m	struct:IcuCursor	file:
pKey	sqlite3.c	/^  const char *pKey; int nKey;  \/* Key associated with this element *\/$/;"	m	struct:HashElem	file:
pKey	sqlite3.c	/^  void *pKey;      \/* Saved key that was cursor's last known position *\/$/;"	m	struct:BtCursor	file:
pKey	sqlite3.c	/^  void *pKey; int nKey;      \/* Key associated with this element *\/$/;"	m	struct:Fts3HashElem	file:
pKeyInfo	sqlite3.c	/^    KeyInfo *pKeyInfo;     \/* Used when p4type is P4_KEYINFO *\/$/;"	m	union:VdbeOp::__anon1	file:
pKeyInfo	sqlite3.c	/^  KeyInfo *pKeyInfo;    \/* Info about index keys needed by index cursors *\/$/;"	m	struct:VdbeCursor	file:
pKeyInfo	sqlite3.c	/^  KeyInfo *pKeyInfo;  \/* Collation and sort-order information *\/$/;"	m	struct:UnpackedRecord	file:
pKeyInfo	sqlite3.c	/^  struct KeyInfo *pKeyInfo; \/* Argument passed to comparison function *\/$/;"	m	struct:BtCursor	typeref:struct:BtCursor::KeyInfo	file:
pLast	sqlite3.c	/^  TriggerStep *pLast;  \/* Last element in link-list. Valid for 1st elem only *\/$/;"	m	struct:TriggerStep	file:
pLast	sqlite3.c	/^  struct MemBlockHdr *pLast;$/;"	m	struct:__anon12	typeref:struct:__anon12::MemBlockHdr	file:
pLast	sqlite3.c	/^  struct RowSetEntry *pLast;     \/* Last entry on the pEntry list *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetEntry	file:
pLeft	sqlite3.c	/^  Expr *pLeft;           \/* Left subnode *\/$/;"	m	struct:Expr	file:
pLeft	sqlite3.c	/^  Fts3Expr *pLeft;           \/* Left operand *\/$/;"	m	struct:Fts3Expr	file:
pLeft	sqlite3.c	/^  struct RowSetEntry *pLeft;    \/* Left subtree (smaller entries) *\/$/;"	m	struct:RowSetEntry	typeref:struct:RowSetEntry::RowSetEntry	file:
pLeftmost	sqlite3.c	/^  SegmentNode *pLeftmost;         \/* Pointer to left-most node of this depth *\/$/;"	m	struct:SegmentNode	file:
pLimit	sqlite3.c	/^  Expr *pLimit;          \/* LIMIT expression. NULL means not used. *\/$/;"	m	struct:Select	file:
pLimit	sqlite3.c	/^  Expr *pLimit;    \/* The LIMIT expression.  NULL if there is no limit *\/$/;"	m	struct:LimitVal	file:
pList	sqlite3.c	/^    ExprList *pList;     \/* Function arguments or in "<expr> IN (<expr-list)" *\/$/;"	m	union:Expr::__anon5	file:
pList	sqlite3.c	/^  PendingList *pList;             \/* Doclist is assembled here *\/$/;"	m	struct:Fts3DeferredToken	file:
pList	sqlite3.c	/^  char *pList;                    \/* Pointer to start of phrase position list *\/$/;"	m	struct:SnippetPhrase	file:
pList	sqlite3.c	/^  char *pList;                    \/* Position-list *\/$/;"	m	struct:TermOffset	file:
pList	sqlite3.c	/^  char *pList;                   \/* Pointer to position list following iDocid *\/$/;"	m	struct:Fts3Doclist	file:
pLock	sqlite3.c	/^  BtLock *pLock;        \/* List of locks held on this shared-btree struct *\/$/;"	m	struct:BtShared	file:
pLogArg	sqlite3.c	/^  void *pLogArg;                       \/* First argument to xLog() *\/$/;"	m	struct:Sqlite3Config	file:
pLruHead	sqlite3.c	/^  PgHdr1 *pLruHead, *pLruTail;   \/* LRU list of unpinned pages *\/$/;"	m	struct:PGroup	file:
pLruNext	sqlite3.c	/^  PgHdr1 *pLruNext;              \/* Next in LRU list of unpinned pages *\/$/;"	m	struct:PgHdr1	file:
pLruPrev	sqlite3.c	/^  PgHdr1 *pLruPrev;              \/* Previous in LRU list of unpinned pages *\/$/;"	m	struct:PgHdr1	file:
pLruTail	sqlite3.c	/^  PgHdr1 *pLruHead, *pLruTail;   \/* LRU list of unpinned pages *\/$/;"	m	struct:PGroup	file:
pMap	sqlite3.c	/^    void *pMap;$/;"	m	struct:winShmNode::ShmRegion	file:
pMaskSet	sqlite3.c	/^  WhereMaskSet *pMaskSet;  \/* Mapping of table cursor numbers to bitmasks *\/$/;"	m	struct:WhereClause	file:
pMem	sqlite3.c	/^    Mem *pMem;             \/* Used when p4type is P4_MEM *\/$/;"	m	union:VdbeOp::__anon1	file:
pMem	sqlite3.c	/^  Mem *pMem;            \/* Memory cell used to store aggregate context *\/$/;"	m	struct:sqlite3_context	file:
pMethod	sqlite3.c	/^  const sqlite3_io_methods *pMethod;  \/* Always the first entry *\/$/;"	m	struct:os2File	file:
pMethod	sqlite3.c	/^  const sqlite3_io_methods *pMethod; \/*** Must be first ***\/$/;"	m	struct:winFile	file:
pMethod	sqlite3.c	/^  sqlite3_io_methods *pMethod;    \/* I\/O methods on journal files *\/$/;"	m	struct:JournalFile	file:
pMethod	sqlite3.c	/^  sqlite3_io_methods *pMethod;    \/* Parent class. MUST BE FIRST *\/$/;"	m	struct:MemJournal	file:
pMethod	sqlite3.c	/^  sqlite3_io_methods const *pMethod;  \/* Always the first entry *\/$/;"	m	struct:unixFile	file:
pMethods	sqlite3.c	/^  const struct sqlite3_io_methods *pMethods;  \/* Methods for an open file *\/$/;"	m	struct:sqlite3_file	typeref:struct:sqlite3_file::sqlite3_io_methods	file:
pMod	sqlite3.c	/^  Module *pMod;             \/* Pointer to module implementation *\/$/;"	m	struct:VTable	file:
pModule	sqlite3.c	/^  const sqlite3_module *pModule;       \/* Callback pointers *\/$/;"	m	struct:Module	file:
pModule	sqlite3.c	/^  const sqlite3_module *pModule;     \/* Module for cursor pVtabCursor *\/$/;"	m	struct:VdbeCursor	file:
pModule	sqlite3.c	/^  const sqlite3_module *pModule;  \/* The module for this virtual table *\/$/;"	m	struct:sqlite3_vtab	file:
pModule	sqlite3.c	/^  const sqlite3_tokenizer_module *pModule;  \/* The module for this tokenizer *\/$/;"	m	struct:sqlite3_tokenizer	file:
pNC	sqlite3.c	/^    NameContext *pNC;                          \/* Naming context *\/$/;"	m	union:Walker::__anon10	file:
pName	sqlite3.c	/^  const Token *pName; \/* Name of the container - used for error messages *\/$/;"	m	struct:DbFixer	file:
pNewTable	sqlite3.c	/^  Table *pNewTable;    \/* A table being constructed by CREATE TABLE *\/$/;"	m	struct:Parse	file:
pNewTrigger	sqlite3.c	/^  Trigger *pNewTrigger;     \/* Trigger under construct by a CREATE TRIGGER *\/$/;"	m	struct:Parse	file:
pNext	sqlite3.c	/^  AutoincInfo *pNext;   \/* Next info block in a list of them all *\/$/;"	m	struct:AutoincInfo	file:
pNext	sqlite3.c	/^  BtCursor *pNext, *pPrev;  \/* Forms a linked list of all cursors *\/$/;"	m	struct:BtCursor	file:
pNext	sqlite3.c	/^  BtLock *pNext;        \/* Next in BtShared.pLock list *\/$/;"	m	struct:BtLock	file:
pNext	sqlite3.c	/^  BtShared *pNext;      \/* Next on a list of sharable BtShared structs *\/$/;"	m	struct:BtShared	file:
pNext	sqlite3.c	/^  Btree *pNext;      \/* List of other sharable Btrees from the same db *\/$/;"	m	struct:Btree	file:
pNext	sqlite3.c	/^  FileChunk *pNext;               \/* Next chunk in the journal *\/$/;"	m	struct:FileChunk	file:
pNext	sqlite3.c	/^  Fts3DeferredToken *pNext;       \/* Next in list of deferred tokens *\/$/;"	m	struct:Fts3DeferredToken	file:
pNext	sqlite3.c	/^  FuncDef *pNext;      \/* Next function with same name *\/$/;"	m	struct:FuncDef	file:
pNext	sqlite3.c	/^  Index *pNext;    \/* The next index associated with the same table *\/$/;"	m	struct:Index	file:
pNext	sqlite3.c	/^  LookasideSlot *pNext;    \/* Next buffer in the list of free buffers *\/$/;"	m	struct:LookasideSlot	file:
pNext	sqlite3.c	/^  NameContext *pNext;  \/* Next outer name context.  NULL for outermost *\/$/;"	m	struct:NameContext	file:
pNext	sqlite3.c	/^  PgFreeslot *pNext;  \/* Next free slot *\/$/;"	m	struct:PgFreeslot	file:
pNext	sqlite3.c	/^  PgHdr1 *pNext;                 \/* Next in hash table chain *\/$/;"	m	struct:PgHdr1	file:
pNext	sqlite3.c	/^  RtreeNode *pNext;                 \/* Next node in this hash chain *\/$/;"	m	struct:RtreeNode	file:
pNext	sqlite3.c	/^  Savepoint *pNext;                   \/* Parent savepoint (if any) *\/$/;"	m	struct:Savepoint	file:
pNext	sqlite3.c	/^  Select *pNext;         \/* Next select to the left in a compound *\/$/;"	m	struct:Select	file:
pNext	sqlite3.c	/^  SubProgram *pNext;            \/* Next sub-program already visited *\/$/;"	m	struct:SubProgram	file:
pNext	sqlite3.c	/^  Trigger *pNext;         \/* Next trigger associated with the table *\/$/;"	m	struct:Trigger	file:
pNext	sqlite3.c	/^  TriggerPrg *pNext;      \/* Next entry in Parse.pTriggerPrg list *\/$/;"	m	struct:TriggerPrg	file:
pNext	sqlite3.c	/^  TriggerStep *pNext;  \/* Next in the link-list *\/$/;"	m	struct:TriggerStep	file:
pNext	sqlite3.c	/^  UnixUnusedFd *pNext;      \/* Next unused file descriptor on same file *\/$/;"	m	struct:UnixUnusedFd	file:
pNext	sqlite3.c	/^  VTable *pNext;            \/* Next in linked list (see above) *\/$/;"	m	struct:VTable	file:
pNext	sqlite3.c	/^  Vdbe *pPrev,*pNext;     \/* Linked list of VDBEs with the same Vdbe.db *\/$/;"	m	struct:Vdbe	file:
pNext	sqlite3.c	/^  os2ShmLink *pNext;         \/* Next os2Shm with the same os2ShmNode *\/$/;"	m	struct:os2ShmLink	file:
pNext	sqlite3.c	/^  os2ShmNode *pNext;         \/* Next in list of all os2ShmNode objects *\/$/;"	m	struct:os2ShmNode	file:
pNext	sqlite3.c	/^  sqlite3_backup *pNext;   \/* Next backup associated with source pager *\/$/;"	m	struct:sqlite3_backup	file:
pNext	sqlite3.c	/^  sqlite3_vfs *pNext;      \/* Next registered VFS *\/$/;"	m	struct:sqlite3_vfs	file:
pNext	sqlite3.c	/^  struct MemBlockHdr *pNext, *pPrev;  \/* Linked list of all unfreed memory *\/$/;"	m	struct:MemBlockHdr	typeref:struct:MemBlockHdr::MemBlockHdr	file:
pNext	sqlite3.c	/^  struct ScratchFreeslot *pNext;   \/* Next unused scratch buffer *\/$/;"	m	struct:ScratchFreeslot	typeref:struct:ScratchFreeslot::ScratchFreeslot	file:
pNext	sqlite3.c	/^  struct vxworksFileId *pNext;  \/* Next in a list of them all *\/$/;"	m	struct:vxworksFileId	typeref:struct:vxworksFileId::vxworksFileId	file:
pNext	sqlite3.c	/^  unixInodeInfo *pNext;           \/* List of all unixInodeInfo objects *\/$/;"	m	struct:unixInodeInfo	file:
pNext	sqlite3.c	/^  unixShm *pNext;            \/* Next unixShm with the same unixShmNode *\/$/;"	m	struct:unixShm	file:
pNext	sqlite3.c	/^  winShm *pNext;             \/* Next winShm with the same winShmNode *\/$/;"	m	struct:winShm	file:
pNext	sqlite3.c	/^  winShmNode *pNext;         \/* Next in list of all winShmNode objects *\/$/;"	m	struct:winShmNode	file:
pNextBlocked	sqlite3.c	/^  sqlite3 *pNextBlocked;        \/* Next in list of all blocked connections *\/$/;"	m	struct:sqlite3	file:
pNextChunk	sqlite3.c	/^  struct RowSetChunk *pNextChunk;        \/* Next chunk on list of them all *\/$/;"	m	struct:RowSetChunk	typeref:struct:RowSetChunk::RowSetChunk	file:
pNextDocid	sqlite3.c	/^  char *pNextDocid;              \/* Pointer to next docid *\/$/;"	m	struct:Fts3Doclist	file:
pNextFrom	sqlite3.c	/^  FKey *pNextFrom;  \/* Next foreign key in pFrom *\/$/;"	m	struct:FKey	file:
pNextId	sqlite3.c	/^  char *pNextId;                  \/* Pointer into the body of aDoclist *\/$/;"	m	struct:Fts3Cursor	file:
pNextTo	sqlite3.c	/^  FKey *pNextTo;    \/* Next foreign key on table named zTo *\/$/;"	m	struct:FKey	file:
pNextZombie	sqlite3.c	/^  Table *pNextZombie;  \/* Next on the Parse.pZombieTab list *\/$/;"	m	struct:Table	file:
pNode	sqlite3.c	/^  RtreeNode *pNode;                 \/* Node cursor is currently pointing at *\/$/;"	m	struct:RtreeCursor	file:
pOffset	sqlite3.c	/^  Expr *pOffset;         \/* OFFSET expression. NULL means not used. *\/$/;"	m	struct:Select	file:
pOffset	sqlite3.c	/^  Expr *pOffset;   \/* The OFFSET expression.  NULL if there is none *\/$/;"	m	struct:LimitVal	file:
pOffsetList	sqlite3.c	/^  char *pOffsetList;$/;"	m	struct:Fts3SegReader	file:
pOldMethod	sqlite3.c	/^  sqlite3_io_methods const *pOldMethod;     \/* Original I\/O methods for close *\/$/;"	m	struct:proxyLockingContext	file:
pOn	sqlite3.c	/^    Expr *pOn;        \/* The ON clause of a join *\/$/;"	m	struct:SrcList::SrcList_item	file:
pOrInfo	sqlite3.c	/^    WhereOrInfo *pOrInfo;   \/* Extra information if eOperator==WO_OR *\/$/;"	m	union:WhereTerm::__anon17	file:
pOrderBy	sqlite3.c	/^  ExprList *pOrderBy;    \/* The ORDER BY clause *\/$/;"	m	struct:Select	file:
pPCache	sqlite3.c	/^  PCache *pPCache;            \/* Pointer to page cache object *\/$/;"	m	struct:Pager	file:
pPage	sqlite3.c	/^  void *pPage;                      \/* Page cache memory *\/$/;"	m	struct:Sqlite3Config	file:
pPage1	sqlite3.c	/^  MemPage *pPage1;      \/* First page of the database *\/$/;"	m	struct:BtShared	file:
pPage1	sqlite3.c	/^  PgHdr *pPage1;                      \/* Reference to page 1 *\/$/;"	m	struct:PCache	file:
pPager	sqlite3.c	/^  Pager *pPager;                 \/* The pager this page is part of *\/$/;"	m	struct:PgHdr	file:
pPager	sqlite3.c	/^  Pager *pPager;        \/* The page cache *\/$/;"	m	struct:BtShared	file:
pPager	sqlite3.c	/^  Pager *pPager;    \/* The associated pager.  Also accessible by pBt->pPager *\/$/;"	m	struct:IntegrityCk	file:
pParent	sqlite3.c	/^  Fts3Expr *pParent;         \/* pParent->pLeft==this or pParent->pRight==this *\/$/;"	m	struct:Fts3Expr	file:
pParent	sqlite3.c	/^  RtreeNode *pParent;               \/* Parent node *\/$/;"	m	struct:RtreeNode	file:
pParent	sqlite3.c	/^  SegmentNode *pParent;           \/* Parent node (or NULL for root node) *\/$/;"	m	struct:SegmentNode	file:
pParent	sqlite3.c	/^  VdbeFrame *pParent;     \/* Parent of this frame, or NULL if parent is main *\/$/;"	m	struct:VdbeFrame	file:
pParse	sqlite3.c	/^  Parse *pParse;                            \/* Parser context.  *\/$/;"	m	struct:Walker	file:
pParse	sqlite3.c	/^  Parse *pParse;              \/* The Parse structure *\/$/;"	m	struct:AuthContext	file:
pParse	sqlite3.c	/^  Parse *pParse;           \/* The parser context *\/$/;"	m	struct:WhereClause	file:
pParse	sqlite3.c	/^  Parse *pParse;       \/* Parsing and code generating context *\/$/;"	m	struct:WhereInfo	file:
pParse	sqlite3.c	/^  Parse *pParse;       \/* The parser *\/$/;"	m	struct:NameContext	file:
pParse	sqlite3.c	/^  Parse *pParse;      \/* The parsing context.  Error messages written here *\/$/;"	m	struct:DbFixer	file:
pPhrase	sqlite3.c	/^  Fts3Phrase *pPhrase;            \/* The phrase the token belongs to *\/$/;"	m	struct:Fts3TokenAndCost	file:
pPhrase	sqlite3.c	/^  Fts3Phrase *pPhrase;       \/* Valid if eType==FTSQUERY_PHRASE *\/$/;"	m	struct:Fts3Expr	file:
pPrev	sqlite3.c	/^  BtCursor *pNext, *pPrev;  \/* Forms a linked list of all cursors *\/$/;"	m	struct:BtCursor	file:
pPrev	sqlite3.c	/^  Btree *pPrev;      \/* Back pointer of the same list *\/$/;"	m	struct:Btree	file:
pPrev	sqlite3.c	/^  Vdbe *pPrev,*pNext;     \/* Linked list of VDBEs with the same Vdbe.db *\/$/;"	m	struct:Vdbe	file:
pPrev	sqlite3.c	/^  struct MemBlockHdr *pNext, *pPrev;  \/* Linked list of all unfreed memory *\/$/;"	m	struct:MemBlockHdr	typeref:struct:MemBlockHdr::	file:
pPrev	sqlite3.c	/^  unixInodeInfo *pPrev;           \/*    .... doubly linked *\/$/;"	m	struct:unixInodeInfo	file:
pPrevTo	sqlite3.c	/^  FKey *pPrevTo;    \/* Previous foreign key on table named zTo *\/$/;"	m	struct:FKey	file:
pPrior	sqlite3.c	/^  Select *pPrior;        \/* Prior select in a compound select statement *\/$/;"	m	struct:Select	file:
pProfileArg	sqlite3.c	/^  void *pProfileArg;                        \/* Argument to profile function *\/$/;"	m	struct:sqlite3	file:
pProgram	sqlite3.c	/^    SubProgram *pProgram;  \/* Used when p4type is P4_SUBPROGRAM *\/$/;"	m	union:VdbeOp::__anon1	file:
pProgram	sqlite3.c	/^  SubProgram *pProgram;   \/* Linked list of all sub-programs used by VM *\/$/;"	m	struct:Vdbe	file:
pProgram	sqlite3.c	/^  SubProgram *pProgram;   \/* Program implementing pTrigger\/orconf *\/$/;"	m	struct:TriggerPrg	file:
pProgressArg	sqlite3.c	/^  void *pProgressArg;           \/* Argument to the progress callback *\/$/;"	m	struct:sqlite3	file:
pRead	sqlite3.c	/^  char *pRead;                    \/* Cursor used to iterate through aDoclist *\/$/;"	m	struct:LcsIterator	file:
pReadNode	sqlite3.c	/^  sqlite3_stmt *pReadNode;$/;"	m	struct:Rtree	file:
pReadParent	sqlite3.c	/^  sqlite3_stmt *pReadParent;$/;"	m	struct:Rtree	file:
pReadRowid	sqlite3.c	/^  sqlite3_stmt *pReadRowid;$/;"	m	struct:Rtree	file:
pReal	sqlite3.c	/^    double *pReal;         \/* Used when p4type is P4_REAL *\/$/;"	m	union:VdbeOp::__anon1	file:
pReal	sqlite3.c	/^  sqlite3_file *pReal;            \/* The "real" underlying file descriptor *\/$/;"	m	struct:JournalFile	file:
pReprepare	sqlite3.c	/^  Vdbe *pReprepare;    \/* VM being reprepared (sqlite3Reprepare()) *\/$/;"	m	struct:Parse	file:
pResultSet	sqlite3.c	/^  Mem *pResultSet;        \/* Pointer to an array of results *\/$/;"	m	struct:Vdbe	file:
pRight	sqlite3.c	/^  Expr *pRight;          \/* Right subnode *\/$/;"	m	struct:Expr	file:
pRight	sqlite3.c	/^  Fts3Expr *pRight;          \/* Right operand *\/$/;"	m	struct:Fts3Expr	file:
pRight	sqlite3.c	/^  SegmentNode *pRight;            \/* Pointer to right-sibling *\/$/;"	m	struct:SegmentNode	file:
pRight	sqlite3.c	/^  struct RowSetEntry *pRight;   \/* Right subtree (larger entries) or list *\/$/;"	m	struct:RowSetEntry	typeref:struct:RowSetEntry::RowSetEntry	file:
pRightmost	sqlite3.c	/^  Select *pRightmost;    \/* Right-most select in a compound select statement *\/$/;"	m	struct:Select	file:
pRollbackArg	sqlite3.c	/^  void *pRollbackArg;               \/* Argument to xRollbackCallback() *\/   $/;"	m	struct:sqlite3	file:
pRoot	sqlite3.c	/^  Fts3Expr *pRoot; $/;"	m	struct:Fts3TokenAndCost	file:
pRowSet	sqlite3.c	/^    RowSet *pRowSet;    \/* Used only when flags==MEM_RowSet *\/$/;"	m	union:Mem::__anon11	file:
pSavepoint	sqlite3.c	/^  Savepoint *pSavepoint;        \/* List of active savepoints *\/$/;"	m	struct:sqlite3	file:
pSchema	sqlite3.c	/^  Schema *pSchema;        \/* Schema containing the trigger *\/$/;"	m	struct:Trigger	file:
pSchema	sqlite3.c	/^  Schema *pSchema;     \/* Pointer to database schema (possibly shared) *\/$/;"	m	struct:Db	file:
pSchema	sqlite3.c	/^  Schema *pSchema;     \/* Schema that contains this table *\/$/;"	m	struct:Table	file:
pSchema	sqlite3.c	/^  Schema *pSchema; \/* Schema containing this index *\/$/;"	m	struct:Index	file:
pSchema	sqlite3.c	/^  void *pSchema;        \/* Pointer to space allocated by sqlite3BtreeSchema() *\/$/;"	m	struct:BtShared	file:
pScopyFrom	sqlite3.c	/^  Mem *pScopyFrom;    \/* This Mem is a shallow copy of pScopyFrom *\/$/;"	m	struct:Mem	file:
pScratch	sqlite3.c	/^  void *pScratch;                   \/* Scratch memory *\/$/;"	m	struct:Sqlite3Config	file:
pScratchEnd	sqlite3.c	/^  void *pScratchEnd;$/;"	m	struct:Mem0Global	file:
pScratchFree	sqlite3.c	/^  ScratchFreeslot *pScratchFree;$/;"	m	struct:Mem0Global	file:
pSegcsr	sqlite3.c	/^  Fts3MultiSegReader *pSegcsr;    \/* Segment-reader for this token *\/$/;"	m	struct:Fts3PhraseToken	file:
pSegments	sqlite3.c	/^  sqlite3_blob *pSegments;        \/* Blob handle open on %_segments table *\/$/;"	m	struct:Fts3Table	file:
pSelect	sqlite3.c	/^    Select *pSelect;     \/* Used for sub-selects and "<expr> IN (<select>)" *\/$/;"	m	union:Expr::__anon5	file:
pSelect	sqlite3.c	/^    Select *pSelect;  \/* A SELECT statement used in place of a table name *\/$/;"	m	struct:SrcList::SrcList_item	file:
pSelect	sqlite3.c	/^  Select *pSelect;     \/* NULL for tables.  Points to definition if a view. *\/$/;"	m	struct:Table	file:
pSelect	sqlite3.c	/^  Select *pSelect;     \/* SELECT statment or RHS of INSERT INTO .. SELECT ... *\/$/;"	m	struct:TriggerStep	file:
pSem	sqlite3.c	/^  sem_t *pSem;                    \/* Named POSIX semaphore *\/$/;"	m	struct:unixInodeInfo	file:
pSeqTab	sqlite3.c	/^  Table *pSeqTab;      \/* The sqlite_sequence table used by AUTOINCREMENT *\/$/;"	m	struct:Schema	file:
pShm	sqlite3.c	/^  unixShm *pShm;                      \/* Shared memory segment information *\/$/;"	m	struct:unixFile	file:
pShm	sqlite3.c	/^  winShm *pShm;           \/* Instance of shared memory on this file *\/$/;"	m	struct:winFile	file:
pShmLink	sqlite3.c	/^  os2ShmLink *pShmLink;     \/* Instance of shared memory on this file *\/$/;"	m	struct:os2File	file:
pShmNode	sqlite3.c	/^  os2ShmNode *pShmNode;      \/* The underlying os2ShmNode object *\/$/;"	m	struct:os2ShmLink	file:
pShmNode	sqlite3.c	/^  unixShmNode *pShmNode;          \/* Shared memory associated with this inode *\/$/;"	m	struct:unixInodeInfo	file:
pShmNode	sqlite3.c	/^  unixShmNode *pShmNode;     \/* The underlying unixShmNode object *\/$/;"	m	struct:unixShm	file:
pShmNode	sqlite3.c	/^  winShmNode *pShmNode;      \/* The underlying winShmNode object *\/$/;"	m	struct:winShm	file:
pSrc	sqlite3.c	/^  Btree *pSrc;             \/* Source b-tree file *\/$/;"	m	struct:sqlite3_backup	file:
pSrc	sqlite3.c	/^  SrcList *pSrc;         \/* The FROM clause *\/$/;"	m	struct:Select	file:
pSrcDb	sqlite3.c	/^  sqlite3* pSrcDb;         \/* Source database handle *\/$/;"	m	struct:sqlite3_backup	file:
pSrcList	sqlite3.c	/^  SrcList *pSrcList;   \/* One or more tables used to resolve names *\/$/;"	m	struct:NameContext	file:
pStart	sqlite3.c	/^  void *pStart, *pEnd;           \/* Bounds of pagecache malloc range *\/$/;"	m	struct:PCacheGlobal	file:
pStart	sqlite3.c	/^  void *pStart;           \/* First byte of available memory space *\/$/;"	m	struct:Lookaside	file:
pStmt	sqlite3.c	/^  sqlite3_stmt *pStmt;            \/* Prepared statement in use by the cursor *\/$/;"	m	struct:Fts3Cursor	file:
pStmt	sqlite3.c	/^  sqlite3_stmt *pStmt;    \/* Statement holding cursor open *\/$/;"	m	struct:Incrblob	file:
pStress	sqlite3.c	/^  void *pStress;                      \/* Argument to xStress *\/$/;"	m	struct:PCache	file:
pSynced	sqlite3.c	/^  PgHdr *pSynced;                     \/* Last synced page in dirty page list *\/$/;"	m	struct:PCache	file:
pTab	sqlite3.c	/^    Table *pTab;             \/* Source table *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
pTab	sqlite3.c	/^    Table *pTab;      \/* An SQL table corresponding to zName *\/$/;"	m	struct:SrcList::SrcList_item	file:
pTab	sqlite3.c	/^  Table *pTab;           \/* Table for TK_COLUMN expressions. *\/$/;"	m	struct:Expr	file:
pTab	sqlite3.c	/^  Table *pTab;          \/* Table this info block refers to *\/$/;"	m	struct:AutoincInfo	file:
pTab	sqlite3.c	/^  Table *pTab;$/;"	m	struct:VtabCtx	file:
pTabList	sqlite3.c	/^  SrcList *pTabList;             \/* List of tables in the join *\/$/;"	m	struct:WhereInfo	file:
pTabSchema	sqlite3.c	/^  Schema *pTabSchema;     \/* Schema containing the table *\/$/;"	m	struct:Trigger	file:
pTable	sqlite3.c	/^  Table *pTable;   \/* The SQL table being indexed *\/$/;"	m	struct:Index	file:
pTail	sqlite3.c	/^  char *pTail;                    \/* Position list data following iTail *\/$/;"	m	struct:SnippetPhrase	file:
pTerm	sqlite3.c	/^    struct WhereTerm *pTerm;       \/* WHERE clause term for OR-search *\/$/;"	m	union:WherePlan::__anon6	typeref:struct:WherePlan::__anon6::WhereTerm	file:
pTmpSpace	sqlite3.c	/^  char *pTmpSpace;            \/* Pager.pageSize bytes of space for tmp use *\/$/;"	m	struct:Pager	file:
pTmpSpace	sqlite3.c	/^  u8 *pTmpSpace;        \/* BtShared.pageSize bytes of space for tmp use *\/$/;"	m	struct:BtShared	file:
pToken	sqlite3.c	/^  Fts3PhraseToken *pToken;        \/* Pointer to corresponding expr token *\/$/;"	m	struct:Fts3DeferredToken	file:
pToken	sqlite3.c	/^  Fts3PhraseToken *pToken;        \/* The token itself *\/$/;"	m	struct:Fts3TokenAndCost	file:
pToken	sqlite3.c	/^  char *pToken;                \/* storage for current token *\/$/;"	m	struct:simple_tokenizer_cursor	file:
pTokenizer	sqlite3.c	/^  sqlite3_tokenizer *pTokenizer;       \/* Tokenizer for this cursor. *\/$/;"	m	struct:sqlite3_tokenizer_cursor	file:
pTokenizer	sqlite3.c	/^  sqlite3_tokenizer *pTokenizer;      \/* Tokenizer module *\/$/;"	m	struct:ParseContext	file:
pTokenizer	sqlite3.c	/^  sqlite3_tokenizer *pTokenizer;  \/* tokenizer for inserts and queries *\/$/;"	m	struct:Fts3Table	file:
pToplevel	sqlite3.c	/^  Parse *pToplevel;    \/* Parse structure for main program (or NULL) *\/$/;"	m	struct:Parse	file:
pTraceArg	sqlite3.c	/^  void *pTraceArg;                          \/* Argument to the trace function *\/$/;"	m	struct:sqlite3	file:
pTree	sqlite3.c	/^  SegmentNode *pTree;             \/* Pointer to interior tree structure *\/$/;"	m	struct:SegmentWriter	file:
pTree	sqlite3.c	/^  struct RowSetEntry *pTree;     \/* Binary tree of entries *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetEntry	file:
pTrig	sqlite3.c	/^  Trigger *pTrig;      \/* The trigger that this step is a part of *\/$/;"	m	struct:TriggerStep	file:
pTrigger	sqlite3.c	/^  Trigger *pTrigger;      \/* Trigger this program was coded from *\/$/;"	m	struct:TriggerPrg	file:
pTrigger	sqlite3.c	/^  Trigger *pTrigger;   \/* List of triggers stored in pSchema *\/$/;"	m	struct:Table	file:
pTrigger	sqlite3.c	82008;"	d	file:
pTrigger	sqlite3.c	86068;"	d	file:
pTrigger	sqlite3.c	96815;"	d	file:
pTriggerPrg	sqlite3.c	/^  TriggerPrg *pTriggerPrg;    \/* Linked list of coded triggers *\/$/;"	m	struct:Parse	file:
pTriggerTab	sqlite3.c	/^  Table *pTriggerTab;  \/* Table triggers are being coded for *\/$/;"	m	struct:Parse	file:
pUnlockArg	sqlite3.c	/^  void *pUnlockArg;                     \/* Argument to xUnlockNotify *\/$/;"	m	struct:sqlite3	file:
pUnlockConnection	sqlite3.c	/^  sqlite3 *pUnlockConnection;           \/* Connection to watch for unlock *\/$/;"	m	struct:sqlite3	file:
pUnused	sqlite3.c	/^  UnixUnusedFd *pUnused;              \/* Pre-allocated UnixUnusedFd *\/$/;"	m	struct:unixFile	file:
pUnused	sqlite3.c	/^  UnixUnusedFd *pUnused;          \/* Unused file descriptors to close *\/$/;"	m	struct:unixInodeInfo	file:
pUpdateArg	sqlite3.c	/^  void *pUpdateArg;$/;"	m	struct:sqlite3	file:
pUser	sqlite3.c	/^  void *pUser;                    \/* Callback implementation user data *\/$/;"	m	struct:sqlite3_rtree_geometry	file:
pUser	sqlite3.c	/^  void *pUser;          \/* First argument to xCmp() *\/$/;"	m	struct:CollSeq	file:
pUserData	sqlite3.c	/^  void *pUserData;     \/* User data parameter *\/$/;"	m	struct:FuncDef	file:
pUserData	sqlite3.c	/^  void *pUserData;$/;"	m	struct:FuncDestructor	file:
pUsing	sqlite3.c	/^    IdList *pUsing;   \/* The USING clause of a join *\/$/;"	m	struct:SrcList::SrcList_item	file:
pVTable	sqlite3.c	/^  VTable *pVTable;     \/* List of VTable objects. *\/$/;"	m	struct:Table	file:
pVTable	sqlite3.c	/^  VTable *pVTable;$/;"	m	struct:VtabCtx	file:
pVdbe	sqlite3.c	/^  Vdbe *pVdbe;         \/* An engine for executing database bytecode *\/$/;"	m	struct:Parse	file:
pVdbe	sqlite3.c	/^  struct Vdbe *pVdbe;           \/* List of active virtual machines *\/$/;"	m	struct:sqlite3	typeref:struct:sqlite3::Vdbe	file:
pVdbeFunc	sqlite3.c	/^    VdbeFunc *pVdbeFunc;   \/* Used when p4type is P4_VDBEFUNC *\/$/;"	m	union:VdbeOp::__anon1	file:
pVdbeFunc	sqlite3.c	/^  VdbeFunc *pVdbeFunc;  \/* Auxilary data, if created. *\/$/;"	m	struct:sqlite3_context	file:
pVfs	sqlite3.c	/^  sqlite3_vfs *pVfs;              \/* The "real" underlying VFS *\/$/;"	m	struct:JournalFile	file:
pVfs	sqlite3.c	/^  sqlite3_vfs *pVfs;            \/* OS Interface *\/$/;"	m	struct:sqlite3	file:
pVfs	sqlite3.c	/^  sqlite3_vfs *pVfs;          \/* OS functions to use for IO *\/$/;"	m	struct:Pager	file:
pVfs	sqlite3.c	/^  sqlite3_vfs *pVfs;         \/* The VFS used to create pDbFd *\/$/;"	m	struct:Wal	file:
pVfs	sqlite3.c	/^  sqlite3_vfs *pVfs;      \/* The VFS used to open this file *\/$/;"	m	struct:winFile	file:
pVtab	sqlite3.c	/^    VTable *pVtab;         \/* Used when p4type is P4_VTAB *\/$/;"	m	union:VdbeOp::__anon1	file:
pVtab	sqlite3.c	/^  sqlite3_vtab *pVtab;      \/* Pointer to vtab instance *\/$/;"	m	struct:VTable	file:
pVtab	sqlite3.c	/^  sqlite3_vtab *pVtab;      \/* Virtual table of this cursor *\/$/;"	m	struct:sqlite3_vtab_cursor	file:
pVtabCtx	sqlite3.c	/^  VtabCtx *pVtabCtx;            \/* Context for active vtab connect\/create *\/$/;"	m	struct:sqlite3	file:
pVtabCursor	sqlite3.c	/^  sqlite3_vtab_cursor *pVtabCursor;  \/* The cursor for a virtual table *\/$/;"	m	struct:VdbeCursor	file:
pVtabIdx	sqlite3.c	/^    sqlite3_index_info *pVtabIdx;  \/* Virtual table index to use *\/$/;"	m	union:WherePlan::__anon6	file:
pWC	sqlite3.c	/^  WhereClause *pWC;       \/* The clause this term is part of *\/$/;"	m	struct:WhereTerm	file:
pWC	sqlite3.c	/^  struct WhereClause *pWC;       \/* Decomposition of the WHERE clause *\/$/;"	m	struct:WhereInfo	typeref:struct:WhereInfo::WhereClause	file:
pWal	sqlite3.c	/^  Wal *pWal;                  \/* Write-ahead log used by "journal_mode=wal" *\/$/;"	m	struct:Pager	file:
pWalArg	sqlite3.c	/^  void *pWalArg;$/;"	m	struct:sqlite3	file:
pWalFd	sqlite3.c	/^  sqlite3_file *pWalFd;      \/* File handle for WAL file *\/$/;"	m	struct:Wal	file:
pWhen	sqlite3.c	/^  Expr *pWhen;            \/* The WHEN clause of the expression (may be NULL) *\/$/;"	m	struct:Trigger	file:
pWhere	sqlite3.c	/^  Expr *pWhere;          \/* The WHERE clause *\/$/;"	m	struct:Select	file:
pWhere	sqlite3.c	/^  Expr *pWhere;        \/* The WHERE clause for DELETE or UPDATE steps *\/$/;"	m	struct:TriggerStep	file:
pWriteNode	sqlite3.c	/^  sqlite3_stmt *pWriteNode;$/;"	m	struct:Rtree	file:
pWriteParent	sqlite3.c	/^  sqlite3_stmt *pWriteParent;$/;"	m	struct:Rtree	file:
pWriteRowid	sqlite3.c	/^  sqlite3_stmt *pWriteRowid;$/;"	m	struct:Rtree	file:
pWriter	sqlite3.c	/^  Btree *pWriter;       \/* Btree with currently open write transaction *\/$/;"	m	struct:BtShared	file:
pZombieTab	sqlite3.c	/^  Table *pZombieTab;      \/* List of Table objects to delete after code gen *\/$/;"	m	struct:Parse	file:
pageHash	sqlite3.c	/^  u32 pageHash;                  \/* Hash of page content *\/$/;"	m	struct:PgHdr	file:
pageInJournal	sqlite3.c	/^static int pageInJournal(PgHdr *pPg){$/;"	f	file:
pageReinit	sqlite3.c	/^static void pageReinit(DbPage *pData){$/;"	f	file:
pageSize	sqlite3.c	/^  int pageSize;               \/* Number of bytes in a page *\/$/;"	m	struct:Pager	file:
pageSize	sqlite3.c	/^  u32 pageSize;         \/* Total number of bytes on a page *\/$/;"	m	struct:BtShared	file:
pageSizeFixed	sqlite3.c	/^  u8 pageSizeFixed;     \/* True if the page size can no longer be changed *\/$/;"	m	struct:BtShared	file:
pagerBeginReadTransaction	sqlite3.c	/^static int pagerBeginReadTransaction(Pager *pPager){$/;"	f	file:
pagerBeginReadTransaction	sqlite3.c	37582;"	d	file:
pagerExclusiveLock	sqlite3.c	/^static int pagerExclusiveLock(Pager *pPager){$/;"	f	file:
pagerLockDb	sqlite3.c	/^static int pagerLockDb(Pager *pPager, int eLock){$/;"	f	file:
pagerOpenWal	sqlite3.c	/^static int pagerOpenWal(Pager *pPager){$/;"	f	file:
pagerOpenWalIfPresent	sqlite3.c	/^static int pagerOpenWalIfPresent(Pager *pPager){$/;"	f	file:
pagerOpenWalIfPresent	sqlite3.c	37581;"	d	file:
pagerOpentemp	sqlite3.c	/^static int pagerOpentemp($/;"	f	file:
pagerPagecount	sqlite3.c	/^static int pagerPagecount(Pager *pPager, Pgno *pnPage){$/;"	f	file:
pagerPlaybackSavepoint	sqlite3.c	/^static int pagerPlaybackSavepoint(Pager *pPager, PagerSavepoint *pSavepoint){$/;"	f	file:
pagerReportSize	sqlite3.c	/^static void pagerReportSize(Pager *pPager){$/;"	f	file:
pagerReportSize	sqlite3.c	38847;"	d	file:
pagerRollbackWal	sqlite3.c	/^static int pagerRollbackWal(Pager *pPager){$/;"	f	file:
pagerRollbackWal	sqlite3.c	37579;"	d	file:
pagerStress	sqlite3.c	/^static int pagerStress(void *p, PgHdr *pPg){$/;"	f	file:
pagerSyncHotJournal	sqlite3.c	/^static int pagerSyncHotJournal(Pager *pPager){$/;"	f	file:
pagerUndoCallback	sqlite3.c	/^static int pagerUndoCallback(void *pCtx, Pgno iPg){$/;"	f	file:
pagerUnlockAndRollback	sqlite3.c	/^static void pagerUnlockAndRollback(Pager *pPager){$/;"	f	file:
pagerUnlockDb	sqlite3.c	/^static int pagerUnlockDb(Pager *pPager, int eLock){$/;"	f	file:
pagerUnlockIfUnused	sqlite3.c	/^static void pagerUnlockIfUnused(Pager *pPager){$/;"	f	file:
pagerUseWal	sqlite3.c	/^static int pagerUseWal(Pager *pPager){$/;"	f	file:
pagerUseWal	sqlite3.c	37578;"	d	file:
pagerWalFrames	sqlite3.c	/^static int pagerWalFrames($/;"	f	file:
pagerWalFrames	sqlite3.c	37580;"	d	file:
pager_cksum	sqlite3.c	/^static u32 pager_cksum(Pager *pPager, const u8 *aData){$/;"	f	file:
pager_datahash	sqlite3.c	/^static u32 pager_datahash(int nByte, unsigned char *pData){$/;"	f	file:
pager_datahash	sqlite3.c	37963;"	d	file:
pager_delmaster	sqlite3.c	/^static int pager_delmaster(Pager *pPager, const char *zMaster){$/;"	f	file:
pager_end_transaction	sqlite3.c	/^static int pager_end_transaction(Pager *pPager, int hasMaster){$/;"	f	file:
pager_error	sqlite3.c	/^static int pager_error(Pager *pPager, int rc){$/;"	f	file:
pager_incr_changecounter	sqlite3.c	/^static int pager_incr_changecounter(Pager *pPager, int isDirectMode){$/;"	f	file:
pager_lookup	sqlite3.c	/^static PgHdr *pager_lookup(Pager *pPager, Pgno pgno){$/;"	f	file:
pager_open_journal	sqlite3.c	/^static int pager_open_journal(Pager *pPager){$/;"	f	file:
pager_pagehash	sqlite3.c	/^static u32 pager_pagehash(PgHdr *pPage){$/;"	f	file:
pager_pagehash	sqlite3.c	37964;"	d	file:
pager_playback	sqlite3.c	/^static int pager_playback(Pager *pPager, int isHot){$/;"	f	file:
pager_playback_one_page	sqlite3.c	/^static int pager_playback_one_page($/;"	f	file:
pager_reset	sqlite3.c	/^static void pager_reset(Pager *pPager){$/;"	f	file:
pager_set_pagehash	sqlite3.c	/^static void pager_set_pagehash(PgHdr *pPage){$/;"	f	file:
pager_set_pagehash	sqlite3.c	37965;"	d	file:
pager_truncate	sqlite3.c	/^static int pager_truncate(Pager *pPager, Pgno nPage){$/;"	f	file:
pager_unlock	sqlite3.c	/^static void pager_unlock(Pager *pPager){$/;"	f	file:
pager_wait_on_lock	sqlite3.c	/^static int pager_wait_on_lock(Pager *pPager, int locktype){$/;"	f	file:
pager_write	sqlite3.c	/^static int pager_write(PgHdr *pPg){$/;"	f	file:
pager_write_changecounter	sqlite3.c	/^static void pager_write_changecounter(PgHdr *pPg){$/;"	f	file:
pager_write_pagelist	sqlite3.c	/^static int pager_write_pagelist(Pager *pPager, PgHdr *pList){$/;"	f	file:
parentWrite	sqlite3.c	/^static int parentWrite(Rtree *pRtree, sqlite3_int64 iNode, sqlite3_int64 iPar){$/;"	f	file:
parseCell	sqlite3.c	48471;"	d	file:
parseDateOrTime	sqlite3.c	/^static int parseDateOrTime($/;"	f	file:
parseError	sqlite3.c	/^  u8 parseError;       \/* True after a parsing error.  Ticket #1794 *\/$/;"	m	struct:Parse	file:
parseHhMmSs	sqlite3.c	/^static int parseHhMmSs(const char *zDate, DateTime *p){$/;"	f	file:
parseModifier	sqlite3.c	/^static int parseModifier(sqlite3_context *pCtx, const char *zMod, DateTime *p){$/;"	f	file:
parseTimezone	sqlite3.c	/^static int parseTimezone(const char *zDate, DateTime *p){$/;"	f	file:
parseYyyyMmDd	sqlite3.c	/^static int parseYyyyMmDd(const char *zDate, DateTime *p){$/;"	f	file:
patternCompare	sqlite3.c	/^static int patternCompare($/;"	f	file:
payloadSize	sqlite3.c	/^  int payloadSize;      \/* Total number of bytes in the record *\/$/;"	m	struct:VdbeCursor	file:
pc	sqlite3.c	/^  int pc;                 \/* Program Counter in parent (calling) frame *\/$/;"	m	struct:VdbeFrame	file:
pc	sqlite3.c	/^  int pc;                 \/* The program counter *\/$/;"	m	struct:Vdbe	file:
pcache	sqlite3.c	/^  sqlite3_pcache_methods pcache;    \/* Low-level page-cache interface *\/$/;"	m	struct:Sqlite3Config	file:
pcache1	sqlite3.c	35419;"	d	file:
pcache1Alloc	sqlite3.c	/^static void *pcache1Alloc(int nByte){$/;"	f	file:
pcache1AllocPage	sqlite3.c	/^static PgHdr1 *pcache1AllocPage(PCache1 *pCache){$/;"	f	file:
pcache1Cachesize	sqlite3.c	/^static void pcache1Cachesize(sqlite3_pcache *p, int nMax){$/;"	f	file:
pcache1Create	sqlite3.c	/^static sqlite3_pcache *pcache1Create(int szPage, int bPurgeable){$/;"	f	file:
pcache1Destroy	sqlite3.c	/^static void pcache1Destroy(sqlite3_pcache *p){$/;"	f	file:
pcache1EnforceMaxPage	sqlite3.c	/^static void pcache1EnforceMaxPage(PGroup *pGroup){$/;"	f	file:
pcache1EnterMutex	sqlite3.c	35439;"	d	file:
pcache1Fetch	sqlite3.c	/^static void *pcache1Fetch(sqlite3_pcache *p, unsigned int iKey, int createFlag){$/;"	f	file:
pcache1Free	sqlite3.c	/^static void pcache1Free(void *p){$/;"	f	file:
pcache1FreePage	sqlite3.c	/^static void pcache1FreePage(PgHdr1 *p){$/;"	f	file:
pcache1Init	sqlite3.c	/^static int pcache1Init(void *NotUsed){$/;"	f	file:
pcache1LeaveMutex	sqlite3.c	35440;"	d	file:
pcache1MemSize	sqlite3.c	/^static int pcache1MemSize(void *p){$/;"	f	file:
pcache1Pagecount	sqlite3.c	/^static int pcache1Pagecount(sqlite3_pcache *p){$/;"	f	file:
pcache1PinPage	sqlite3.c	/^static void pcache1PinPage(PgHdr1 *pPage){$/;"	f	file:
pcache1Rekey	sqlite3.c	/^static void pcache1Rekey($/;"	f	file:
pcache1RemoveFromHash	sqlite3.c	/^static void pcache1RemoveFromHash(PgHdr1 *pPage){$/;"	f	file:
pcache1ResizeHash	sqlite3.c	/^static int pcache1ResizeHash(PCache1 *p){$/;"	f	file:
pcache1Shutdown	sqlite3.c	/^static void pcache1Shutdown(void *NotUsed){$/;"	f	file:
pcache1Truncate	sqlite3.c	/^static void pcache1Truncate(sqlite3_pcache *p, unsigned int iLimit){$/;"	f	file:
pcache1TruncateUnsafe	sqlite3.c	/^static void pcache1TruncateUnsafe($/;"	f	file:
pcache1UnderMemoryPressure	sqlite3.c	/^static int pcache1UnderMemoryPressure(PCache1 *pCache){$/;"	f	file:
pcache1Unpin	sqlite3.c	/^static void pcache1Unpin(sqlite3_pcache *p, void *pPg, int reuseUnlikely){$/;"	f	file:
pcache1_g	sqlite3.c	/^} pcache1_g;$/;"	v	typeref:struct:PCacheGlobal	file:
pcacheAddToDirtyList	sqlite3.c	/^static void pcacheAddToDirtyList(PgHdr *pPage){$/;"	f	file:
pcacheCheckSynced	sqlite3.c	/^static int pcacheCheckSynced(PCache *pCache){$/;"	f	file:
pcacheMergeDirtyList	sqlite3.c	/^static PgHdr *pcacheMergeDirtyList(PgHdr *pA, PgHdr *pB){$/;"	f	file:
pcacheRemoveFromDirtyList	sqlite3.c	/^static void pcacheRemoveFromDirtyList(PgHdr *pPage){$/;"	f	file:
pcacheSortDirtyList	sqlite3.c	/^static PgHdr *pcacheSortDirtyList(PgHdr *pIn){$/;"	f	file:
pcacheUnpin	sqlite3.c	/^static void pcacheUnpin(PgHdr *p){$/;"	f	file:
pgno	sqlite3.c	/^  Pgno pgno;                     \/* Page number for this page *\/$/;"	m	struct:PgHdr	file:
pgno	sqlite3.c	/^  Pgno pgno;           \/* Page number for this page *\/$/;"	m	struct:MemPage	file:
pgnoRoot	sqlite3.c	/^  Pgno pgnoRoot;            \/* The root page of this tree *\/$/;"	m	struct:BtCursor	file:
plan	sqlite3.c	/^  WherePlan plan;       \/* query plan for this element of the FROM clause *\/$/;"	m	struct:WhereLevel	file:
plan	sqlite3.c	/^  WherePlan plan;    \/* The lookup strategy *\/$/;"	m	struct:WhereCost	file:
pnBytesFreed	sqlite3.c	/^  int *pnBytesFreed;            \/* If not NULL, increment this in DbFree() *\/$/;"	m	struct:sqlite3	file:
porterClose	sqlite3.c	/^static int porterClose(sqlite3_tokenizer_cursor *pCursor){$/;"	f	file:
porterCreate	sqlite3.c	/^static int porterCreate($/;"	f	file:
porterDestroy	sqlite3.c	/^static int porterDestroy(sqlite3_tokenizer *pTokenizer){$/;"	f	file:
porterIdChar	sqlite3.c	/^static const char porterIdChar[] = {$/;"	v	file:
porterNext	sqlite3.c	/^static int porterNext($/;"	f	file:
porterOpen	sqlite3.c	/^static int porterOpen($/;"	f	file:
porterTokenizerModule	sqlite3.c	/^static const sqlite3_tokenizer_module porterTokenizerModule = {$/;"	v	file:
porter_stemmer	sqlite3.c	/^static void porter_stemmer(const char *zIn, int nIn, char *zOut, int *pnOut){$/;"	f	file:
porter_tokenizer	sqlite3.c	/^typedef struct porter_tokenizer {$/;"	s	file:
porter_tokenizer	sqlite3.c	/^} porter_tokenizer;$/;"	t	typeref:struct:porter_tokenizer	file:
porter_tokenizer_cursor	sqlite3.c	/^typedef struct porter_tokenizer_cursor {$/;"	s	file:
porter_tokenizer_cursor	sqlite3.c	/^} porter_tokenizer_cursor;$/;"	t	typeref:struct:porter_tokenizer_cursor	file:
posixOpen	sqlite3.c	/^static int posixOpen(const char *zFile, int flags, int mode){$/;"	f	file:
posixUnlock	sqlite3.c	/^static int posixUnlock(sqlite3_file *id, int eFileLock, int handleNFSUnlock){$/;"	f	file:
ppNextElem	sqlite3.c	/^  Fts3HashElem **ppNextElem;$/;"	m	struct:Fts3SegReader	file:
prefix	sqlite3.c	/^  etByte prefix;           \/* Offset into aPrefix[] of the prefix string *\/$/;"	m	struct:et_info	file:
prepare	sqlite3.c	/^  int  (*prepare)(sqlite3*,const char*,int,sqlite3_stmt**,const char**);$/;"	m	struct:sqlite3_api_routines	file:
prepare	sqlwrap.cpp	/^sqlite3_stmt* SQL::prepare(const string& q) {$/;"	f	class:SQL
prepare	sqlwrap.cpp	/^sqlite3_stmt* SQL::prepare(const string& q, const string& key) {$/;"	f	class:SQL
prepare16	sqlite3.c	/^  int  (*prepare16)(sqlite3*,const void*,int,sqlite3_stmt**,const void**);$/;"	m	struct:sqlite3_api_routines	file:
prepare16_v2	sqlite3.c	/^  int (*prepare16_v2)(sqlite3*,const void*,int,sqlite3_stmt**,const void**);$/;"	m	struct:sqlite3_api_routines	file:
prepare_v2	sqlite3.c	/^  int (*prepare_v2)(sqlite3*,const char*,int,sqlite3_stmt**,const char**);$/;"	m	struct:sqlite3_api_routines	file:
prereqAll	sqlite3.c	/^  Bitmask prereqAll;      \/* Bitmask of tables referenced by pExpr *\/$/;"	m	struct:WhereTerm	file:
prereqRight	sqlite3.c	/^  Bitmask prereqRight;    \/* Bitmask of tables used by pExpr->pRight *\/$/;"	m	struct:WhereTerm	file:
prev	sqlite3.c	/^      u32 prev;       \/* Index in mem3.aPool[] of previous free chunk *\/$/;"	m	struct:Mem3Block::__anon13::__anon15	file:
prev	sqlite3.c	/^  Fts3HashElem *next, *prev; \/* Next and previous elements in the table *\/$/;"	m	struct:Fts3HashElem	file:
prev	sqlite3.c	/^  HashElem *next, *prev;       \/* Next and previous elements in the table *\/$/;"	m	struct:HashElem	file:
prev	sqlite3.c	/^  int prev;       \/* Index of previous free chunk *\/$/;"	m	struct:Mem5Link	file:
prevSize	sqlite3.c	/^      u32 prevSize;   \/* Size of previous chunk in Mem3Block elements *\/$/;"	m	struct:Mem3Block::__anon13::__anon14	file:
print	HomogeneousModelParams.cpp	/^ostream& HMM_PP::HomogeneousModelParams::print(ostream& stream) const {$/;"	f	class:HMM_PP::HomogeneousModelParams
print	UnivariateCategoricalModelParams.cpp	/^ostream& HMM_PP::UnivariateCategoricalModelParams::print(ostream& stream) const {$/;"	f	class:HMM_PP::UnivariateCategoricalModelParams
print	UnivariateQuantitativeModelParams.cpp	/^ostream& HMM_PP::UnivariateQuantitativeModelParams::print(ostream& stream) const {$/;"	f	class:HMM_PP::UnivariateQuantitativeModelParams
printDatapoint	MultivariateCategoricalData.cpp	/^void HMM_PP::MultivariateCategoricalData::printDatapoint(ostream& stream, const uint t) const {$/;"	f	class:HMM_PP::MultivariateCategoricalData
printDatapoint	MultivariateQuantitativeData.cpp	/^void HMM_PP::MultivariateQuantitativeData::printDatapoint(ostream& stream, const uint t) const {$/;"	f	class:HMM_PP::MultivariateQuantitativeData
printDatapoint	UnivariateCategoricalData.cpp	/^void HMM_PP::UnivariateCategoricalData::printDatapoint(ostream& stream, const uint t) const {$/;"	f	class:HMM_PP::UnivariateCategoricalData
printExplicitModel	Model.cpp	/^ostream& HMM_PP::Model::printExplicitModel(ostream& stream, const uint maxT) const {$/;"	f	class:HMM_PP::Model
printModel	Model.cpp	/^ostream& HMM_PP::Model::printModel(ostream& stream) const {$/;"	f	class:HMM_PP::Model
print_pager_state	sqlite3.c	/^static char *print_pager_state(Pager *p){$/;"	f	file:
profile	sqlite3.c	/^  void * (*profile)(sqlite3*,void(*)(void*,const char*,sqlite_uint64),void*);$/;"	m	struct:sqlite3_api_routines	file:
progress_handler	sqlite3.c	/^  void  (*progress_handler)(sqlite3*,int,int(*)(void*),void*);$/;"	m	struct:sqlite3_api_routines	file:
proxyBreakConchLock	sqlite3.c	/^static int proxyBreakConchLock(unixFile *pFile, uuid_t myHostID){$/;"	f	file:
proxyCheckReservedLock	sqlite3.c	/^static int proxyCheckReservedLock(sqlite3_file *id, int *pResOut) {$/;"	f	file:
proxyClose	sqlite3.c	/^static int proxyClose(sqlite3_file *id) {$/;"	f	file:
proxyConchLock	sqlite3.c	/^static int proxyConchLock(unixFile *pFile, uuid_t myHostID, int lockType){$/;"	f	file:
proxyCreateConchPathname	sqlite3.c	/^static int proxyCreateConchPathname(char *dbPath, char **pConchPath){$/;"	f	file:
proxyCreateLockPath	sqlite3.c	/^static int proxyCreateLockPath(const char *lockPath){$/;"	f	file:
proxyCreateUnixFile	sqlite3.c	/^static int proxyCreateUnixFile($/;"	f	file:
proxyFileControl	sqlite3.c	/^static int proxyFileControl(sqlite3_file *id, int op, void *pArg){$/;"	f	file:
proxyGetDbPathForUnixFile	sqlite3.c	/^static int proxyGetDbPathForUnixFile(unixFile *pFile, char *dbPath){$/;"	f	file:
proxyGetHostID	sqlite3.c	/^static int proxyGetHostID(unsigned char *pHostID, int *pError){$/;"	f	file:
proxyGetLockPath	sqlite3.c	/^static int proxyGetLockPath(const char *dbPath, char *lPath, size_t maxLen){$/;"	f	file:
proxyLock	sqlite3.c	/^static int proxyLock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
proxyLockingContext	sqlite3.c	/^struct proxyLockingContext {$/;"	s	file:
proxyLockingContext	sqlite3.c	/^typedef struct proxyLockingContext proxyLockingContext;$/;"	t	typeref:struct:proxyLockingContext	file:
proxyReleaseConch	sqlite3.c	/^static int proxyReleaseConch(unixFile *pFile){$/;"	f	file:
proxyTakeConch	sqlite3.c	/^static int proxyTakeConch(unixFile *pFile){$/;"	f	file:
proxyTransformUnixFile	sqlite3.c	/^static int proxyTransformUnixFile(unixFile *pFile, const char *path) {$/;"	f	file:
proxyUnlock	sqlite3.c	/^static int proxyUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
pseudoTableReg	sqlite3.c	/^  int pseudoTableReg;   \/* Register holding pseudotable content. *\/$/;"	m	struct:VdbeCursor	file:
pthreadMutexAlloc	sqlite3.c	/^static sqlite3_mutex *pthreadMutexAlloc(int iType){$/;"	f	file:
pthreadMutexEnd	sqlite3.c	/^static int pthreadMutexEnd(void){ return SQLITE_OK; }$/;"	f	file:
pthreadMutexEnter	sqlite3.c	/^static void pthreadMutexEnter(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexFree	sqlite3.c	/^static void pthreadMutexFree(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexHeld	sqlite3.c	/^static int pthreadMutexHeld(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexInit	sqlite3.c	/^static int pthreadMutexInit(void){ return SQLITE_OK; }$/;"	f	file:
pthreadMutexLeave	sqlite3.c	/^static void pthreadMutexLeave(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexNotheld	sqlite3.c	/^static int pthreadMutexNotheld(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexTry	sqlite3.c	/^static int pthreadMutexTry(sqlite3_mutex *p){$/;"	f	file:
ptrmapGet	sqlite3.c	/^static int ptrmapGet(BtShared *pBt, Pgno key, u8 *pEType, Pgno *pPgno){$/;"	f	file:
ptrmapGet	sqlite3.c	48358;"	d	file:
ptrmapPageno	sqlite3.c	/^static Pgno ptrmapPageno(BtShared *pBt, Pgno pgno){$/;"	f	file:
ptrmapPut	sqlite3.c	/^static void ptrmapPut(BtShared *pBt, Pgno key, u8 eType, Pgno parent, int *pRC){$/;"	f	file:
ptrmapPut	sqlite3.c	48357;"	d	file:
ptrmapPutOvflPtr	sqlite3.c	/^static void ptrmapPutOvflPtr(MemPage *pPage, u8 *pCell, int *pRC){$/;"	f	file:
ptrmapPutOvflPtr	sqlite3.c	48359;"	d	file:
pushOntoSorter	sqlite3.c	/^static void pushOntoSorter($/;"	f	file:
put2byte	sqlite3.c	47235;"	d	file:
put32bits	sqlite3.c	37822;"	d	file:
put4byte	sqlite3.c	47237;"	d	file:
putVarint	sqlite3.c	11523;"	d	file:
putVarint32	sqlite3.c	11521;"	d	file:
pzErrMsg	sqlite3.c	/^  char **pzErrMsg;    \/* Error message stored here *\/$/;"	m	struct:__anon9	file:
qt	MultivariateQuantitativeData.cpp	/^double HMM_PP::MultivariateQuantitativeData::qt(const uint t, const uint j) {$/;"	f	class:HMM_PP::MultivariateQuantitativeData
query	sqlwrap.cpp	/^bool SQL::query(const string& q) {$/;"	f	class:SQL
querySharedCacheTableLock	sqlite3.c	/^static int querySharedCacheTableLock(Btree *p, Pgno iTab, u8 eLock){$/;"	f	file:
querySharedCacheTableLock	sqlite3.c	47599;"	d	file:
queryTestTokenizer	sqlite3.c	/^static int queryTestTokenizer($/;"	f	file:
queryTokenizer	sqlite3.c	/^int queryTokenizer($/;"	f	file:
quoteFunc	sqlite3.c	/^static void quoteFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
r	sqlite3.c	/^    double r;       \/* Value if eType is SQLITE_FLOAT or SQLITE_INTEGER *\/$/;"	m	union:IndexSample::__anon3	file:
r	sqlite3.c	/^  double r;           \/* Real value *\/$/;"	m	struct:Mem	file:
rCost	sqlite3.c	/^  double rCost;      \/* Overall cost of pursuing this search strategy *\/$/;"	m	struct:WhereCost	file:
rSum	sqlite3.c	/^  double rSum;      \/* Floating point sum *\/$/;"	m	struct:SumCtx	file:
rValue	sqlite3.c	/^  double rValue;                  \/* Constraint value. *\/$/;"	m	struct:RtreeConstraint	file:
rand	CRandom.cpp	/^double CRandom::rand () {$/;"	f	class:CRandom
rand	CRandom.cpp	/^int CRandom::rand (int n) {$/;"	f	class:CRandom
randomBlob	sqlite3.c	/^static void randomBlob($/;"	f	file:
randomByte	sqlite3.c	/^static u8 randomByte(void){$/;"	f	file:
randomFill	sqlite3.c	/^static void randomFill(char *pBuf, int nByte){$/;"	f	file:
randomFunc	sqlite3.c	/^static void randomFunc($/;"	f	file:
randomize	Simplex.cpp	/^void HMM_PP::Simplex::randomize(const double fac) {$/;"	f	class:HMM_PP::Simplex
randomness	sqlite3.c	/^  void (*randomness)(int,void*);$/;"	m	struct:sqlite3_api_routines	file:
rc	sqlite3.c	/^  int rc;                  \/* Backup process error code *\/$/;"	m	struct:sqlite3_backup	file:
rc	sqlite3.c	/^  int rc;                 \/* Value to return *\/$/;"	m	struct:Vdbe	file:
rc	sqlite3.c	/^  int rc;              \/* Return code from execution *\/$/;"	m	struct:Parse	file:
rc	sqlite3.c	/^  int rc;             \/* Result code stored here *\/$/;"	m	struct:__anon9	file:
rc	sqlite3.c	/^  int rc;            \/* Return code from sqlite3_exec() *\/$/;"	m	struct:TabResult	file:
read32bits	sqlite3.c	/^static int read32bits(sqlite3_file *fd, i64 offset, u32 *pRes){$/;"	f	file:
readCoord	sqlite3.c	/^static void readCoord(u8 *p, RtreeCoord *pCoord){$/;"	f	file:
readDbPage	sqlite3.c	/^static int readDbPage(PgHdr *pPg){$/;"	f	file:
readGaussianParams	UnivariateQuantitativeModelParams.cpp	/^void HMM_PP::UnivariateQuantitativeModelParams::readGaussianParams(istream& stream, const uint numHiddenStates, BaseRealVec& paramValues) {$/;"	f	class:HMM_PP::UnivariateQuantitativeModelParams
readInt16	sqlite3.c	/^static int readInt16(u8 *p){$/;"	f	file:
readInt64	sqlite3.c	/^static i64 readInt64(u8 *p){$/;"	f	file:
readJournalHdr	sqlite3.c	/^static int readJournalHdr($/;"	f	file:
readLock	sqlite3.c	/^  i16 readLock;              \/* Which read lock is being held.  -1 for none *\/$/;"	m	struct:Wal	file:
readMasterJournal	sqlite3.c	/^static int readMasterJournal(sqlite3_file *pJrnl, char *zMaster, u32 nMaster){$/;"	f	file:
readOnly	sqlite3.c	/^  u8 readOnly;                \/* True for a read-only database *\/$/;"	m	struct:Pager	file:
readOnly	sqlite3.c	/^  u8 readOnly;               \/* WAL_RDWR, WAL_RDONLY, or WAL_SHM_RDONLY *\/$/;"	m	struct:Wal	file:
readOnly	sqlite3.c	/^  u8 readOnly;            \/* True for read-only statements *\/$/;"	m	struct:Vdbe	file:
readOnly	sqlite3.c	/^  u8 readOnly;          \/* True if the underlying file is readonly *\/$/;"	m	struct:BtShared	file:
readTransMatParams	HomogeneousModelParams.cpp	/^void HMM_PP::HomogeneousModelParams::readTransMatParams(istream& stream, const uint numHiddenStates, BaseRealVec& paramValues) {$/;"	f	class:HMM_PP::HomogeneousModelParams
readpoint	sqlite3.c	/^  FilePoint readpoint;            \/* Pointer to the end of the last xRead() *\/$/;"	m	struct:MemJournal	file:
readsTable	sqlite3.c	/^static int readsTable(Parse *p, int iStartAddr, int iDb, Table *pTab){$/;"	f	file:
realNum	utils.cpp	/^bool HMM_PP::realNum(double d) {$/;"	f	class:HMM_PP
realloc	sqlite3.c	/^  void *(*realloc)(void*,int);$/;"	m	struct:sqlite3_api_routines	file:
reestimateInitProbs	Model.cpp	/^void HMM_PP::Model::reestimateInitProbs() {$/;"	f	class:HMM_PP::Model
reestimateTransitionAndEmissionNoScaling	Model.cpp	/^void HMM_PP::Model::reestimateTransitionAndEmissionNoScaling() {$/;"	f	class:HMM_PP::Model
referencesOtherTables	sqlite3.c	/^static int referencesOtherTables($/;"	f	file:
regCtr	sqlite3.c	/^  int regCtr;           \/* Memory register holding the rowid counter *\/$/;"	m	struct:AutoincInfo	file:
regRoot	sqlite3.c	/^  int regRoot;         \/* Register holding root page number for new objects *\/$/;"	m	struct:Parse	file:
regRowid	sqlite3.c	/^  int regRowid;        \/* Register holding rowid of CREATE TABLE entry *\/$/;"	m	struct:Parse	file:
registerTokenizer	sqlite3.c	/^int registerTokenizer($/;"	f	file:
registerTrace	sqlite3.c	/^static void registerTrace(FILE *out, int iReg, Mem *p){$/;"	f	file:
rehash	sqlite3.c	/^static int rehash(Hash *pH, unsigned int new_size){$/;"	f	file:
reindexDatabases	sqlite3.c	/^static void reindexDatabases(Parse *pParse, char const *zColl){$/;"	f	file:
reindexTable	sqlite3.c	/^static void reindexTable(Parse *pParse, Table *pTab, char const *zColl){$/;"	f	file:
reinsertNodeContent	sqlite3.c	/^static int reinsertNodeContent(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
relabelHiddenState	ModelParams.cpp	/^void HMM_PP::ModelParams::HiddenStateParams::relabelHiddenState(const uint i, const string& label) {$/;"	f	class:HMM_PP::ModelParams::HiddenStateParams
releaseAllSavepoints	sqlite3.c	/^static void releaseAllSavepoints(Pager *pPager){$/;"	f	file:
releaseInodeInfo	sqlite3.c	/^static void releaseInodeInfo(unixFile *pFile){$/;"	f	file:
releaseMemArray	sqlite3.c	/^static void releaseMemArray(Mem *p, int N){$/;"	f	file:
releasePage	sqlite3.c	/^static void releasePage(MemPage *pPage){$/;"	f	file:
release_memory	sqlite3.c	/^  int (*release_memory)(int);$/;"	m	struct:sqlite3_api_routines	file:
reloadTableSchema	sqlite3.c	/^static void reloadTableSchema(Parse *pParse, Table *pTab, const char *zName){$/;"	f	file:
relocatePage	sqlite3.c	/^static int relocatePage($/;"	f	file:
removeElementGivenHash	sqlite3.c	/^static void removeElementGivenHash($/;"	f	file:
removeFile	utils.cpp	/^bool HMM_PP::removeFile(const string& f) {$/;"	f	class:HMM_PP
removeFromBlockedList	sqlite3.c	/^static void removeFromBlockedList(sqlite3 *db){$/;"	f	file:
removeFromSharingList	sqlite3.c	/^static int removeFromSharingList(BtShared *pBt){$/;"	f	file:
removeNode	sqlite3.c	/^static int removeNode(Rtree *pRtree, RtreeNode *pNode, int iHeight){$/;"	f	file:
renameParentFunc	sqlite3.c	/^static void renameParentFunc($/;"	f	file:
renameTableFunc	sqlite3.c	/^static void renameTableFunc($/;"	f	file:
renameTriggerFunc	sqlite3.c	/^static void renameTriggerFunc($/;"	f	file:
renderLogMsg	sqlite3.c	/^static void renderLogMsg(int iErrCode, const char *zFormat, va_list ap){$/;"	f	file:
replaceFunc	sqlite3.c	/^static void replaceFunc($/;"	f	file:
reserved	sqlite3.c	/^  int reserved;$/;"	m	struct:afpLockingContext	file:
reset	sqlite3.c	/^  int  (*reset)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines	file:
reset	sqlwrap.cpp	/^void SQL::reset(sqlite3_stmt* stmt) {$/;"	f	class:SQL
resetAccumulator	sqlite3.c	/^static void resetAccumulator(Parse *pParse, AggInfo *pAggInfo){$/;"	f	file:
resolveAlias	sqlite3.c	/^static void resolveAlias($/;"	f	file:
resolveAsName	sqlite3.c	/^static int resolveAsName($/;"	f	file:
resolveAttachExpr	sqlite3.c	/^static int resolveAttachExpr(NameContext *pName, Expr *pExpr)$/;"	f	file:
resolveCompoundOrderBy	sqlite3.c	/^static int resolveCompoundOrderBy($/;"	f	file:
resolveExprStep	sqlite3.c	/^static int resolveExprStep(Walker *pWalker, Expr *pExpr){$/;"	f	file:
resolveOrderByTermToExprList	sqlite3.c	/^static int resolveOrderByTermToExprList($/;"	f	file:
resolveOrderGroupBy	sqlite3.c	/^static int resolveOrderGroupBy($/;"	f	file:
resolveOutOfRangeError	sqlite3.c	/^static void resolveOutOfRangeError($/;"	f	file:
resolveP2Values	sqlite3.c	/^static void resolveP2Values(Vdbe *p, int *pMaxFuncArgs){$/;"	f	file:
resolveSelectStep	sqlite3.c	/^static int resolveSelectStep(Walker *pWalker, Select *p){$/;"	f	file:
restoreCursorPosition	sqlite3.c	48210;"	d	file:
result_blob	sqlite3.c	/^  void  (*result_blob)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
result_double	sqlite3.c	/^  void  (*result_double)(sqlite3_context*,double);$/;"	m	struct:sqlite3_api_routines	file:
result_error	sqlite3.c	/^  void  (*result_error)(sqlite3_context*,const char*,int);$/;"	m	struct:sqlite3_api_routines	file:
result_error16	sqlite3.c	/^  void  (*result_error16)(sqlite3_context*,const void*,int);$/;"	m	struct:sqlite3_api_routines	file:
result_error_code	sqlite3.c	/^  void (*result_error_code)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines	file:
result_error_nomem	sqlite3.c	/^  void (*result_error_nomem)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
result_error_toobig	sqlite3.c	/^  void (*result_error_toobig)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
result_int	sqlite3.c	/^  void  (*result_int)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines	file:
result_int64	sqlite3.c	/^  void  (*result_int64)(sqlite3_context*,sqlite_int64);$/;"	m	struct:sqlite3_api_routines	file:
result_null	sqlite3.c	/^  void  (*result_null)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
result_text	sqlite3.c	/^  void  (*result_text)(sqlite3_context*,const char*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
result_text16	sqlite3.c	/^  void  (*result_text16)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
result_text16be	sqlite3.c	/^  void  (*result_text16be)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
result_text16le	sqlite3.c	/^  void  (*result_text16le)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
result_value	sqlite3.c	/^  void  (*result_value)(sqlite3_context*,sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
result_zeroblob	sqlite3.c	/^  void (*result_zeroblob)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines	file:
retRangeStart	sqlite3.c	/^  unsigned long long retRangeStart; \/* nbr of 1st byte locked if successful *\/$/;"	m	struct:ByteRangeLockPB2	file:
returnSingleInt	sqlite3.c	/^static void returnSingleInt(Parse *pParse, const char *zLabel, i64 value){$/;"	f	file:
robust_close	sqlite3.c	/^static void robust_close(unixFile *pFile, int h, int lineno){$/;"	f	file:
robust_flock	sqlite3.c	/^static int robust_flock(int fd, int op){$/;"	f	file:
robust_flock	sqlite3.c	26534;"	d	file:
robust_ftruncate	sqlite3.c	/^static int robust_ftruncate(int h, sqlite3_int64 sz){$/;"	f	file:
robust_open	sqlite3.c	/^static int robust_open(const char *z, int f, int m){$/;"	f	file:
rollback_hook	sqlite3.c	/^  void * (*rollback_hook)(sqlite3*,void(*)(void*),void*);$/;"	m	struct:sqlite3_api_routines	file:
roundFunc	sqlite3.c	/^static void roundFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
rowSetListToTree	sqlite3.c	/^static struct RowSetEntry *rowSetListToTree(struct RowSetEntry *pList){$/;"	f	file:
rowSetMerge	sqlite3.c	/^static struct RowSetEntry *rowSetMerge($/;"	f	file:
rowSetNDeepTree	sqlite3.c	/^static struct RowSetEntry *rowSetNDeepTree($/;"	f	file:
rowSetSort	sqlite3.c	/^static void rowSetSort(RowSet *p){$/;"	f	file:
rowSetToList	sqlite3.c	/^static void rowSetToList(RowSet *p){$/;"	f	file:
rowSetTreeToList	sqlite3.c	/^static void rowSetTreeToList($/;"	f	file:
rowid	sqlite3.c	/^  i64 rowid;          \/* Used by UNPACKED_PREFIX_SEARCH *\/$/;"	m	struct:UnpackedRecord	file:
rowidIsValid	sqlite3.c	/^  Bool rowidIsValid;    \/* True if lastRowid is valid *\/$/;"	m	struct:VdbeCursor	file:
rowidWrite	sqlite3.c	/^static int rowidWrite(Rtree *pRtree, sqlite3_int64 iRowid, sqlite3_int64 iNode){$/;"	f	file:
rtreeBestIndex	sqlite3.c	/^static int rtreeBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){$/;"	f	file:
rtreeClose	sqlite3.c	/^static int rtreeClose(sqlite3_vtab_cursor *cur){$/;"	f	file:
rtreeColumn	sqlite3.c	/^static int rtreeColumn(sqlite3_vtab_cursor *cur, sqlite3_context *ctx, int i){$/;"	f	file:
rtreeConnect	sqlite3.c	/^static int rtreeConnect($/;"	f	file:
rtreeCreate	sqlite3.c	/^static int rtreeCreate($/;"	f	file:
rtreeDeleteRowid	sqlite3.c	/^static int rtreeDeleteRowid(Rtree *pRtree, sqlite3_int64 iDelete){$/;"	f	file:
rtreeDestroy	sqlite3.c	/^static int rtreeDestroy(sqlite3_vtab *pVtab){$/;"	f	file:
rtreeDisconnect	sqlite3.c	/^static int rtreeDisconnect(sqlite3_vtab *pVtab){$/;"	f	file:
rtreeEof	sqlite3.c	/^static int rtreeEof(sqlite3_vtab_cursor *cur){$/;"	f	file:
rtreeFilter	sqlite3.c	/^static int rtreeFilter($/;"	f	file:
rtreeInit	sqlite3.c	/^static int rtreeInit($/;"	f	file:
rtreeInsertCell	sqlite3.c	/^static int rtreeInsertCell($/;"	f	file:
rtreeModule	sqlite3.c	/^static sqlite3_module rtreeModule = {$/;"	v	file:
rtreeNext	sqlite3.c	/^static int rtreeNext(sqlite3_vtab_cursor *pVtabCursor){$/;"	f	file:
rtreeOpen	sqlite3.c	/^static int rtreeOpen(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor){$/;"	f	file:
rtreeReference	sqlite3.c	/^static void rtreeReference(Rtree *pRtree){$/;"	f	file:
rtreeRelease	sqlite3.c	/^static void rtreeRelease(Rtree *pRtree){$/;"	f	file:
rtreeRename	sqlite3.c	/^static int rtreeRename(sqlite3_vtab *pVtab, const char *zNewName){$/;"	f	file:
rtreeRowid	sqlite3.c	/^static int rtreeRowid(sqlite3_vtab_cursor *pVtabCursor, sqlite_int64 *pRowid){$/;"	f	file:
rtreeSqlInit	sqlite3.c	/^static int rtreeSqlInit($/;"	f	file:
rtreeUpdate	sqlite3.c	/^static int rtreeUpdate($/;"	f	file:
rtreedepth	sqlite3.c	/^static void rtreedepth(sqlite3_context *ctx, int nArg, sqlite3_value **apArg){$/;"	f	file:
rtreenode	sqlite3.c	/^static void rtreenode(sqlite3_context *ctx, int nArg, sqlite3_value **apArg){$/;"	f	file:
runOnlyOnce	sqlite3.c	/^  u8 runOnlyOnce;         \/* Automatically expire on reset *\/$/;"	m	struct:Vdbe	file:
s	sqlite3.c	/^  Mem s;                \/* The return value is stored here *\/$/;"	m	struct:sqlite3_context	file:
s	sqlite3.c	/^  double s;          \/* Seconds *\/$/;"	m	struct:DateTime	file:
s	sqlite3.c	/^  unsigned char s[256];          \/* State variables *\/$/;"	m	struct:sqlite3PrngType	file:
sArg	sqlite3.c	/^  Token sArg;                \/* Complete text of a module argument *\/$/;"	m	struct:Parse	file:
sColMap	sqlite3.c	/^  struct sColMap {  \/* Mapping of columns in pFrom to columns in zTo *\/$/;"	s	struct:FKey	file:
sLastToken	sqlite3.c	/^  Token sLastToken;    \/* The last token parsed *\/$/;"	m	struct:Parse	file:
sNameToken	sqlite3.c	/^  Token sNameToken;    \/* Token with unqualified schema object name *\/$/;"	m	struct:Parse	file:
safety_level	sqlite3.c	/^  u8 safety_level;     \/* How aggressive at syncing data to disk *\/$/;"	m	struct:Db	file:
saveAllCursors	sqlite3.c	/^static int saveAllCursors(BtShared *pBt, Pgno iRoot, BtCursor *pExcept){$/;"	f	file:
saveCursorPosition	sqlite3.c	/^static int saveCursorPosition(BtCursor *pCur){$/;"	f	file:
savedNQueryLoop	sqlite3.c	/^  double savedNQueryLoop;        \/* pParse->nQueryLoop outside the WHERE loop *\/$/;"	m	struct:WhereInfo	file:
saved_cnt	sqlite3.c	/^static int saved_cnt;$/;"	v	file:
scalarFunc	sqlite3.c	/^static void scalarFunc($/;"	f	file:
scale	HomogeneousModelParams.cpp	/^void HMM_PP::HomogeneousModelParams::scale(const BaseReal n) {$/;"	f	class:HMM_PP::HomogeneousModelParams
scale	UnivariateCategoricalModelParams.cpp	/^void HMM_PP::UnivariateCategoricalModelParams::scale(const BaseReal n) {$/;"	f	class:HMM_PP::UnivariateCategoricalModelParams
scale	UnivariateQuantitativeModelParams.cpp	/^void HMM_PP::UnivariateQuantitativeModelParams::scale(const BaseReal n) {$/;"	f	class:HMM_PP::UnivariateQuantitativeModelParams
schemaIsValid	sqlite3.c	/^static void schemaIsValid(Parse *pParse){$/;"	f	file:
schema_cookie	sqlite3.c	/^  int schema_cookie;   \/* Database schema version number for this file *\/$/;"	m	struct:Schema	file:
scratchAllocOut	sqlite3.c	/^static int scratchAllocOut = 0;$/;"	v	file:
sectorSize	sqlite3.c	/^  DWORD sectorSize;       \/* Sector size of the device file is on *\/$/;"	m	struct:winFile	file:
sectorSize	sqlite3.c	/^  u32 sectorSize;             \/* Assumed sector size during rollback *\/$/;"	m	struct:Pager	file:
secureDelete	sqlite3.c	/^  u8 secureDelete;      \/* True if secure_delete is enabled *\/$/;"	m	struct:BtShared	file:
seekAndRead	sqlite3.c	/^static int seekAndRead(unixFile *id, sqlite3_int64 offset, void *pBuf, int cnt){$/;"	f	file:
seekAndWrite	sqlite3.c	/^static int seekAndWrite(unixFile *id, i64 offset, const void *pBuf, int cnt){$/;"	f	file:
seekResult	sqlite3.c	/^  int seekResult;$/;"	m	struct:VdbeCursor	file:
seekWinFile	sqlite3.c	/^static int seekWinFile(winFile *pFile, sqlite3_int64 iOffset){$/;"	f	file:
selFlags	sqlite3.c	/^  u16 selFlags;          \/* Various SF_* values *\/$/;"	m	struct:Select	file:
selectAddColumnTypeAndCollation	sqlite3.c	/^static void selectAddColumnTypeAndCollation($/;"	f	file:
selectAddSubqueryTypeInfo	sqlite3.c	/^static int selectAddSubqueryTypeInfo(Walker *pWalker, Select *p){$/;"	f	file:
selectColumnsFromExprList	sqlite3.c	/^static int selectColumnsFromExprList($/;"	f	file:
selectExpander	sqlite3.c	/^static int selectExpander(Walker *pWalker, Select *p){$/;"	f	file:
selectInnerLoop	sqlite3.c	/^static void selectInnerLoop($/;"	f	file:
selectNodeIsConstant	sqlite3.c	/^static int selectNodeIsConstant(Walker *pWalker, Select *NotUsed){$/;"	f	file:
selectOpName	sqlite3.c	/^static const char *selectOpName(int id){$/;"	f	file:
semCheckReservedLock	sqlite3.c	/^static int semCheckReservedLock(sqlite3_file *id, int *pResOut) {$/;"	f	file:
semClose	sqlite3.c	/^static int semClose(sqlite3_file *id) {$/;"	f	file:
semLock	sqlite3.c	/^static int semLock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
semUnlock	sqlite3.c	/^static int semUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
seqCount	sqlite3.c	/^  i64 seqCount;         \/* Sequence counter *\/$/;"	m	struct:VdbeCursor	file:
setChildPtrmaps	sqlite3.c	/^static int setChildPtrmaps(MemPage *pPage){$/;"	f	file:
setChildPtrmaps	sqlite3.c	50584;"	d	file:
setDataFitResult	ModelFromStream.cpp	/^void HMM_PP::ModelFromStream::setDataFitResult(InferredDataFit* idf, const uint ind) {$/;"	f	class:HMM_PP::ModelFromStream
setDataFitResult	ModelWithDB.cpp	/^void HMM_PP::ModelWithDB::setDataFitResult(InferredDataFit* idf, const uint ind) {$/;"	f	class:HMM_PP::ModelWithDB
setDatapoint	MultivariateCategoricalData.cpp	/^void HMM_PP::MultivariateCategoricalData::setDatapoint(const uint i, const vector<string>& t) {$/;"	f	class:HMM_PP::MultivariateCategoricalData
setDatapoint	MultivariateCategoricalData.cpp	/^void HMM_PP::MultivariateCategoricalData::setDatapoint(const uint i, const vector<uint>& t) {$/;"	f	class:HMM_PP::MultivariateCategoricalData
setDatapoint	MultivariateQuantitativeData.cpp	/^void HMM_PP::MultivariateQuantitativeData::setDatapoint(const uint i, const vector<double>& t) {$/;"	f	class:HMM_PP::MultivariateQuantitativeData
setDatapoint	UnivariateCategoricalData.cpp	/^void HMM_PP::UnivariateCategoricalData::setDatapoint(const uint i, const string& t) {$/;"	f	class:HMM_PP::UnivariateCategoricalData
setDateTimeToCurrent	sqlite3.c	/^static void setDateTimeToCurrent(sqlite3_context *context, DateTime *p){$/;"	f	file:
setDestPgsz	sqlite3.c	/^static int setDestPgsz(sqlite3_backup *p){$/;"	f	file:
setGaussianFromParams	UnivariateQuantitativeModelParams.cpp	/^void HMM_PP::UnivariateQuantitativeModelParams::setGaussianFromParams(const BaseRealVec& v, uint& vInd) {$/;"	f	class:HMM_PP::UnivariateQuantitativeModelParams
setJoinExpr	sqlite3.c	/^static void setJoinExpr(Expr *p, int iTable){$/;"	f	file:
setLikeOptFlag	sqlite3.c	/^static void setLikeOptFlag(sqlite3 *db, const char *zName, u8 flagVal){$/;"	f	file:
setMaster	sqlite3.c	/^  u8 setMaster;               \/* True if a m-j name has been written to jrnl *\/$/;"	m	struct:Pager	file:
setNumHiddenStates	ModelParams.cpp	/^void HMM_PP::ModelParams::HiddenStateParams::setNumHiddenStates(const uint k)  {$/;"	f	class:HMM_PP::ModelParams::HiddenStateParams
setNumObservations	MultivariateCategoricalData.cpp	/^void HMM_PP::MultivariateCategoricalData::setNumObservations(const uint nobs) {$/;"	f	class:HMM_PP::MultivariateCategoricalData
setNumObservations	MultivariateQuantitativeData.cpp	/^void HMM_PP::MultivariateQuantitativeData::setNumObservations(const uint nobs) {$/;"	f	class:HMM_PP::MultivariateQuantitativeData
setPendingFd	sqlite3.c	/^static void setPendingFd(unixFile *pFile){$/;"	f	file:
setResultStrOrError	sqlite3.c	/^static void setResultStrOrError($/;"	f	file:
setSectorSize	sqlite3.c	/^static void setSectorSize(Pager *pPager){$/;"	f	file:
setSharedCacheTableLock	sqlite3.c	/^static int setSharedCacheTableLock(Btree *p, Pgno iTable, u8 eLock){$/;"	f	file:
setSharedCacheTableLock	sqlite3.c	47600;"	d	file:
setStartingProbsAndNormalize	ModelParams.cpp	/^void HMM_PP::ModelParams::HiddenStateParams::setStartingProbsAndNormalize(const BaseRealVec& x) {$/;"	f	class:HMM_PP::ModelParams::HiddenStateParams
setTransMatFromParams	HomogeneousModelParams.cpp	/^void HMM_PP::HomogeneousModelParams::setTransMatFromParams(const BaseRealVec& v, uint& vInd) {$/;"	f	class:HMM_PP::HomogeneousModelParams
setVariableParams	UnivariateCategoricalModelParams.cpp	/^void HMM_PP::UnivariateCategoricalModelParams::setVariableParams(const BaseRealVec& v) {$/;"	f	class:HMM_PP::UnivariateCategoricalModelParams
setVariableParams	UnivariateQuantitativeModelParams.cpp	/^void HMM_PP::UnivariateQuantitativeModelParams::setVariableParams(const BaseRealVec& v) {$/;"	f	class:HMM_PP::UnivariateQuantitativeModelParams
set_authorizer	sqlite3.c	/^  int  (*set_authorizer)(sqlite3*,int(*)(void*,int,const char*,const char*,const char*,const char*),void*);$/;"	m	struct:sqlite3_api_routines	file:
set_auxdata	sqlite3.c	/^  void  (*set_auxdata)(sqlite3_context*,int,void*,void (*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
set_param	Simplex.cpp	/^void HMM_PP::Simplex::set_param(const uint n) {$/;"	f	class:HMM_PP::Simplex
set_start	Simplex.cpp	/^void HMM_PP::Simplex::set_start(const BaseRealVec& s) {$/;"	f	class:HMM_PP::Simplex
setupLookaside	sqlite3.c	/^static int setupLookaside(sqlite3 *db, void *pBuf, int sz, int cnt){$/;"	f	file:
sharable	sqlite3.c	/^  u8 sharable;       \/* True if we can share pBt with another db *\/$/;"	m	struct:Btree	file:
shared	sqlite3.c	/^  winceLock *shared;      \/* Global shared lock memory for the file  *\/$/;"	m	struct:winFile	file:
sharedByte	sqlite3.c	/^  unsigned long long sharedByte;  \/* for AFP simulated shared lock *\/$/;"	m	struct:unixInodeInfo	file:
sharedCacheEnabled	sqlite3.c	/^  int sharedCacheEnabled;           \/* true if shared-cache mode enabled *\/$/;"	m	struct:Sqlite3Config	file:
sharedLockByte	sqlite3.c	/^  short sharedLockByte;   \/* Randomly chosen byte used as a shared lock *\/$/;"	m	struct:winFile	file:
sharedMask	sqlite3.c	/^  u16 sharedMask;            \/* Mask of shared locks held *\/$/;"	m	struct:unixShm	file:
sharedMask	sqlite3.c	/^  u16 sharedMask;            \/* Mask of shared locks held *\/$/;"	m	struct:winShm	file:
sharedMask	sqlite3.c	/^  u32 sharedMask;            \/* Mask of shared locks held *\/$/;"	m	struct:os2ShmLink	file:
sharedMask	sqlite3.c	/^  u8 sharedMask;             \/* Mask of shared locks held *\/$/;"	m	struct:unixShmNode	file:
shmBaseName	sqlite3.c	/^  char shmBaseName[1];       \/* Name of the memory object !!! must last !!! *\/$/;"	m	struct:os2ShmNode	file:
simpleClose	sqlite3.c	/^static int simpleClose(sqlite3_tokenizer_cursor *pCursor){$/;"	f	file:
simpleCreate	sqlite3.c	/^static int simpleCreate($/;"	f	file:
simpleDelim	sqlite3.c	/^static int simpleDelim(simple_tokenizer *t, unsigned char c){$/;"	f	file:
simpleDestroy	sqlite3.c	/^static int simpleDestroy(sqlite3_tokenizer *pTokenizer){$/;"	f	file:
simpleNext	sqlite3.c	/^static int simpleNext($/;"	f	file:
simpleOpen	sqlite3.c	/^static int simpleOpen($/;"	f	file:
simpleTokenizerModule	sqlite3.c	/^static const sqlite3_tokenizer_module simpleTokenizerModule = {$/;"	v	file:
simple_tokenizer	sqlite3.c	/^typedef struct simple_tokenizer {$/;"	s	file:
simple_tokenizer	sqlite3.c	/^} simple_tokenizer;$/;"	t	typeref:struct:simple_tokenizer	file:
simple_tokenizer_cursor	sqlite3.c	/^typedef struct simple_tokenizer_cursor {$/;"	s	file:
simple_tokenizer_cursor	sqlite3.c	/^} simple_tokenizer_cursor;$/;"	t	typeref:struct:simple_tokenizer_cursor	file:
size4x	sqlite3.c	/^      u32 size4x;     \/* 4x the size of current chunk in Mem3Block elements *\/$/;"	m	struct:Mem3Block::__anon13::__anon14	file:
sjfd	sqlite3.c	/^  sqlite3_file *sjfd;         \/* File descriptor for sub-journal *\/$/;"	m	struct:Pager	file:
skipNext	sqlite3.c	/^  int skipNext;    \/* Prev() is noop if negative. Next() is noop if positive *\/$/;"	m	struct:BtCursor	file:
sleep	sqlite3.c	/^  int (*sleep)(int);$/;"	m	struct:sqlite3_api_routines	file:
snprintf	sqlite3.c	/^  char * (*snprintf)(int,char*,const char*,...);$/;"	m	struct:sqlite3_api_routines	file:
softHeapLimitEnforcer	sqlite3.c	/^static void softHeapLimitEnforcer($/;"	f	file:
soft_heap_limit	sqlite3.c	/^  void (*soft_heap_limit)(int);$/;"	m	struct:sqlite3_api_routines	file:
soft_heap_limit64	sqlite3.c	/^  sqlite3_int64 (*soft_heap_limit64)(sqlite3_int64);$/;"	m	struct:sqlite3_api_routines	file:
sortOrder	sqlite3.c	/^    u8 sortOrder;          \/* 1 for DESC or 0 for ASC *\/$/;"	m	struct:ExprList::ExprList_item	file:
sortingIdx	sqlite3.c	/^  int sortingIdx;         \/* Cursor number of the sorting index *\/$/;"	m	struct:AggInfo	file:
soundexFunc	sqlite3.c	/^static void soundexFunc($/;"	f	file:
sourceid	sqlite3.c	/^  const char *(*sourceid)(void);$/;"	m	struct:sqlite3_api_routines	file:
sourceidFunc	sqlite3.c	/^static void sourceidFunc($/;"	f	file:
spanBinaryExpr	sqlite3.c	/^  static void spanBinaryExpr($/;"	f	file:
spanExpr	sqlite3.c	/^  static void spanExpr(ExprSpan *pOut, Parse *pParse, int op, Token *pValue){$/;"	f	file:
spanSet	sqlite3.c	/^  static void spanSet(ExprSpan *pOut, Token *pStart, Token *pEnd){$/;"	f	file:
spanUnaryPostfix	sqlite3.c	/^  static void spanUnaryPostfix($/;"	f	file:
spanUnaryPrefix	sqlite3.c	/^  static void spanUnaryPrefix($/;"	f	file:
splitNodeGuttman	sqlite3.c	/^static int splitNodeGuttman($/;"	f	file:
splitNodeStartree	sqlite3.c	/^static int splitNodeStartree($/;"	f	file:
sql	sqlite3.c	/^  const char *(*sql)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
sqlite3	sqlite3.c	/^struct sqlite3 {$/;"	s	file:
sqlite3	sqlite3.c	/^typedef struct sqlite3 sqlite3;$/;"	t	typeref:struct:sqlite3	file:
sqlite3AbsInt32	sqlite3.c	/^SQLITE_PRIVATE int sqlite3AbsInt32(int x){$/;"	f
sqlite3AddCheckConstraint	sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddCheckConstraint($/;"	f
sqlite3AddCollateType	sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddCollateType(Parse *pParse, Token *pToken){$/;"	f
sqlite3AddColumn	sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddColumn(Parse *pParse, Token *pName){$/;"	f
sqlite3AddColumnType	sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddColumnType(Parse *pParse, Token *pType){$/;"	f
sqlite3AddDefaultValue	sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddDefaultValue(Parse *pParse, ExprSpan *pSpan){$/;"	f
sqlite3AddInt64	sqlite3.c	/^SQLITE_PRIVATE int sqlite3AddInt64(i64 *pA, i64 iB){$/;"	f
sqlite3AddNotNull	sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddNotNull(Parse *pParse, int onError){$/;"	f
sqlite3AddPrimaryKey	sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddPrimaryKey($/;"	f
sqlite3AffinityType	sqlite3.c	/^SQLITE_PRIVATE char sqlite3AffinityType(const char *zIn){$/;"	f
sqlite3AlterBeginAddColumn	sqlite3.c	/^SQLITE_PRIVATE void sqlite3AlterBeginAddColumn(Parse *pParse, SrcList *pSrc){$/;"	f
sqlite3AlterFinishAddColumn	sqlite3.c	/^SQLITE_PRIVATE void sqlite3AlterFinishAddColumn(Parse *pParse, Token *pColDef){$/;"	f
sqlite3AlterFunctions	sqlite3.c	/^SQLITE_PRIVATE void sqlite3AlterFunctions(void){$/;"	f
sqlite3AlterRenameTable	sqlite3.c	/^SQLITE_PRIVATE void sqlite3AlterRenameTable($/;"	f
sqlite3AnalysisLoad	sqlite3.c	/^SQLITE_PRIVATE int sqlite3AnalysisLoad(sqlite3 *db, int iDb){$/;"	f
sqlite3Analyze	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Analyze(Parse *pParse, Token *pName1, Token *pName2){$/;"	f
sqlite3ApiExit	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ApiExit(sqlite3* db, int rc){$/;"	f
sqlite3Apis	sqlite3.c	/^static const sqlite3_api_routines sqlite3Apis = { 0 };$/;"	v	file:
sqlite3Apis	sqlite3.c	/^static const sqlite3_api_routines sqlite3Apis = {$/;"	v	file:
sqlite3ArrayAllocate	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3ArrayAllocate($/;"	f
sqlite3AtoF	sqlite3.c	/^SQLITE_PRIVATE int sqlite3AtoF(const char *z, double *pResult, int length, u8 enc){$/;"	f
sqlite3Atoi	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Atoi(const char *z){$/;"	f
sqlite3Atoi64	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Atoi64(const char *zNum, i64 *pNum, int length, u8 enc){$/;"	f
sqlite3Attach	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Attach(Parse *pParse, Expr *p, Expr *pDbname, Expr *pKey){$/;"	f
sqlite3AuthCheck	sqlite3.c	/^SQLITE_PRIVATE int sqlite3AuthCheck($/;"	f
sqlite3AuthCheck	sqlite3.c	11471;"	d	file:
sqlite3AuthContextPop	sqlite3.c	/^SQLITE_PRIVATE void sqlite3AuthContextPop(AuthContext *pContext){$/;"	f
sqlite3AuthContextPop	sqlite3.c	11473;"	d	file:
sqlite3AuthContextPush	sqlite3.c	/^SQLITE_PRIVATE void sqlite3AuthContextPush($/;"	f
sqlite3AuthContextPush	sqlite3.c	11472;"	d	file:
sqlite3AuthRead	sqlite3.c	/^SQLITE_PRIVATE void sqlite3AuthRead($/;"	f
sqlite3AuthRead	sqlite3.c	11470;"	d	file:
sqlite3AuthReadCol	sqlite3.c	/^SQLITE_PRIVATE int sqlite3AuthReadCol($/;"	f
sqlite3AutoExtList	sqlite3.c	/^static SQLITE_WSD struct sqlite3AutoExtList {$/;"	s	file:
sqlite3AutoExtList	sqlite3.c	/^typedef struct sqlite3AutoExtList sqlite3AutoExtList;$/;"	t	typeref:struct:sqlite3AutoExtList	file:
sqlite3AutoLoadExtensions	sqlite3.c	/^SQLITE_PRIVATE void sqlite3AutoLoadExtensions(sqlite3 *db){$/;"	f
sqlite3Autoext	sqlite3.c	/^} sqlite3Autoext = { 0, 0 };$/;"	v	typeref:struct:sqlite3AutoExtList	file:
sqlite3AutoincrementBegin	sqlite3.c	/^SQLITE_PRIVATE void sqlite3AutoincrementBegin(Parse *pParse){$/;"	f
sqlite3AutoincrementBegin	sqlite3.c	11313;"	d	file:
sqlite3AutoincrementEnd	sqlite3.c	/^SQLITE_PRIVATE void sqlite3AutoincrementEnd(Parse *pParse){$/;"	f
sqlite3AutoincrementEnd	sqlite3.c	11314;"	d	file:
sqlite3BackupRestart	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BackupRestart(sqlite3_backup *pBackup){$/;"	f
sqlite3BackupUpdate	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BackupUpdate(sqlite3_backup *pBackup, Pgno iPage, const u8 *aData){$/;"	f
sqlite3BeginBenignMalloc	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BeginBenignMalloc(void){$/;"	f
sqlite3BeginBenignMalloc	sqlite3.c	11742;"	d	file:
sqlite3BeginParse	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BeginParse(Parse *pParse, int explainFlag){$/;"	f
sqlite3BeginTransaction	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BeginTransaction(Parse *pParse, int type){$/;"	f
sqlite3BeginTrigger	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BeginTrigger($/;"	f
sqlite3BeginWriteOperation	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BeginWriteOperation(Parse *pParse, int setStatement, int iDb){$/;"	f
sqlite3BenignMallocHooks	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BenignMallocHooks($/;"	f
sqlite3BinaryCompareCollSeq	sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3BinaryCompareCollSeq($/;"	f
sqlite3BitvecBuiltinTest	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BitvecBuiltinTest(int sz, int *aOp){$/;"	f
sqlite3BitvecClear	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BitvecClear(Bitvec *p, u32 i, void *pBuf){$/;"	f
sqlite3BitvecCreate	sqlite3.c	/^SQLITE_PRIVATE Bitvec *sqlite3BitvecCreate(u32 iSize){$/;"	f
sqlite3BitvecDestroy	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BitvecDestroy(Bitvec *p){$/;"	f
sqlite3BitvecSet	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BitvecSet(Bitvec *p, u32 i){$/;"	f
sqlite3BitvecSize	sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3BitvecSize(Bitvec *p){$/;"	f
sqlite3BitvecTest	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BitvecTest(Bitvec *p, u32 i){$/;"	f
sqlite3BlockedList	sqlite3.c	/^static sqlite3 *SQLITE_WSD sqlite3BlockedList = 0;$/;"	v	file:
sqlite3BtreeBeginStmt	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeBeginStmt(Btree *p, int iStatement){$/;"	f
sqlite3BtreeBeginTrans	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeBeginTrans(Btree *p, int wrflag){$/;"	f
sqlite3BtreeCacheOverflow	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeCacheOverflow(BtCursor *pCur){$/;"	f
sqlite3BtreeCheckpoint	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCheckpoint(Btree *p, int eMode, int *pnLog, int *pnCkpt){$/;"	f
sqlite3BtreeClearCursor	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeClearCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeClearTable	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeClearTable(Btree *p, int iTable, int *pnChange){$/;"	f
sqlite3BtreeClose	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeClose(Btree *p){$/;"	f
sqlite3BtreeCloseCursor	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCloseCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeCommit	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCommit(Btree *p){$/;"	f
sqlite3BtreeCommitPhaseOne	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCommitPhaseOne(Btree *p, const char *zMaster){$/;"	f
sqlite3BtreeCommitPhaseTwo	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCommitPhaseTwo(Btree *p, int bCleanup){$/;"	f
sqlite3BtreeCopyFile	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCopyFile(Btree *pTo, Btree *pFrom){$/;"	f
sqlite3BtreeCount	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCount(BtCursor *pCur, i64 *pnEntry){$/;"	f
sqlite3BtreeCreateTable	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCreateTable(Btree *p, int *piTable, int flags){$/;"	f
sqlite3BtreeCursor	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursor($/;"	f
sqlite3BtreeCursorHasMoved	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursorHasMoved(BtCursor *pCur, int *pHasMoved){$/;"	f
sqlite3BtreeCursorIsValid	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursorIsValid(BtCursor *pCur){$/;"	f
sqlite3BtreeCursorSize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursorSize(void){$/;"	f
sqlite3BtreeCursorZero	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeCursorZero(BtCursor *p){$/;"	f
sqlite3BtreeData	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeData(BtCursor *pCur, u32 offset, u32 amt, void *pBuf){$/;"	f
sqlite3BtreeDataFetch	sqlite3.c	/^SQLITE_PRIVATE const void *sqlite3BtreeDataFetch(BtCursor *pCur, int *pAmt){$/;"	f
sqlite3BtreeDataSize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeDataSize(BtCursor *pCur, u32 *pSize){$/;"	f
sqlite3BtreeDelete	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeDelete(BtCursor *pCur){$/;"	f
sqlite3BtreeDropTable	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeDropTable(Btree *p, int iTable, int *piMoved){$/;"	f
sqlite3BtreeEnter	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeEnter(Btree *p){$/;"	f
sqlite3BtreeEnter	sqlite3.c	8094;"	d	file:
sqlite3BtreeEnterAll	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeEnterAll(sqlite3 *db){$/;"	f
sqlite3BtreeEnterAll	sqlite3.c	8095;"	d	file:
sqlite3BtreeEnterCursor	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeEnterCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeEnterCursor	sqlite3.c	8114;"	d	file:
sqlite3BtreeEof	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeEof(BtCursor *pCur){$/;"	f
sqlite3BtreeFirst	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeFirst(BtCursor *pCur, int *pRes){$/;"	f
sqlite3BtreeGetAutoVacuum	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeGetAutoVacuum(Btree *p){$/;"	f
sqlite3BtreeGetCachedRowid	sqlite3.c	/^SQLITE_PRIVATE sqlite3_int64 sqlite3BtreeGetCachedRowid(BtCursor *pCur){$/;"	f
sqlite3BtreeGetFilename	sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3BtreeGetFilename(Btree *p){$/;"	f
sqlite3BtreeGetJournalname	sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3BtreeGetJournalname(Btree *p){$/;"	f
sqlite3BtreeGetMeta	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeGetMeta(Btree *p, int idx, u32 *pMeta){$/;"	f
sqlite3BtreeGetPageSize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeGetPageSize(Btree *p){$/;"	f
sqlite3BtreeGetReserve	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeGetReserve(Btree *p){$/;"	f
sqlite3BtreeHoldsAllMutexes	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeHoldsAllMutexes(sqlite3 *db){$/;"	f
sqlite3BtreeHoldsAllMutexes	sqlite3.c	8119;"	d	file:
sqlite3BtreeHoldsMutex	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeHoldsMutex(Btree *p){$/;"	f
sqlite3BtreeHoldsMutex	sqlite3.c	8118;"	d	file:
sqlite3BtreeIncrVacuum	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeIncrVacuum(Btree *p){$/;"	f
sqlite3BtreeInsert	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeInsert($/;"	f
sqlite3BtreeIntegrityCheck	sqlite3.c	/^SQLITE_PRIVATE char *sqlite3BtreeIntegrityCheck($/;"	f
sqlite3BtreeIsInBackup	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeIsInBackup(Btree *p){$/;"	f
sqlite3BtreeIsInReadTrans	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeIsInReadTrans(Btree *p){$/;"	f
sqlite3BtreeIsInTrans	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeIsInTrans(Btree *p){$/;"	f
sqlite3BtreeKey	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeKey(BtCursor *pCur, u32 offset, u32 amt, void *pBuf){$/;"	f
sqlite3BtreeKeyFetch	sqlite3.c	/^SQLITE_PRIVATE const void *sqlite3BtreeKeyFetch(BtCursor *pCur, int *pAmt){$/;"	f
sqlite3BtreeKeySize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeKeySize(BtCursor *pCur, i64 *pSize){$/;"	f
sqlite3BtreeLast	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeLast(BtCursor *pCur, int *pRes){$/;"	f
sqlite3BtreeLastPage	sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3BtreeLastPage(Btree *p){$/;"	f
sqlite3BtreeLeave	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeLeave(Btree *p){$/;"	f
sqlite3BtreeLeave	sqlite3.c	8113;"	d	file:
sqlite3BtreeLeaveAll	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeLeaveAll(sqlite3 *db){$/;"	f
sqlite3BtreeLeaveAll	sqlite3.c	8116;"	d	file:
sqlite3BtreeLeaveCursor	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeLeaveCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeLeaveCursor	sqlite3.c	8115;"	d	file:
sqlite3BtreeLockTable	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeLockTable(Btree *p, int iTab, u8 isWriteLock){$/;"	f
sqlite3BtreeMaxPageCount	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeMaxPageCount(Btree *p, int mxPage){$/;"	f
sqlite3BtreeMovetoUnpacked	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeMovetoUnpacked($/;"	f
sqlite3BtreeNext	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeNext(BtCursor *pCur, int *pRes){$/;"	f
sqlite3BtreeOpen	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeOpen($/;"	f
sqlite3BtreePager	sqlite3.c	/^SQLITE_PRIVATE Pager *sqlite3BtreePager(Btree *p){$/;"	f
sqlite3BtreePrevious	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreePrevious(BtCursor *pCur, int *pRes){$/;"	f
sqlite3BtreePutData	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreePutData(BtCursor *pCsr, u32 offset, u32 amt, void *z){$/;"	f
sqlite3BtreeRollback	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeRollback(Btree *p){$/;"	f
sqlite3BtreeSavepoint	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSavepoint(Btree *p, int op, int iSavepoint){$/;"	f
sqlite3BtreeSchema	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3BtreeSchema(Btree *p, int nBytes, void(*xFree)(void *)){$/;"	f
sqlite3BtreeSchemaLocked	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSchemaLocked(Btree *p){$/;"	f
sqlite3BtreeSecureDelete	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSecureDelete(Btree *p, int newFlag){$/;"	f
sqlite3BtreeSetAutoVacuum	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetAutoVacuum(Btree *p, int autoVacuum){$/;"	f
sqlite3BtreeSetCacheSize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetCacheSize(Btree *p, int mxPage){$/;"	f
sqlite3BtreeSetCachedRowid	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeSetCachedRowid(BtCursor *pCur, sqlite3_int64 iRowid){$/;"	f
sqlite3BtreeSetPageSize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetPageSize(Btree *p, int pageSize, int nReserve, int iFix){$/;"	f
sqlite3BtreeSetSafetyLevel	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetSafetyLevel($/;"	f
sqlite3BtreeSetVersion	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetVersion(Btree *pBtree, int iVersion){$/;"	f
sqlite3BtreeSharable	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSharable(Btree *p){$/;"	f
sqlite3BtreeSharable	sqlite3.c	8112;"	d	file:
sqlite3BtreeSyncDisabled	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSyncDisabled(Btree *p){$/;"	f
sqlite3BtreeTripAllCursors	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeTripAllCursors(Btree *pBtree, int errCode){$/;"	f
sqlite3BtreeUpdateMeta	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeUpdateMeta(Btree *p, int idx, u32 iMeta){$/;"	f
sqlite3CantopenError	sqlite3.c	/^SQLITE_PRIVATE int sqlite3CantopenError(int lineno){$/;"	f
sqlite3ChangeCookie	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ChangeCookie(Parse *pParse, int iDb){$/;"	f
sqlite3CheckCollSeq	sqlite3.c	/^SQLITE_PRIVATE int sqlite3CheckCollSeq(Parse *pParse, CollSeq *pColl){$/;"	f
sqlite3CheckObjectName	sqlite3.c	/^SQLITE_PRIVATE int sqlite3CheckObjectName(Parse *pParse, const char *zName){$/;"	f
sqlite3Checkpoint	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Checkpoint(sqlite3 *db, int iDb, int eMode, int *pnLog, int *pnCkpt){$/;"	f
sqlite3CloseExtensions	sqlite3.c	/^SQLITE_PRIVATE void sqlite3CloseExtensions(sqlite3 *db){$/;"	f
sqlite3CloseExtensions	sqlite3.c	11643;"	d	file:
sqlite3CloseSavepoints	sqlite3.c	/^SQLITE_PRIVATE void sqlite3CloseSavepoints(sqlite3 *db){$/;"	f
sqlite3CodeRowTrigger	sqlite3.c	/^SQLITE_PRIVATE void sqlite3CodeRowTrigger($/;"	f
sqlite3CodeRowTrigger	sqlite3.c	11453;"	d	file:
sqlite3CodeRowTriggerDirect	sqlite3.c	/^SQLITE_PRIVATE void sqlite3CodeRowTriggerDirect($/;"	f
sqlite3CodeRowTriggerDirect	sqlite3.c	11454;"	d	file:
sqlite3CodeSubselect	sqlite3.c	/^SQLITE_PRIVATE int sqlite3CodeSubselect($/;"	f
sqlite3CodeVerifyNamedSchema	sqlite3.c	/^SQLITE_PRIVATE void sqlite3CodeVerifyNamedSchema(Parse *pParse, const char *zDb){$/;"	f
sqlite3CodeVerifySchema	sqlite3.c	/^SQLITE_PRIVATE void sqlite3CodeVerifySchema(Parse *pParse, int iDb){$/;"	f
sqlite3ColumnDefault	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ColumnDefault(Vdbe *v, Table *pTab, int i, int iReg){$/;"	f
sqlite3CommitInternalChanges	sqlite3.c	/^SQLITE_PRIVATE void sqlite3CommitInternalChanges(sqlite3 *db){$/;"	f
sqlite3CommitTransaction	sqlite3.c	/^SQLITE_PRIVATE void sqlite3CommitTransaction(Parse *pParse){$/;"	f
sqlite3CompareAffinity	sqlite3.c	/^SQLITE_PRIVATE char sqlite3CompareAffinity(Expr *pExpr, char aff2){$/;"	f
sqlite3CompleteInsertion	sqlite3.c	/^SQLITE_PRIVATE void sqlite3CompleteInsertion($/;"	f
sqlite3Config	sqlite3.c	/^SQLITE_PRIVATE SQLITE_WSD struct Sqlite3Config sqlite3Config = {$/;"	v	typeref:struct:Sqlite3Config
sqlite3Config	sqlite3.c	/^SQLITE_PRIVATE SQLITE_WSD struct Sqlite3Config sqlite3Config;$/;"	v	typeref:struct:Sqlite3Config
sqlite3ConnectionBlocked	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ConnectionBlocked(sqlite3 *db, sqlite3 *pBlocker){$/;"	f
sqlite3ConnectionBlocked	sqlite3.c	11781;"	d	file:
sqlite3ConnectionClosed	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ConnectionClosed(sqlite3 *db){$/;"	f
sqlite3ConnectionClosed	sqlite3.c	11783;"	d	file:
sqlite3ConnectionUnlocked	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ConnectionUnlocked(sqlite3 *db){$/;"	f
sqlite3ConnectionUnlocked	sqlite3.c	11782;"	d	file:
sqlite3CorruptError	sqlite3.c	/^SQLITE_PRIVATE int sqlite3CorruptError(int lineno){$/;"	f
sqlite3Coverage	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Coverage(int x){$/;"	f
sqlite3CreateColumnExpr	sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3CreateColumnExpr(sqlite3 *db, SrcList *pSrc, int iSrc, int iCol){$/;"	f
sqlite3CreateForeignKey	sqlite3.c	/^SQLITE_PRIVATE void sqlite3CreateForeignKey($/;"	f
sqlite3CreateFunc	sqlite3.c	/^SQLITE_PRIVATE int sqlite3CreateFunc($/;"	f
sqlite3CreateIndex	sqlite3.c	/^SQLITE_PRIVATE Index *sqlite3CreateIndex($/;"	f
sqlite3CreateView	sqlite3.c	/^SQLITE_PRIVATE void sqlite3CreateView($/;"	f
sqlite3CtypeMap	sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3CtypeMap[256] = {$/;"	v
sqlite3CtypeMap	sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3CtypeMap[];$/;"	v
sqlite3DbFree	sqlite3.c	/^SQLITE_PRIVATE void sqlite3DbFree(sqlite3 *db, void *p){$/;"	f
sqlite3DbMallocRaw	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3DbMallocRaw(sqlite3 *db, int n){$/;"	f
sqlite3DbMallocSize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3DbMallocSize(sqlite3 *db, void *p){$/;"	f
sqlite3DbMallocZero	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3DbMallocZero(sqlite3 *db, int n){$/;"	f
sqlite3DbRealloc	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3DbRealloc(sqlite3 *db, void *p, int n){$/;"	f
sqlite3DbReallocOrFree	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3DbReallocOrFree(sqlite3 *db, void *p, int n){$/;"	f
sqlite3DbStrDup	sqlite3.c	/^SQLITE_PRIVATE char *sqlite3DbStrDup(sqlite3 *db, const char *z){$/;"	f
sqlite3DbStrNDup	sqlite3.c	/^SQLITE_PRIVATE char *sqlite3DbStrNDup(sqlite3 *db, const char *z, int n){$/;"	f
sqlite3DebugPrintf	sqlite3.c	/^SQLITE_PRIVATE void sqlite3DebugPrintf(const char *zFormat, ...){$/;"	f
sqlite3DefaultMutex	sqlite3.c	/^SQLITE_PRIVATE sqlite3_mutex_methods const *sqlite3DefaultMutex(void){$/;"	f
sqlite3DefaultRowEst	sqlite3.c	/^SQLITE_PRIVATE void sqlite3DefaultRowEst(Index *pIdx){$/;"	f
sqlite3DeferForeignKey	sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeferForeignKey(Parse *pParse, int isDeferred){$/;"	f
sqlite3DeleteFrom	sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeleteFrom($/;"	f
sqlite3DeleteIndexSamples	sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeleteIndexSamples(sqlite3 *db, Index *pIdx){$/;"	f
sqlite3DeleteTable	sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeleteTable(sqlite3 *db, Table *pTable){$/;"	f
sqlite3DeleteTrigger	sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeleteTrigger(sqlite3 *db, Trigger *pTrigger){$/;"	f
sqlite3DeleteTrigger	sqlite3.c	11450;"	d	file:
sqlite3DeleteTriggerStep	sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeleteTriggerStep(sqlite3 *db, TriggerStep *pTriggerStep){$/;"	f
sqlite3Dequote	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Dequote(char *z){$/;"	f
sqlite3Detach	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Detach(Parse *pParse, Expr *pDbname){$/;"	f
sqlite3DropIndex	sqlite3.c	/^SQLITE_PRIVATE void sqlite3DropIndex(Parse *pParse, SrcList *pName, int ifExists){$/;"	f
sqlite3DropTable	sqlite3.c	/^SQLITE_PRIVATE void sqlite3DropTable(Parse *pParse, SrcList *pName, int isView, int noErr){$/;"	f
sqlite3DropTrigger	sqlite3.c	/^SQLITE_PRIVATE void sqlite3DropTrigger(Parse *pParse, SrcList *pName, int noErr){$/;"	f
sqlite3DropTriggerPtr	sqlite3.c	/^SQLITE_PRIVATE void sqlite3DropTriggerPtr(Parse *pParse, Trigger *pTrigger){$/;"	f
sqlite3DropTriggerPtr	sqlite3.c	11451;"	d	file:
sqlite3EndBenignMalloc	sqlite3.c	/^SQLITE_PRIVATE void sqlite3EndBenignMalloc(void){$/;"	f
sqlite3EndBenignMalloc	sqlite3.c	11743;"	d	file:
sqlite3EndTable	sqlite3.c	/^SQLITE_PRIVATE void sqlite3EndTable($/;"	f
sqlite3ErrStr	sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3ErrStr(int rc){$/;"	f
sqlite3Error	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Error(sqlite3 *db, int err_code, const char *zFormat, ...){$/;"	f
sqlite3ErrorMsg	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ErrorMsg(Parse *pParse, const char *zFormat, ...){$/;"	f
sqlite3ExpirePreparedStatements	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExpirePreparedStatements(sqlite3 *db){$/;"	f
sqlite3Expr	sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3Expr($/;"	f
sqlite3ExprAffinity	sqlite3.c	/^SQLITE_PRIVATE char sqlite3ExprAffinity(Expr *pExpr){$/;"	f
sqlite3ExprAlloc	sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprAlloc($/;"	f
sqlite3ExprAnalyzeAggList	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprAnalyzeAggList(NameContext *pNC, ExprList *pList){$/;"	f
sqlite3ExprAnalyzeAggregates	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprAnalyzeAggregates(NameContext *pNC, Expr *pExpr){$/;"	f
sqlite3ExprAnd	sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprAnd(sqlite3 *db, Expr *pLeft, Expr *pRight){$/;"	f
sqlite3ExprAssignVarNumber	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprAssignVarNumber(Parse *pParse, Expr *pExpr){$/;"	f
sqlite3ExprAttachSubtrees	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprAttachSubtrees($/;"	f
sqlite3ExprCacheAffinityChange	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCacheAffinityChange(Parse *pParse, int iStart, int iCount){$/;"	f
sqlite3ExprCacheClear	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCacheClear(Parse *pParse){$/;"	f
sqlite3ExprCachePinRegister	sqlite3.c	/^static void sqlite3ExprCachePinRegister(Parse *pParse, int iReg){$/;"	f	file:
sqlite3ExprCachePop	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCachePop(Parse *pParse, int N){$/;"	f
sqlite3ExprCachePush	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCachePush(Parse *pParse){$/;"	f
sqlite3ExprCacheRemove	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCacheRemove(Parse *pParse, int iReg, int nReg){$/;"	f
sqlite3ExprCacheStore	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCacheStore(Parse *pParse, int iTab, int iCol, int iReg){$/;"	f
sqlite3ExprCanBeNull	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCanBeNull(const Expr *p){$/;"	f
sqlite3ExprCheckHeight	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCheckHeight(Parse *pParse, int nHeight){$/;"	f
sqlite3ExprCheckHeight	sqlite3.c	11770;"	d	file:
sqlite3ExprCode	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCode(Parse *pParse, Expr *pExpr, int target){$/;"	f
sqlite3ExprCodeAndCache	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCodeAndCache(Parse *pParse, Expr *pExpr, int target){$/;"	f
sqlite3ExprCodeConstants	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeConstants(Parse *pParse, Expr *pExpr){$/;"	f
sqlite3ExprCodeCopy	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeCopy(Parse *pParse, int iFrom, int iTo, int nReg){$/;"	f
sqlite3ExprCodeExprList	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCodeExprList($/;"	f
sqlite3ExprCodeGetColumn	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCodeGetColumn($/;"	f
sqlite3ExprCodeGetColumnOfTable	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeGetColumnOfTable($/;"	f
sqlite3ExprCodeIN	sqlite3.c	/^static void sqlite3ExprCodeIN($/;"	f	file:
sqlite3ExprCodeIsNullJump	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeIsNullJump($/;"	f
sqlite3ExprCodeMove	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeMove(Parse *pParse, int iFrom, int iTo, int nReg){$/;"	f
sqlite3ExprCodeTarget	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCodeTarget(Parse *pParse, Expr *pExpr, int target){$/;"	f
sqlite3ExprCodeTemp	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCodeTemp(Parse *pParse, Expr *pExpr, int *pReg){$/;"	f
sqlite3ExprCollSeq	sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3ExprCollSeq(Parse *pParse, Expr *pExpr){$/;"	f
sqlite3ExprCompare	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCompare(Expr *pA, Expr *pB){$/;"	f
sqlite3ExprDelete	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprDelete(sqlite3 *db, Expr *p){$/;"	f
sqlite3ExprDup	sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprDup(sqlite3 *db, Expr *p, int flags){$/;"	f
sqlite3ExprFunction	sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprFunction(Parse *pParse, ExprList *pList, Token *pToken){$/;"	f
sqlite3ExprIfFalse	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprIfFalse(Parse *pParse, Expr *pExpr, int dest, int jumpIfNull){$/;"	f
sqlite3ExprIfTrue	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprIfTrue(Parse *pParse, Expr *pExpr, int dest, int jumpIfNull){$/;"	f
sqlite3ExprIsConstant	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprIsConstant(Expr *p){$/;"	f
sqlite3ExprIsConstantNotJoin	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprIsConstantNotJoin(Expr *p){$/;"	f
sqlite3ExprIsConstantOrFunction	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprIsConstantOrFunction(Expr *p){$/;"	f
sqlite3ExprIsInteger	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprIsInteger(Expr *p, int *pValue){$/;"	f
sqlite3ExprListAppend	sqlite3.c	/^SQLITE_PRIVATE ExprList *sqlite3ExprListAppend($/;"	f
sqlite3ExprListCheckLength	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprListCheckLength($/;"	f
sqlite3ExprListCompare	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprListCompare(ExprList *pA, ExprList *pB){$/;"	f
sqlite3ExprListDelete	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprListDelete(sqlite3 *db, ExprList *pList){$/;"	f
sqlite3ExprListDup	sqlite3.c	/^SQLITE_PRIVATE ExprList *sqlite3ExprListDup(sqlite3 *db, ExprList *p, int flags){$/;"	f
sqlite3ExprListSetName	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprListSetName($/;"	f
sqlite3ExprListSetSpan	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprListSetSpan($/;"	f
sqlite3ExprNeedsNoAffinityChange	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprNeedsNoAffinityChange(const Expr *p, char aff){$/;"	f
sqlite3ExprSetColl	sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprSetColl(Expr *pExpr, CollSeq *pColl){$/;"	f
sqlite3ExprSetCollByToken	sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprSetCollByToken(Parse *pParse, Expr *pExpr, Token *pCollName){$/;"	f
sqlite3ExprSetHeight	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprSetHeight(Parse *pParse, Expr *p){$/;"	f
sqlite3ExprSetHeight	sqlite3.c	11768;"	d	file:
sqlite3FileSuffix3	sqlite3.c	/^SQLITE_PRIVATE void sqlite3FileSuffix3(const char *zBaseFilename, char *z){$/;"	f
sqlite3FileSuffix3	sqlite3.c	11553;"	d	file:
sqlite3FindCollSeq	sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3FindCollSeq($/;"	f
sqlite3FindDb	sqlite3.c	/^SQLITE_PRIVATE int sqlite3FindDb(sqlite3 *db, Token *pName){$/;"	f
sqlite3FindDbName	sqlite3.c	/^SQLITE_PRIVATE int sqlite3FindDbName(sqlite3 *db, const char *zName){$/;"	f
sqlite3FindFunction	sqlite3.c	/^SQLITE_PRIVATE FuncDef *sqlite3FindFunction($/;"	f
sqlite3FindInIndex	sqlite3.c	/^SQLITE_PRIVATE int sqlite3FindInIndex(Parse *pParse, Expr *pX, int *prNotFound){$/;"	f
sqlite3FindIndex	sqlite3.c	/^SQLITE_PRIVATE Index *sqlite3FindIndex(sqlite3 *db, const char *zName, const char *zDb){$/;"	f
sqlite3FindTable	sqlite3.c	/^SQLITE_PRIVATE Table *sqlite3FindTable(sqlite3 *db, const char *zName, const char *zDatabase){$/;"	f
sqlite3FinishCoding	sqlite3.c	/^SQLITE_PRIVATE void sqlite3FinishCoding(Parse *pParse){$/;"	f
sqlite3FinishTrigger	sqlite3.c	/^SQLITE_PRIVATE void sqlite3FinishTrigger($/;"	f
sqlite3FixExpr	sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixExpr($/;"	f
sqlite3FixExprList	sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixExprList($/;"	f
sqlite3FixInit	sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixInit($/;"	f
sqlite3FixSelect	sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixSelect($/;"	f
sqlite3FixSrcList	sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixSrcList($/;"	f
sqlite3FixTriggerStep	sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixTriggerStep($/;"	f
sqlite3FkActions	sqlite3.c	/^SQLITE_PRIVATE void sqlite3FkActions($/;"	f
sqlite3FkActions	sqlite3.c	11714;"	d	file:
sqlite3FkCheck	sqlite3.c	/^SQLITE_PRIVATE void sqlite3FkCheck($/;"	f
sqlite3FkCheck	sqlite3.c	11715;"	d	file:
sqlite3FkDelete	sqlite3.c	/^SQLITE_PRIVATE void sqlite3FkDelete(sqlite3 *db, Table *pTab){$/;"	f
sqlite3FkDelete	sqlite3.c	11723;"	d	file:
sqlite3FkDropTable	sqlite3.c	/^SQLITE_PRIVATE void sqlite3FkDropTable(Parse *pParse, SrcList *pName, Table *pTab){$/;"	f
sqlite3FkDropTable	sqlite3.c	11716;"	d	file:
sqlite3FkOldmask	sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3FkOldmask($/;"	f
sqlite3FkOldmask	sqlite3.c	11717;"	d	file:
sqlite3FkReferences	sqlite3.c	/^SQLITE_PRIVATE FKey *sqlite3FkReferences(Table *pTab){$/;"	f
sqlite3FkRequired	sqlite3.c	/^SQLITE_PRIVATE int sqlite3FkRequired($/;"	f
sqlite3FkRequired	sqlite3.c	11718;"	d	file:
sqlite3Fts3AllSegdirs	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3AllSegdirs($/;"	f
sqlite3Fts3CacheDeferredDoclists	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3CacheDeferredDoclists(Fts3Cursor *pCsr){$/;"	f
sqlite3Fts3DeferToken	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3DeferToken($/;"	f
sqlite3Fts3DeferredTokenList	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3DeferredTokenList($/;"	f
sqlite3Fts3Dequote	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3Dequote(char *z){$/;"	f
sqlite3Fts3DoclistPrev	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3DoclistPrev($/;"	f
sqlite3Fts3EvalNext	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3EvalNext(Fts3Cursor *pCsr){$/;"	f
sqlite3Fts3EvalPhraseCleanup	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3EvalPhraseCleanup(Fts3Phrase *pPhrase){$/;"	f
sqlite3Fts3EvalPhrasePoslist	sqlite3.c	/^SQLITE_PRIVATE char *sqlite3Fts3EvalPhrasePoslist($/;"	f
sqlite3Fts3EvalPhraseStats	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3EvalPhraseStats($/;"	f
sqlite3Fts3EvalStart	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3EvalStart(Fts3Cursor *pCsr, Fts3Expr *pExpr, int bOptOk){$/;"	f
sqlite3Fts3ExprFree	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3ExprFree(Fts3Expr *p){$/;"	f
sqlite3Fts3ExprInitTestInterface	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3ExprInitTestInterface(sqlite3* db){$/;"	f
sqlite3Fts3ExprParse	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3ExprParse($/;"	f
sqlite3Fts3FreeDeferredDoclists	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3FreeDeferredDoclists(Fts3Cursor *pCsr){$/;"	f
sqlite3Fts3FreeDeferredTokens	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3FreeDeferredTokens(Fts3Cursor *pCsr){$/;"	f
sqlite3Fts3GetVarint	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3GetVarint(const char *p, sqlite_int64 *v){$/;"	f
sqlite3Fts3GetVarint32	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3GetVarint32(const char *p, int *pi){$/;"	f
sqlite3Fts3HashClear	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3HashClear(Fts3Hash *pH){$/;"	f
sqlite3Fts3HashFind	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3Fts3HashFind(const Fts3Hash *pH, const void *pKey, int nKey){$/;"	f
sqlite3Fts3HashFindElem	sqlite3.c	/^SQLITE_PRIVATE Fts3HashElem *sqlite3Fts3HashFindElem($/;"	f
sqlite3Fts3HashInit	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3HashInit(Fts3Hash *pNew, char keyClass, char copyKey){$/;"	f
sqlite3Fts3HashInsert	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3Fts3HashInsert($/;"	f
sqlite3Fts3IcuTokenizerModule	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3IcuTokenizerModule($/;"	f
sqlite3Fts3Init	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3Init(sqlite3 *db){$/;"	f
sqlite3Fts3InitAux	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3InitAux(sqlite3 *db){$/;"	f
sqlite3Fts3InitHashTable	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3InitHashTable($/;"	f
sqlite3Fts3InitTokenizer	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3InitTokenizer($/;"	f
sqlite3Fts3IsIdChar	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3IsIdChar(char c){$/;"	f
sqlite3Fts3Matchinfo	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3Matchinfo($/;"	f
sqlite3Fts3MsrIncrNext	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3MsrIncrNext($/;"	f
sqlite3Fts3MsrIncrRestart	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3MsrIncrRestart(Fts3MultiSegReader *pCsr){$/;"	f
sqlite3Fts3MsrIncrStart	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3MsrIncrStart($/;"	f
sqlite3Fts3MsrOvfl	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3MsrOvfl($/;"	f
sqlite3Fts3NextToken	sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3Fts3NextToken(const char *zStr, int *pn){$/;"	f
sqlite3Fts3Offsets	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3Offsets($/;"	f
sqlite3Fts3Optimize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3Optimize(Fts3Table *p){$/;"	f
sqlite3Fts3PendingTermsClear	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3PendingTermsClear(Fts3Table *p){$/;"	f
sqlite3Fts3PendingTermsFlush	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3PendingTermsFlush(Fts3Table *p){$/;"	f
sqlite3Fts3PorterTokenizerModule	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3PorterTokenizerModule($/;"	f
sqlite3Fts3PutVarint	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3PutVarint(char *p, sqlite_int64 v){$/;"	f
sqlite3Fts3ReadBlock	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3ReadBlock($/;"	f
sqlite3Fts3ReadLock	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3ReadLock(Fts3Table *p){$/;"	f
sqlite3Fts3SegReaderCursor	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderCursor($/;"	f
sqlite3Fts3SegReaderFinish	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3SegReaderFinish($/;"	f
sqlite3Fts3SegReaderFree	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3SegReaderFree(Fts3SegReader *pReader){$/;"	f
sqlite3Fts3SegReaderNew	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderNew($/;"	f
sqlite3Fts3SegReaderPending	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderPending($/;"	f
sqlite3Fts3SegReaderStart	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderStart($/;"	f
sqlite3Fts3SegReaderStep	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderStep($/;"	f
sqlite3Fts3SegmentsClose	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3SegmentsClose(Fts3Table *p){$/;"	f
sqlite3Fts3SelectDocsize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SelectDocsize($/;"	f
sqlite3Fts3SelectDoctotal	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SelectDoctotal($/;"	f
sqlite3Fts3SimpleTokenizerModule	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3SimpleTokenizerModule($/;"	f
sqlite3Fts3Snippet	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3Snippet($/;"	f
sqlite3Fts3TermSegReaderCursor	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3TermSegReaderCursor($/;"	f
sqlite3Fts3UpdateMethod	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3UpdateMethod($/;"	f
sqlite3Fts3VarintLen	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3VarintLen(sqlite3_uint64 v){$/;"	f
sqlite3FuncDefInsert	sqlite3.c	/^SQLITE_PRIVATE void sqlite3FuncDefInsert($/;"	f
sqlite3GenerateConstraintChecks	sqlite3.c	/^SQLITE_PRIVATE void sqlite3GenerateConstraintChecks($/;"	f
sqlite3GenerateIndexKey	sqlite3.c	/^SQLITE_PRIVATE int sqlite3GenerateIndexKey($/;"	f
sqlite3GenerateRowDelete	sqlite3.c	/^SQLITE_PRIVATE void sqlite3GenerateRowDelete($/;"	f
sqlite3GenerateRowIndexDelete	sqlite3.c	/^SQLITE_PRIVATE void sqlite3GenerateRowIndexDelete($/;"	f
sqlite3Get4byte	sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3Get4byte(const u8 *p){$/;"	f
sqlite3GetBoolean	sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3GetBoolean(const char *z){$/;"	f
sqlite3GetCollSeq	sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3GetCollSeq($/;"	f
sqlite3GetFuncCollSeq	sqlite3.c	/^static CollSeq *sqlite3GetFuncCollSeq(sqlite3_context *context){$/;"	f	file:
sqlite3GetInt32	sqlite3.c	/^SQLITE_PRIVATE int sqlite3GetInt32(const char *zNum, int *pValue){$/;"	f
sqlite3GetTempRange	sqlite3.c	/^SQLITE_PRIVATE int sqlite3GetTempRange(Parse *pParse, int nReg){$/;"	f
sqlite3GetTempReg	sqlite3.c	/^SQLITE_PRIVATE int sqlite3GetTempReg(Parse *pParse){$/;"	f
sqlite3GetToken	sqlite3.c	/^SQLITE_PRIVATE int sqlite3GetToken(const unsigned char *z, int *tokenType){$/;"	f
sqlite3GetVTable	sqlite3.c	/^SQLITE_PRIVATE VTable *sqlite3GetVTable(sqlite3 *db, Table *pTab){$/;"	f
sqlite3GetVarint	sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3GetVarint(const unsigned char *p, u64 *v){$/;"	f
sqlite3GetVarint32	sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3GetVarint32(const unsigned char *p, u32 *v){$/;"	f
sqlite3GetVdbe	sqlite3.c	/^SQLITE_PRIVATE Vdbe *sqlite3GetVdbe(Parse *pParse){$/;"	f
sqlite3GlobalConfig	sqlite3.c	7802;"	d	file:
sqlite3GlobalConfig	sqlite3.c	7808;"	d	file:
sqlite3GlobalFunctions	sqlite3.c	/^SQLITE_PRIVATE SQLITE_WSD FuncDefHash sqlite3GlobalFunctions;$/;"	v
sqlite3HaltConstraint	sqlite3.c	/^SQLITE_PRIVATE void sqlite3HaltConstraint(Parse *pParse, int onError, char *p4, int p4type){$/;"	f
sqlite3HashClear	sqlite3.c	/^SQLITE_PRIVATE void sqlite3HashClear(Hash *pH){$/;"	f
sqlite3HashFind	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3HashFind(const Hash *pH, const char *pKey, int nKey){$/;"	f
sqlite3HashInit	sqlite3.c	/^SQLITE_PRIVATE void sqlite3HashInit(Hash *pNew){$/;"	f
sqlite3HashInsert	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3HashInsert(Hash *pH, const char *pKey, int nKey, void *data){$/;"	f
sqlite3HeapNearlyFull	sqlite3.c	/^SQLITE_PRIVATE int sqlite3HeapNearlyFull(void){$/;"	f
sqlite3HexToBlob	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3HexToBlob(sqlite3 *db, const char *z, int n){$/;"	f
sqlite3HexToInt	sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3HexToInt(int h){$/;"	f
sqlite3Hooks	sqlite3.c	/^} sqlite3Hooks = { 0, 0 };$/;"	v	typeref:struct:BenignMallocHooks	file:
sqlite3Hwtime	sqlite3.c	/^  __inline__ sqlite_uint64 sqlite3Hwtime(void){$/;"	f
sqlite3Hwtime	sqlite3.c	/^SQLITE_PRIVATE   sqlite_uint64 sqlite3Hwtime(void){ return ((sqlite_uint64)0); }$/;"	f
sqlite3IcuInit	sqlite3.c	/^SQLITE_PRIVATE int sqlite3IcuInit(sqlite3 *db){$/;"	f
sqlite3IdListAppend	sqlite3.c	/^SQLITE_PRIVATE IdList *sqlite3IdListAppend(sqlite3 *db, IdList *pList, Token *pToken){$/;"	f
sqlite3IdListDelete	sqlite3.c	/^SQLITE_PRIVATE void sqlite3IdListDelete(sqlite3 *db, IdList *pList){$/;"	f
sqlite3IdListDup	sqlite3.c	/^SQLITE_PRIVATE IdList *sqlite3IdListDup(sqlite3 *db, IdList *p){$/;"	f
sqlite3IdListIndex	sqlite3.c	/^SQLITE_PRIVATE int sqlite3IdListIndex(IdList *pList, const char *zName){$/;"	f
sqlite3IndexAffinityOk	sqlite3.c	/^SQLITE_PRIVATE int sqlite3IndexAffinityOk(Expr *pExpr, char idx_affinity){$/;"	f
sqlite3IndexAffinityStr	sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3IndexAffinityStr(Vdbe *v, Index *pIdx){$/;"	f
sqlite3IndexKeyinfo	sqlite3.c	/^SQLITE_PRIVATE KeyInfo *sqlite3IndexKeyinfo(Parse *pParse, Index *pIdx){$/;"	f
sqlite3IndexedByLookup	sqlite3.c	/^SQLITE_PRIVATE int sqlite3IndexedByLookup(Parse *pParse, struct SrcList_item *pFrom){$/;"	f
sqlite3Init	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Init(sqlite3 *db, char **pzErrMsg){$/;"	f
sqlite3InitCallback	sqlite3.c	/^SQLITE_PRIVATE int sqlite3InitCallback(void *pInit, int argc, char **argv, char **NotUsed){$/;"	f
sqlite3InitInfo	sqlite3.c	/^  struct sqlite3InitInfo {      \/* Information used during initialization *\/$/;"	s	struct:sqlite3	file:
sqlite3InitOne	sqlite3.c	/^static int sqlite3InitOne(sqlite3 *db, int iDb, char **pzErrMsg){$/;"	f	file:
sqlite3Insert	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Insert($/;"	f
sqlite3IntTokens	sqlite3.c	/^SQLITE_PRIVATE const Token sqlite3IntTokens[] = {$/;"	v
sqlite3IntTokens	sqlite3.c	/^SQLITE_PRIVATE const Token sqlite3IntTokens[];$/;"	v
sqlite3InvalidFunction	sqlite3.c	/^SQLITE_PRIVATE void sqlite3InvalidFunction($/;"	f
sqlite3InvokeBusyHandler	sqlite3.c	/^SQLITE_PRIVATE int sqlite3InvokeBusyHandler(BusyHandler *p){$/;"	f
sqlite3IoTrace	sqlite3.c	/^SQLITE_PRIVATE void (*sqlite3IoTrace)(const char*, ...) = 0;$/;"	v
sqlite3IoTrace	sqlite3.c	/^SQLITE_PRIVATE void (*sqlite3IoTrace)(const char*,...);$/;"	v
sqlite3IsEbcdicIdChar	sqlite3.c	/^SQLITE_PRIVATE const char sqlite3IsEbcdicIdChar[] = {$/;"	v
sqlite3IsEbcdicIdChar	sqlite3.c	/^SQLITE_PRIVATE const char sqlite3IsEbcdicIdChar[];$/;"	v
sqlite3IsLikeFunction	sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsLikeFunction(sqlite3 *db, Expr *pExpr, int *pIsNocase, char *aWc){$/;"	f
sqlite3IsMemJournal	sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsMemJournal(sqlite3_file *pJfd){$/;"	f
sqlite3IsNaN	sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsNaN(double x){$/;"	f
sqlite3IsNaN	sqlite3.c	11227;"	d	file:
sqlite3IsNumericAffinity	sqlite3.c	9779;"	d	file:
sqlite3IsReadOnly	sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsReadOnly(Parse *pParse, Table *pTab, int viewOk){$/;"	f
sqlite3IsRowid	sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsRowid(const char *z){$/;"	f
sqlite3Isalnum	sqlite3.c	11142;"	d	file:
sqlite3Isalnum	sqlite3.c	11150;"	d	file:
sqlite3Isalpha	sqlite3.c	11143;"	d	file:
sqlite3Isalpha	sqlite3.c	11151;"	d	file:
sqlite3Isdigit	sqlite3.c	11144;"	d	file:
sqlite3Isdigit	sqlite3.c	11152;"	d	file:
sqlite3Isspace	sqlite3.c	11141;"	d	file:
sqlite3Isspace	sqlite3.c	11149;"	d	file:
sqlite3Isxdigit	sqlite3.c	11145;"	d	file:
sqlite3Isxdigit	sqlite3.c	11153;"	d	file:
sqlite3JoinType	sqlite3.c	/^SQLITE_PRIVATE int sqlite3JoinType(Parse *pParse, Token *pA, Token *pB, Token *pC){$/;"	f
sqlite3JournalCreate	sqlite3.c	/^SQLITE_PRIVATE int sqlite3JournalCreate(sqlite3_file *p){$/;"	f
sqlite3JournalModename	sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3JournalModename(int eMode){$/;"	f
sqlite3JournalOpen	sqlite3.c	/^SQLITE_PRIVATE int sqlite3JournalOpen($/;"	f
sqlite3JournalSize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3JournalSize(sqlite3_vfs *pVfs){$/;"	f
sqlite3JournalSize	sqlite3.c	11756;"	d	file:
sqlite3KeywordCode	sqlite3.c	/^SQLITE_PRIVATE int sqlite3KeywordCode(const unsigned char *z, int n){$/;"	f
sqlite3LimitWhere	sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3LimitWhere($/;"	f
sqlite3LoadExtension	sqlite3.c	/^static int sqlite3LoadExtension($/;"	f	file:
sqlite3LocateCollSeq	sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3LocateCollSeq(Parse *pParse, const char *zName){$/;"	f
sqlite3LocateTable	sqlite3.c	/^SQLITE_PRIVATE Table *sqlite3LocateTable($/;"	f
sqlite3LockAndPrepare	sqlite3.c	/^static int sqlite3LockAndPrepare($/;"	f	file:
sqlite3MAppendf	sqlite3.c	/^SQLITE_PRIVATE char *sqlite3MAppendf(sqlite3 *db, char *zStr, const char *zFormat, ...){$/;"	f
sqlite3MPrintf	sqlite3.c	/^SQLITE_PRIVATE char *sqlite3MPrintf(sqlite3 *db, const char *zFormat, ...){$/;"	f
sqlite3Malloc	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3Malloc(int n){$/;"	f
sqlite3MallocAlarm	sqlite3.c	/^static void sqlite3MallocAlarm(int nByte){$/;"	f	file:
sqlite3MallocEnd	sqlite3.c	/^SQLITE_PRIVATE void sqlite3MallocEnd(void){$/;"	f
sqlite3MallocInit	sqlite3.c	/^SQLITE_PRIVATE int sqlite3MallocInit(void){$/;"	f
sqlite3MallocSize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3MallocSize(void *p){$/;"	f
sqlite3MallocZero	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3MallocZero(int n){$/;"	f
sqlite3MaterializeView	sqlite3.c	/^SQLITE_PRIVATE void sqlite3MaterializeView($/;"	f
sqlite3MayAbort	sqlite3.c	/^SQLITE_PRIVATE void sqlite3MayAbort(Parse *pParse){$/;"	f
sqlite3MemCompare	sqlite3.c	/^SQLITE_PRIVATE int sqlite3MemCompare(const Mem *pMem1, const Mem *pMem2, const CollSeq *pColl){$/;"	f
sqlite3MemFree	sqlite3.c	/^static void sqlite3MemFree(void *pPrior){ return; }$/;"	f	file:
sqlite3MemFree	sqlite3.c	/^static void sqlite3MemFree(void *pPrior){$/;"	f	file:
sqlite3MemGetMemsys3	sqlite3.c	/^SQLITE_PRIVATE const sqlite3_mem_methods *sqlite3MemGetMemsys3(void){$/;"	f
sqlite3MemGetMemsys5	sqlite3.c	/^SQLITE_PRIVATE const sqlite3_mem_methods *sqlite3MemGetMemsys5(void){$/;"	f
sqlite3MemInit	sqlite3.c	/^static int sqlite3MemInit(void *NotUsed){ return SQLITE_OK; }$/;"	f	file:
sqlite3MemInit	sqlite3.c	/^static int sqlite3MemInit(void *NotUsed){$/;"	f	file:
sqlite3MemJournalOpen	sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemJournalOpen(sqlite3_file *pJfd){$/;"	f
sqlite3MemJournalSize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3MemJournalSize(void){$/;"	f
sqlite3MemMalloc	sqlite3.c	/^static void *sqlite3MemMalloc(int nByte){ return 0; }$/;"	f	file:
sqlite3MemMalloc	sqlite3.c	/^static void *sqlite3MemMalloc(int nByte){$/;"	f	file:
sqlite3MemRealloc	sqlite3.c	/^static void *sqlite3MemRealloc(void *pPrior, int nByte){ return 0; }$/;"	f	file:
sqlite3MemRealloc	sqlite3.c	/^static void *sqlite3MemRealloc(void *pPrior, int nByte){$/;"	f	file:
sqlite3MemRoundup	sqlite3.c	/^static int sqlite3MemRoundup(int n){ return n; }$/;"	f	file:
sqlite3MemRoundup	sqlite3.c	/^static int sqlite3MemRoundup(int n){$/;"	f	file:
sqlite3MemSetDefault	sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemSetDefault(void){$/;"	f
sqlite3MemShutdown	sqlite3.c	/^static void sqlite3MemShutdown(void *NotUsed){ return; }$/;"	f	file:
sqlite3MemShutdown	sqlite3.c	/^static void sqlite3MemShutdown(void *NotUsed){$/;"	f	file:
sqlite3MemSize	sqlite3.c	/^static int sqlite3MemSize(void *p){$/;"	f	file:
sqlite3MemSize	sqlite3.c	/^static int sqlite3MemSize(void *pPrior){ return 0; }$/;"	f	file:
sqlite3MemSize	sqlite3.c	/^static int sqlite3MemSize(void *pPrior){$/;"	f	file:
sqlite3MemdebugBacktrace	sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugBacktrace(int depth){$/;"	f
sqlite3MemdebugBacktraceCallback	sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugBacktraceCallback(void (*xBacktrace)(int, int, void **)){$/;"	f
sqlite3MemdebugDump	sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugDump(const char *zFilename){$/;"	f
sqlite3MemdebugHasType	sqlite3.c	/^SQLITE_PRIVATE int sqlite3MemdebugHasType(void *p, u8 eType){$/;"	f
sqlite3MemdebugHasType	sqlite3.c	11838;"	d	file:
sqlite3MemdebugMallocCount	sqlite3.c	/^SQLITE_PRIVATE int sqlite3MemdebugMallocCount(){$/;"	f
sqlite3MemdebugNoType	sqlite3.c	/^SQLITE_PRIVATE int sqlite3MemdebugNoType(void *p, u8 eType){$/;"	f
sqlite3MemdebugNoType	sqlite3.c	11839;"	d	file:
sqlite3MemdebugSetType	sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugSetType(void *p, u8 eType){$/;"	f
sqlite3MemdebugSetType	sqlite3.c	11837;"	d	file:
sqlite3MemdebugSettitle	sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugSettitle(const char *zTitle){$/;"	f
sqlite3MemdebugSync	sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugSync(){$/;"	f
sqlite3MemoryAlarm	sqlite3.c	/^static int sqlite3MemoryAlarm($/;"	f	file:
sqlite3Memsys3Dump	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Memsys3Dump(const char *zFilename){$/;"	f
sqlite3Memsys5Dump	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Memsys5Dump(const char *zFilename){$/;"	f
sqlite3MemsysGetHeader	sqlite3.c	/^static struct MemBlockHdr *sqlite3MemsysGetHeader(void *pAllocation){$/;"	f	file:
sqlite3MinimumFileFormat	sqlite3.c	/^SQLITE_PRIVATE void sqlite3MinimumFileFormat(Parse *pParse, int iDb, int minFormat){$/;"	f
sqlite3MisuseError	sqlite3.c	/^SQLITE_PRIVATE int sqlite3MisuseError(int lineno){$/;"	f
sqlite3MulInt64	sqlite3.c	/^SQLITE_PRIVATE int sqlite3MulInt64(i64 *pA, i64 iB){$/;"	f
sqlite3MultiWrite	sqlite3.c	/^SQLITE_PRIVATE void sqlite3MultiWrite(Parse *pParse){$/;"	f
sqlite3MutexAlloc	sqlite3.c	/^SQLITE_PRIVATE sqlite3_mutex *sqlite3MutexAlloc(int id){$/;"	f
sqlite3MutexAlloc	sqlite3.c	9250;"	d	file:
sqlite3MutexEnd	sqlite3.c	/^SQLITE_PRIVATE int sqlite3MutexEnd(void){$/;"	f
sqlite3MutexEnd	sqlite3.c	9252;"	d	file:
sqlite3MutexInit	sqlite3.c	/^SQLITE_PRIVATE int sqlite3MutexInit(void){ $/;"	f
sqlite3MutexInit	sqlite3.c	9251;"	d	file:
sqlite3NameFromToken	sqlite3.c	/^SQLITE_PRIVATE char *sqlite3NameFromToken(sqlite3 *db, Token *pName){$/;"	f
sqlite3NestedParse	sqlite3.c	/^SQLITE_PRIVATE void sqlite3NestedParse(Parse *pParse, const char *zFormat, ...){$/;"	f
sqlite3NoopMutex	sqlite3.c	/^SQLITE_PRIVATE sqlite3_mutex_methods const *sqlite3NoopMutex(void){$/;"	f
sqlite3OSTrace	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OSTrace = 0;$/;"	v
sqlite3OpcodeName	sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3OpcodeName(int i){$/;"	f
sqlite3OpcodeProperty	sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3OpcodeProperty[] = OPFLG_INITIALIZER;$/;"	v
sqlite3OpcodeProperty	sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3OpcodeProperty[];$/;"	v
sqlite3OpenMasterTable	sqlite3.c	/^SQLITE_PRIVATE void sqlite3OpenMasterTable(Parse *p, int iDb){$/;"	f
sqlite3OpenTable	sqlite3.c	/^SQLITE_PRIVATE void sqlite3OpenTable($/;"	f
sqlite3OpenTableAndIndices	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OpenTableAndIndices($/;"	f
sqlite3OpenTempDatabase	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OpenTempDatabase(Parse *pParse){$/;"	f
sqlite3OsAccess	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsAccess($/;"	f
sqlite3OsCheckReservedLock	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f
sqlite3OsClose	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsClose(sqlite3_file *pId){$/;"	f
sqlite3OsCloseFree	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsCloseFree(sqlite3_file *pFile){$/;"	f
sqlite3OsCurrentTimeInt64	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsCurrentTimeInt64(sqlite3_vfs *pVfs, sqlite3_int64 *pTimeOut){$/;"	f
sqlite3OsDelete	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsDelete(sqlite3_vfs *pVfs, const char *zPath, int dirSync){$/;"	f
sqlite3OsDeviceCharacteristics	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsDeviceCharacteristics(sqlite3_file *id){$/;"	f
sqlite3OsDlClose	sqlite3.c	/^SQLITE_PRIVATE void sqlite3OsDlClose(sqlite3_vfs *pVfs, void *pHandle){$/;"	f
sqlite3OsDlError	sqlite3.c	/^SQLITE_PRIVATE void sqlite3OsDlError(sqlite3_vfs *pVfs, int nByte, char *zBufOut){$/;"	f
sqlite3OsDlOpen	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3OsDlOpen(sqlite3_vfs *pVfs, const char *zPath){$/;"	f
sqlite3OsDlSym	sqlite3.c	/^SQLITE_PRIVATE void (*sqlite3OsDlSym(sqlite3_vfs *pVfs, void *pHdle, const char *zSym))(void){$/;"	f
sqlite3OsFileControl	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsFileControl(sqlite3_file *id, int op, void *pArg){$/;"	f
sqlite3OsFileSize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsFileSize(sqlite3_file *id, i64 *pSize){$/;"	f
sqlite3OsFullPathname	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsFullPathname($/;"	f
sqlite3OsInit	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsInit(void){$/;"	f
sqlite3OsLock	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsLock(sqlite3_file *id, int lockType){$/;"	f
sqlite3OsOpen	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsOpen($/;"	f
sqlite3OsOpenMalloc	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsOpenMalloc($/;"	f
sqlite3OsRandomness	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsRandomness(sqlite3_vfs *pVfs, int nByte, char *zBufOut){$/;"	f
sqlite3OsRead	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsRead(sqlite3_file *id, void *pBuf, int amt, i64 offset){$/;"	f
sqlite3OsSectorSize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsSectorSize(sqlite3_file *id){$/;"	f
sqlite3OsShmBarrier	sqlite3.c	/^SQLITE_PRIVATE void sqlite3OsShmBarrier(sqlite3_file *id){$/;"	f
sqlite3OsShmLock	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsShmLock(sqlite3_file *id, int offset, int n, int flags){$/;"	f
sqlite3OsShmMap	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsShmMap($/;"	f
sqlite3OsShmUnmap	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsShmUnmap(sqlite3_file *id, int deleteFlag){$/;"	f
sqlite3OsSleep	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsSleep(sqlite3_vfs *pVfs, int nMicro){$/;"	f
sqlite3OsSync	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsSync(sqlite3_file *id, int flags){$/;"	f
sqlite3OsTruncate	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsTruncate(sqlite3_file *id, i64 size){$/;"	f
sqlite3OsUnlock	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsUnlock(sqlite3_file *id, int lockType){$/;"	f
sqlite3OsWrite	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsWrite(sqlite3_file *id, const void *pBuf, int amt, i64 offset){$/;"	f
sqlite3PCacheBufferSetup	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PCacheBufferSetup(void *pBuf, int sz, int n){$/;"	f
sqlite3PCacheSetDefault	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PCacheSetDefault(void){$/;"	f
sqlite3PExpr	sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3PExpr($/;"	f
sqlite3PageFree	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PageFree(void *p){$/;"	f
sqlite3PageMalloc	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PageMalloc(int sz){$/;"	f
sqlite3PagerAcquire	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerAcquire($/;"	f
sqlite3PagerBackupPtr	sqlite3.c	/^SQLITE_PRIVATE sqlite3_backup **sqlite3PagerBackupPtr(Pager *pPager){$/;"	f
sqlite3PagerBegin	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerBegin(Pager *pPager, int exFlag, int subjInMemory){$/;"	f
sqlite3PagerCheckpoint	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerCheckpoint(Pager *pPager, int eMode, int *pnLog, int *pnCkpt){$/;"	f
sqlite3PagerClose	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerClose(Pager *pPager){$/;"	f
sqlite3PagerCloseWal	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerCloseWal(Pager *pPager){$/;"	f
sqlite3PagerCodec	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PagerCodec(PgHdr *pPg){$/;"	f
sqlite3PagerCommitPhaseOne	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerCommitPhaseOne($/;"	f
sqlite3PagerCommitPhaseTwo	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerCommitPhaseTwo(Pager *pPager){$/;"	f
sqlite3PagerDontWrite	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerDontWrite(PgHdr *pPg){$/;"	f
sqlite3PagerExclusiveLock	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerExclusiveLock(Pager *pPager){$/;"	f
sqlite3PagerFile	sqlite3.c	/^SQLITE_PRIVATE sqlite3_file *sqlite3PagerFile(Pager *pPager){$/;"	f
sqlite3PagerFilename	sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3PagerFilename(Pager *pPager){$/;"	f
sqlite3PagerGet	sqlite3.c	8667;"	d	file:
sqlite3PagerGetCodec	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PagerGetCodec(Pager *pPager){$/;"	f
sqlite3PagerGetData	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PagerGetData(DbPage *pPg){$/;"	f
sqlite3PagerGetExtra	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PagerGetExtra(DbPage *pPg){$/;"	f
sqlite3PagerGetJournalMode	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerGetJournalMode(Pager *pPager){$/;"	f
sqlite3PagerIsMemdb	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerIsMemdb(Pager *pPager){$/;"	f
sqlite3PagerIsreadonly	sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3PagerIsreadonly(Pager *pPager){$/;"	f
sqlite3PagerIswriteable	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerIswriteable(DbPage *pPg){$/;"	f
sqlite3PagerJournalSizeLimit	sqlite3.c	/^SQLITE_PRIVATE i64 sqlite3PagerJournalSizeLimit(Pager *pPager, i64 iLimit){$/;"	f
sqlite3PagerJournalname	sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3PagerJournalname(Pager *pPager){$/;"	f
sqlite3PagerLockingMode	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerLockingMode(Pager *pPager, int eMode){$/;"	f
sqlite3PagerLookup	sqlite3.c	/^SQLITE_PRIVATE DbPage *sqlite3PagerLookup(Pager *pPager, Pgno pgno){$/;"	f
sqlite3PagerMaxPageCount	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerMaxPageCount(Pager *pPager, int mxPage){$/;"	f
sqlite3PagerMemUsed	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerMemUsed(Pager *pPager){$/;"	f
sqlite3PagerMovepage	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerMovepage(Pager *pPager, DbPage *pPg, Pgno pgno, int isCommit){$/;"	f
sqlite3PagerNosync	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerNosync(Pager *pPager){$/;"	f
sqlite3PagerOkToChangeJournalMode	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerOkToChangeJournalMode(Pager *pPager){$/;"	f
sqlite3PagerOpen	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerOpen($/;"	f
sqlite3PagerOpenSavepoint	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerOpenSavepoint(Pager *pPager, int nSavepoint){$/;"	f
sqlite3PagerOpenWal	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerOpenWal($/;"	f
sqlite3PagerPageRefcount	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerPageRefcount(DbPage *pPage){$/;"	f
sqlite3PagerPagecount	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerPagecount(Pager *pPager, int *pnPage){$/;"	f
sqlite3PagerPagenumber	sqlite3.c	/^SQLITE_PRIVATE Pgno sqlite3PagerPagenumber(DbPage *pPg){$/;"	f
sqlite3PagerReadFileheader	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerReadFileheader(Pager *pPager, int N, unsigned char *pDest){$/;"	f
sqlite3PagerRef	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerRef(DbPage *pPg){$/;"	f
sqlite3PagerRefcount	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerRefcount(Pager *pPager){$/;"	f
sqlite3PagerRollback	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerRollback(Pager *pPager){$/;"	f
sqlite3PagerSavepoint	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSavepoint(Pager *pPager, int op, int iSavepoint){$/;"	f
sqlite3PagerSetBusyhandler	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerSetBusyhandler($/;"	f
sqlite3PagerSetCachesize	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerSetCachesize(Pager *pPager, int mxPage){$/;"	f
sqlite3PagerSetCodec	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerSetCodec($/;"	f
sqlite3PagerSetJournalMode	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSetJournalMode(Pager *pPager, int eMode){$/;"	f
sqlite3PagerSetPagesize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSetPagesize(Pager *pPager, u32 *pPageSize, int nReserve){$/;"	f
sqlite3PagerSetSafetyLevel	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerSetSafetyLevel($/;"	f
sqlite3PagerSharedLock	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSharedLock(Pager *pPager){$/;"	f
sqlite3PagerStats	sqlite3.c	/^SQLITE_PRIVATE int *sqlite3PagerStats(Pager *pPager){$/;"	f
sqlite3PagerSync	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSync(Pager *pPager){$/;"	f
sqlite3PagerTempSpace	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PagerTempSpace(Pager *pPager){$/;"	f
sqlite3PagerTruncateImage	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerTruncateImage(Pager *pPager, Pgno nPage){$/;"	f
sqlite3PagerUnref	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerUnref(DbPage *pPg){$/;"	f
sqlite3PagerVfs	sqlite3.c	/^SQLITE_PRIVATE const sqlite3_vfs *sqlite3PagerVfs(Pager *pPager){$/;"	f
sqlite3PagerWalCallback	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerWalCallback(Pager *pPager){$/;"	f
sqlite3PagerWalSupported	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerWalSupported(Pager *pPager){$/;"	f
sqlite3PagerWrite	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerWrite(DbPage *pDbPage){$/;"	f
sqlite3ParseToplevel	sqlite3.c	11447;"	d	file:
sqlite3ParseToplevel	sqlite3.c	11456;"	d	file:
sqlite3ParseUri	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ParseUri($/;"	f
sqlite3Parser	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Parser($/;"	f
sqlite3ParserARG_FETCH	sqlite3.c	103524;"	d	file:
sqlite3ParserARG_PDECL	sqlite3.c	103523;"	d	file:
sqlite3ParserARG_SDECL	sqlite3.c	103522;"	d	file:
sqlite3ParserARG_STORE	sqlite3.c	103525;"	d	file:
sqlite3ParserAlloc	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3ParserAlloc(void *(*mallocProc)(size_t)){$/;"	f
sqlite3ParserFree	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ParserFree($/;"	f
sqlite3ParserStackPeak	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ParserStackPeak(void *p){$/;"	f
sqlite3ParserTOKENTYPE	sqlite3.c	103501;"	d	file:
sqlite3ParserTrace	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ParserTrace(FILE *TraceFILE, char *zTracePrompt){$/;"	f
sqlite3PcacheCleanAll	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheCleanAll(PCache *pCache){$/;"	f
sqlite3PcacheClear	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheClear(PCache *pCache){$/;"	f
sqlite3PcacheClearSyncFlags	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheClearSyncFlags(PCache *pCache){$/;"	f
sqlite3PcacheClose	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheClose(PCache *pCache){$/;"	f
sqlite3PcacheDirtyList	sqlite3.c	/^SQLITE_PRIVATE PgHdr *sqlite3PcacheDirtyList(PCache *pCache){$/;"	f
sqlite3PcacheDrop	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheDrop(PgHdr *p){$/;"	f
sqlite3PcacheFetch	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheFetch($/;"	f
sqlite3PcacheGetCachesize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheGetCachesize(PCache *pCache){$/;"	f
sqlite3PcacheInitialize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheInitialize(void){$/;"	f
sqlite3PcacheIterateDirty	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheIterateDirty(PCache *pCache, void (*xIter)(PgHdr *)){$/;"	f
sqlite3PcacheMakeClean	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheMakeClean(PgHdr *p){$/;"	f
sqlite3PcacheMakeDirty	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheMakeDirty(PgHdr *p){$/;"	f
sqlite3PcacheMove	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheMove(PgHdr *p, Pgno newPgno){$/;"	f
sqlite3PcacheOpen	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheOpen($/;"	f
sqlite3PcachePageRefcount	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcachePageRefcount(PgHdr *p){$/;"	f
sqlite3PcachePagecount	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcachePagecount(PCache *pCache){$/;"	f
sqlite3PcacheRef	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheRef(PgHdr *p){$/;"	f
sqlite3PcacheRefCount	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheRefCount(PCache *pCache){$/;"	f
sqlite3PcacheRelease	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheRelease(PgHdr *p){$/;"	f
sqlite3PcacheReleaseMemory	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheReleaseMemory(int nReq){$/;"	f
sqlite3PcacheSetCachesize	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheSetCachesize(PCache *pCache, int mxPage){$/;"	f
sqlite3PcacheSetPageSize	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheSetPageSize(PCache *pCache, int szPage){$/;"	f
sqlite3PcacheShutdown	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheShutdown(void){$/;"	f
sqlite3PcacheSize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheSize(void){ return sizeof(PCache); }$/;"	f
sqlite3PcacheStats	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheStats($/;"	f
sqlite3PcacheTruncate	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheTruncate(PCache *pCache, Pgno pgno){$/;"	f
sqlite3PendingByte	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PendingByte = 0x40000000;$/;"	v
sqlite3PendingByte	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PendingByte;$/;"	v
sqlite3Pragma	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Pragma($/;"	f
sqlite3Prepare	sqlite3.c	/^static int sqlite3Prepare($/;"	f	file:
sqlite3Prepare16	sqlite3.c	/^static int sqlite3Prepare16($/;"	f	file:
sqlite3PrintExpr	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PrintExpr(Expr *p){$/;"	f
sqlite3PrintExprList	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PrintExprList(ExprList *pList){$/;"	f
sqlite3PrintSelect	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PrintSelect(Select *p, int indent){$/;"	f
sqlite3Prng	sqlite3.c	/^} sqlite3Prng;$/;"	v	typeref:struct:sqlite3PrngType	file:
sqlite3PrngResetState	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PrngResetState(void){$/;"	f
sqlite3PrngRestoreState	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PrngRestoreState(void){$/;"	f
sqlite3PrngSaveState	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PrngSaveState(void){$/;"	f
sqlite3PrngType	sqlite3.c	/^static SQLITE_WSD struct sqlite3PrngType {$/;"	s	file:
sqlite3Put4byte	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Put4byte(unsigned char *p, u32 v){$/;"	f
sqlite3PutVarint	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PutVarint(unsigned char *p, u64 v){$/;"	f
sqlite3PutVarint32	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PutVarint32(unsigned char *p, u32 v){$/;"	f
sqlite3ReadSchema	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ReadSchema(Parse *pParse){$/;"	f
sqlite3Realloc	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3Realloc(void *pOld, int nBytes){$/;"	f
sqlite3RefillIndex	sqlite3.c	/^static void sqlite3RefillIndex(Parse *pParse, Index *pIndex, int memRootPage){$/;"	f	file:
sqlite3RegisterBuiltinFunctions	sqlite3.c	/^SQLITE_PRIVATE void sqlite3RegisterBuiltinFunctions(sqlite3 *db){$/;"	f
sqlite3RegisterDateTimeFunctions	sqlite3.c	/^SQLITE_PRIVATE void sqlite3RegisterDateTimeFunctions(void){$/;"	f
sqlite3RegisterGlobalFunctions	sqlite3.c	/^SQLITE_PRIVATE void sqlite3RegisterGlobalFunctions(void){$/;"	f
sqlite3RegisterLikeFunctions	sqlite3.c	/^SQLITE_PRIVATE void sqlite3RegisterLikeFunctions(sqlite3 *db, int caseSensitive){$/;"	f
sqlite3Reindex	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Reindex(Parse *pParse, Token *pName1, Token *pName2){$/;"	f
sqlite3ReleaseTempRange	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ReleaseTempRange(Parse *pParse, int iReg, int nReg){$/;"	f
sqlite3ReleaseTempReg	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ReleaseTempReg(Parse *pParse, int iReg){$/;"	f
sqlite3Reprepare	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Reprepare(Vdbe *p){$/;"	f
sqlite3ResetInternalSchema	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ResetInternalSchema(sqlite3 *db, int iDb){$/;"	f
sqlite3ResolveExprNames	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ResolveExprNames( $/;"	f
sqlite3ResolveOrderGroupBy	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ResolveOrderGroupBy($/;"	f
sqlite3ResolveSelectNames	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ResolveSelectNames($/;"	f
sqlite3ResultSetOfSelect	sqlite3.c	/^SQLITE_PRIVATE Table *sqlite3ResultSetOfSelect(Parse *pParse, Select *pSelect){$/;"	f
sqlite3RollbackAll	sqlite3.c	/^SQLITE_PRIVATE void sqlite3RollbackAll(sqlite3 *db){$/;"	f
sqlite3RollbackTransaction	sqlite3.c	/^SQLITE_PRIVATE void sqlite3RollbackTransaction(Parse *pParse){$/;"	f
sqlite3RootPageMoved	sqlite3.c	/^SQLITE_PRIVATE void sqlite3RootPageMoved(sqlite3 *db, int iDb, int iFrom, int iTo){$/;"	f
sqlite3RowSetClear	sqlite3.c	/^SQLITE_PRIVATE void sqlite3RowSetClear(RowSet *p){$/;"	f
sqlite3RowSetInit	sqlite3.c	/^SQLITE_PRIVATE RowSet *sqlite3RowSetInit(sqlite3 *db, void *pSpace, unsigned int N){$/;"	f
sqlite3RowSetInsert	sqlite3.c	/^SQLITE_PRIVATE void sqlite3RowSetInsert(RowSet *p, i64 rowid){$/;"	f
sqlite3RowSetNext	sqlite3.c	/^SQLITE_PRIVATE int sqlite3RowSetNext(RowSet *p, i64 *pRowid){$/;"	f
sqlite3RowSetTest	sqlite3.c	/^SQLITE_PRIVATE int sqlite3RowSetTest(RowSet *pRowSet, u8 iBatch, sqlite3_int64 iRowid){$/;"	f
sqlite3RtreeInit	sqlite3.c	/^SQLITE_PRIVATE int sqlite3RtreeInit(sqlite3 *db){$/;"	f
sqlite3RunParser	sqlite3.c	/^SQLITE_PRIVATE int sqlite3RunParser(Parse *pParse, const char *zSql, char **pzErrMsg){$/;"	f
sqlite3RunVacuum	sqlite3.c	/^SQLITE_PRIVATE int sqlite3RunVacuum(char **pzErrMsg, sqlite3 *db){$/;"	f
sqlite3SafetyCheckOk	sqlite3.c	/^SQLITE_PRIVATE int sqlite3SafetyCheckOk(sqlite3 *db){$/;"	f
sqlite3SafetyCheckSickOrOk	sqlite3.c	/^SQLITE_PRIVATE int sqlite3SafetyCheckSickOrOk(sqlite3 *db){$/;"	f
sqlite3SavedPrng	sqlite3.c	/^static SQLITE_WSD struct sqlite3PrngType sqlite3SavedPrng;$/;"	v	typeref:struct:sqlite3PrngType	file:
sqlite3Savepoint	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Savepoint(Parse *pParse, int op, Token *pName){$/;"	f
sqlite3SchemaClear	sqlite3.c	/^SQLITE_PRIVATE void sqlite3SchemaClear(void *p){$/;"	f
sqlite3SchemaGet	sqlite3.c	/^SQLITE_PRIVATE Schema *sqlite3SchemaGet(sqlite3 *db, Btree *pBt){$/;"	f
sqlite3SchemaMutexHeld	sqlite3.c	/^SQLITE_PRIVATE int sqlite3SchemaMutexHeld(sqlite3 *db, int iDb, Schema *pSchema){$/;"	f
sqlite3SchemaMutexHeld	sqlite3.c	8120;"	d	file:
sqlite3SchemaToIndex	sqlite3.c	/^SQLITE_PRIVATE int sqlite3SchemaToIndex(sqlite3 *db, Schema *pSchema){$/;"	f
sqlite3ScratchFree	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ScratchFree(void *p){$/;"	f
sqlite3ScratchMalloc	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3ScratchMalloc(int n){$/;"	f
sqlite3Select	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Select($/;"	f
sqlite3SelectAddTypeInfo	sqlite3.c	/^static void sqlite3SelectAddTypeInfo(Parse *pParse, Select *pSelect){$/;"	f	file:
sqlite3SelectDelete	sqlite3.c	/^SQLITE_PRIVATE void sqlite3SelectDelete(sqlite3 *db, Select *p){$/;"	f
sqlite3SelectDestInit	sqlite3.c	/^SQLITE_PRIVATE void sqlite3SelectDestInit(SelectDest *pDest, int eDest, int iParm){$/;"	f
sqlite3SelectDup	sqlite3.c	/^SQLITE_PRIVATE Select *sqlite3SelectDup(sqlite3 *db, Select *p, int flags){$/;"	f
sqlite3SelectExpand	sqlite3.c	/^static void sqlite3SelectExpand(Parse *pParse, Select *pSelect){$/;"	f	file:
sqlite3SelectExprHeight	sqlite3.c	/^SQLITE_PRIVATE int sqlite3SelectExprHeight(Select *p){$/;"	f
sqlite3SelectExprHeight	sqlite3.c	11769;"	d	file:
sqlite3SelectNew	sqlite3.c	/^SQLITE_PRIVATE Select *sqlite3SelectNew($/;"	f
sqlite3SelectPrep	sqlite3.c	/^SQLITE_PRIVATE void sqlite3SelectPrep($/;"	f
sqlite3SetString	sqlite3.c	/^SQLITE_PRIVATE void sqlite3SetString(char **pz, sqlite3 *db, const char *zFormat, ...){$/;"	f
sqlite3SharedCacheList	sqlite3.c	/^SQLITE_PRIVATE BtShared *SQLITE_WSD sqlite3SharedCacheList = 0;$/;"	v
sqlite3SharedCacheList	sqlite3.c	/^static BtShared *SQLITE_WSD sqlite3SharedCacheList = 0;$/;"	v	file:
sqlite3SrcListAppend	sqlite3.c	/^SQLITE_PRIVATE SrcList *sqlite3SrcListAppend($/;"	f
sqlite3SrcListAppendFromTerm	sqlite3.c	/^SQLITE_PRIVATE SrcList *sqlite3SrcListAppendFromTerm($/;"	f
sqlite3SrcListAssignCursors	sqlite3.c	/^SQLITE_PRIVATE void sqlite3SrcListAssignCursors(Parse *pParse, SrcList *pList){$/;"	f
sqlite3SrcListDelete	sqlite3.c	/^SQLITE_PRIVATE void sqlite3SrcListDelete(sqlite3 *db, SrcList *pList){$/;"	f
sqlite3SrcListDup	sqlite3.c	/^SQLITE_PRIVATE SrcList *sqlite3SrcListDup(sqlite3 *db, SrcList *p, int flags){$/;"	f
sqlite3SrcListEnlarge	sqlite3.c	/^SQLITE_PRIVATE SrcList *sqlite3SrcListEnlarge($/;"	f
sqlite3SrcListIndexedBy	sqlite3.c	/^SQLITE_PRIVATE void sqlite3SrcListIndexedBy(Parse *pParse, SrcList *p, Token *pIndexedBy){$/;"	f
sqlite3SrcListLookup	sqlite3.c	/^SQLITE_PRIVATE Table *sqlite3SrcListLookup(Parse *pParse, SrcList *pSrc){$/;"	f
sqlite3SrcListShiftJoinType	sqlite3.c	/^SQLITE_PRIVATE void sqlite3SrcListShiftJoinType(SrcList *p){$/;"	f
sqlite3StackAllocRaw	sqlite3.c	11195;"	d	file:
sqlite3StackAllocRaw	sqlite3.c	11199;"	d	file:
sqlite3StackAllocZero	sqlite3.c	11196;"	d	file:
sqlite3StackAllocZero	sqlite3.c	11200;"	d	file:
sqlite3StackFree	sqlite3.c	11197;"	d	file:
sqlite3StackFree	sqlite3.c	11201;"	d	file:
sqlite3StartTable	sqlite3.c	/^SQLITE_PRIVATE void sqlite3StartTable($/;"	f
sqlite3Stat	sqlite3.c	/^} sqlite3Stat = { {0,}, {0,} };$/;"	v	typeref:struct:sqlite3StatType	file:
sqlite3StatType	sqlite3.c	/^static SQLITE_WSD struct sqlite3StatType {$/;"	s	file:
sqlite3StatType	sqlite3.c	/^typedef struct sqlite3StatType sqlite3StatType;$/;"	t	typeref:struct:sqlite3StatType	file:
sqlite3StatusAdd	sqlite3.c	/^SQLITE_PRIVATE void sqlite3StatusAdd(int op, int N){$/;"	f
sqlite3StatusSet	sqlite3.c	/^SQLITE_PRIVATE void sqlite3StatusSet(int op, int X){$/;"	f
sqlite3StatusValue	sqlite3.c	/^SQLITE_PRIVATE int sqlite3StatusValue(int op){$/;"	f
sqlite3Step	sqlite3.c	/^static int sqlite3Step(Vdbe *p){$/;"	f	file:
sqlite3StrAccumAppend	sqlite3.c	/^SQLITE_PRIVATE void sqlite3StrAccumAppend(StrAccum *p, const char *z, int N){$/;"	f
sqlite3StrAccumFinish	sqlite3.c	/^SQLITE_PRIVATE char *sqlite3StrAccumFinish(StrAccum *p){$/;"	f
sqlite3StrAccumInit	sqlite3.c	/^SQLITE_PRIVATE void sqlite3StrAccumInit(StrAccum *p, char *zBase, int n, int mx){$/;"	f
sqlite3StrAccumReset	sqlite3.c	/^SQLITE_PRIVATE void sqlite3StrAccumReset(StrAccum *p){$/;"	f
sqlite3StrICmp	sqlite3.c	/^SQLITE_PRIVATE int sqlite3StrICmp(const char *zLeft, const char *zRight){$/;"	f
sqlite3StrNICmp	sqlite3.c	11162;"	d	file:
sqlite3Strlen30	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Strlen30(const char *z){$/;"	f
sqlite3SubInt64	sqlite3.c	/^SQLITE_PRIVATE int sqlite3SubInt64(i64 *pA, i64 iB){$/;"	f
sqlite3TableAffinityStr	sqlite3.c	/^SQLITE_PRIVATE void sqlite3TableAffinityStr(Vdbe *v, Table *pTab){$/;"	f
sqlite3TableLock	sqlite3.c	/^SQLITE_PRIVATE void sqlite3TableLock($/;"	f
sqlite3TableLock	sqlite3.c	11649;"	d	file:
sqlite3TempInMemory	sqlite3.c	/^SQLITE_PRIVATE int sqlite3TempInMemory(const sqlite3 *db){$/;"	f
sqlite3Tolower	sqlite3.c	11146;"	d	file:
sqlite3Tolower	sqlite3.c	11154;"	d	file:
sqlite3Toupper	sqlite3.c	11140;"	d	file:
sqlite3Toupper	sqlite3.c	11148;"	d	file:
sqlite3TransferBindings	sqlite3.c	/^SQLITE_PRIVATE int sqlite3TransferBindings(sqlite3_stmt *pFromStmt, sqlite3_stmt *pToStmt){$/;"	f
sqlite3TriggerColmask	sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3TriggerColmask($/;"	f
sqlite3TriggerColmask	sqlite3.c	11457;"	d	file:
sqlite3TriggerDeleteStep	sqlite3.c	/^SQLITE_PRIVATE TriggerStep *sqlite3TriggerDeleteStep($/;"	f
sqlite3TriggerInsertStep	sqlite3.c	/^SQLITE_PRIVATE TriggerStep *sqlite3TriggerInsertStep($/;"	f
sqlite3TriggerList	sqlite3.c	/^SQLITE_PRIVATE Trigger *sqlite3TriggerList(Parse *pParse, Table *pTab){$/;"	f
sqlite3TriggerList	sqlite3.c	11455;"	d	file:
sqlite3TriggerSelectStep	sqlite3.c	/^SQLITE_PRIVATE TriggerStep *sqlite3TriggerSelectStep(sqlite3 *db, Select *pSelect){$/;"	f
sqlite3TriggerUpdateStep	sqlite3.c	/^SQLITE_PRIVATE TriggerStep *sqlite3TriggerUpdateStep($/;"	f
sqlite3TriggersExist	sqlite3.c	/^SQLITE_PRIVATE Trigger *sqlite3TriggersExist($/;"	f
sqlite3TriggersExist	sqlite3.c	11449;"	d	file:
sqlite3TwoPartName	sqlite3.c	/^SQLITE_PRIVATE int sqlite3TwoPartName($/;"	f
sqlite3UnlinkAndDeleteIndex	sqlite3.c	/^SQLITE_PRIVATE void sqlite3UnlinkAndDeleteIndex(sqlite3 *db, int iDb, const char *zIdxName){$/;"	f
sqlite3UnlinkAndDeleteTable	sqlite3.c	/^SQLITE_PRIVATE void sqlite3UnlinkAndDeleteTable(sqlite3 *db, int iDb, const char *zTabName){$/;"	f
sqlite3UnlinkAndDeleteTrigger	sqlite3.c	/^SQLITE_PRIVATE void sqlite3UnlinkAndDeleteTrigger(sqlite3 *db, int iDb, const char *zName){$/;"	f
sqlite3UnlinkAndDeleteTrigger	sqlite3.c	11452;"	d	file:
sqlite3Update	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Update($/;"	f
sqlite3UpperToLower	sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3UpperToLower[] = {$/;"	v
sqlite3UpperToLower	sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3UpperToLower[];$/;"	v
sqlite3Utf16ByteLen	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Utf16ByteLen(const void *zIn, int nChar){$/;"	f
sqlite3Utf16to8	sqlite3.c	/^SQLITE_PRIVATE char *sqlite3Utf16to8(sqlite3 *db, const void *z, int nByte, u8 enc){$/;"	f
sqlite3Utf8CharLen	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Utf8CharLen(const char *zIn, int nByte){$/;"	f
sqlite3Utf8Read	sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3Utf8Read($/;"	f
sqlite3Utf8Read	sqlite3.c	82709;"	d	file:
sqlite3Utf8To8	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Utf8To8(unsigned char *zIn){$/;"	f
sqlite3Utf8Trans1	sqlite3.c	/^static const unsigned char sqlite3Utf8Trans1[] = {$/;"	v	file:
sqlite3Utf8to16	sqlite3.c	/^SQLITE_PRIVATE char *sqlite3Utf8to16(sqlite3 *db, u8 enc, char *z, int n, int *pnOut){$/;"	f
sqlite3UtfSelfTest	sqlite3.c	/^SQLITE_PRIVATE void sqlite3UtfSelfTest(void){$/;"	f
sqlite3VMPrintf	sqlite3.c	/^SQLITE_PRIVATE char *sqlite3VMPrintf(sqlite3 *db, const char *zFormat, va_list ap){$/;"	f
sqlite3VXPrintf	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VXPrintf($/;"	f
sqlite3Vacuum	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Vacuum(Parse *pParse){$/;"	f
sqlite3ValueApplyAffinity	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ValueApplyAffinity($/;"	f
sqlite3ValueBytes	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ValueBytes(sqlite3_value *pVal, u8 enc){$/;"	f
sqlite3ValueFree	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ValueFree(sqlite3_value *v){$/;"	f
sqlite3ValueFromExpr	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ValueFromExpr($/;"	f
sqlite3ValueNew	sqlite3.c	/^SQLITE_PRIVATE sqlite3_value *sqlite3ValueNew(sqlite3 *db){$/;"	f
sqlite3ValueSetStr	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ValueSetStr($/;"	f
sqlite3ValueText	sqlite3.c	/^SQLITE_PRIVATE const void *sqlite3ValueText(sqlite3_value* pVal, u8 enc){$/;"	f
sqlite3VarintLen	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VarintLen(u64 v){$/;"	f
sqlite3VdbeAddOp0	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp0(Vdbe *p, int op){$/;"	f
sqlite3VdbeAddOp1	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp1(Vdbe *p, int op, int p1){$/;"	f
sqlite3VdbeAddOp2	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp2(Vdbe *p, int op, int p1, int p2){$/;"	f
sqlite3VdbeAddOp3	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp3(Vdbe *p, int op, int p1, int p2, int p3){$/;"	f
sqlite3VdbeAddOp4	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp4($/;"	f
sqlite3VdbeAddOp4Int	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp4Int($/;"	f
sqlite3VdbeAddOpList	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOpList(Vdbe *p, int nOp, VdbeOpList const *aOp){$/;"	f
sqlite3VdbeAddParseSchemaOp	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeAddParseSchemaOp(Vdbe *p, int iDb, char *zWhere){$/;"	f
sqlite3VdbeAddopTrace	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddopTrace = 0;$/;"	v
sqlite3VdbeAssertMayAbort	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAssertMayAbort(Vdbe *v, int mayAbort){$/;"	f
sqlite3VdbeChangeEncoding	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeChangeEncoding(Mem *pMem, int desiredEnc){$/;"	f
sqlite3VdbeChangeP1	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP1(Vdbe *p, int addr, int val){$/;"	f
sqlite3VdbeChangeP2	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP2(Vdbe *p, int addr, int val){$/;"	f
sqlite3VdbeChangeP3	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP3(Vdbe *p, int addr, int val){$/;"	f
sqlite3VdbeChangeP4	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP4(Vdbe *p, int addr, const char *zP4, int n){$/;"	f
sqlite3VdbeChangeP5	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP5(Vdbe *p, u8 val){$/;"	f
sqlite3VdbeChangeToNoop	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeToNoop(Vdbe *p, int addr, int N){$/;"	f
sqlite3VdbeCheckFk	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCheckFk(Vdbe *p, int deferred){$/;"	f
sqlite3VdbeCheckFk	sqlite3.c	12890;"	d	file:
sqlite3VdbeCloseStatement	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCloseStatement(Vdbe *p, int eOp){$/;"	f
sqlite3VdbeComment	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeComment(Vdbe *p, const char *zFormat, ...){$/;"	f
sqlite3VdbeCountChanges	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeCountChanges(Vdbe *v){$/;"	f
sqlite3VdbeCreate	sqlite3.c	/^SQLITE_PRIVATE Vdbe *sqlite3VdbeCreate(sqlite3 *db){$/;"	f
sqlite3VdbeCurrentAddr	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCurrentAddr(Vdbe *p){$/;"	f
sqlite3VdbeCursorMoveto	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCursorMoveto(VdbeCursor *p){$/;"	f
sqlite3VdbeDb	sqlite3.c	/^SQLITE_PRIVATE sqlite3 *sqlite3VdbeDb(Vdbe *v){$/;"	f
sqlite3VdbeDelete	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeDelete(Vdbe *p){$/;"	f
sqlite3VdbeDeleteAuxData	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeDeleteAuxData(VdbeFunc *pVdbeFunc, int mask){$/;"	f
sqlite3VdbeDeleteObject	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeDeleteObject(sqlite3 *db, Vdbe *p){$/;"	f
sqlite3VdbeDeleteUnpackedRecord	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeDeleteUnpackedRecord(UnpackedRecord *p){$/;"	f
sqlite3VdbeEnter	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeEnter(Vdbe *p){$/;"	f
sqlite3VdbeEnter	sqlite3.c	12879;"	d	file:
sqlite3VdbeExec	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeExec($/;"	f
sqlite3VdbeExpandSql	sqlite3.c	/^SQLITE_PRIVATE char *sqlite3VdbeExpandSql($/;"	f
sqlite3VdbeFinalize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeFinalize(Vdbe *p){$/;"	f
sqlite3VdbeFrameDelete	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeFrameDelete(VdbeFrame *p){$/;"	f
sqlite3VdbeFrameRestore	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeFrameRestore(VdbeFrame *pFrame){$/;"	f
sqlite3VdbeFreeCursor	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeFreeCursor(Vdbe *p, VdbeCursor *pCx){$/;"	f
sqlite3VdbeGetOp	sqlite3.c	/^SQLITE_PRIVATE VdbeOp *sqlite3VdbeGetOp(Vdbe *p, int addr){$/;"	f
sqlite3VdbeGetValue	sqlite3.c	/^SQLITE_PRIVATE sqlite3_value *sqlite3VdbeGetValue(Vdbe *v, int iVar, u8 aff){$/;"	f
sqlite3VdbeHalt	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeHalt(Vdbe *p){$/;"	f
sqlite3VdbeIOTraceSql	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeIOTraceSql(Vdbe *p){$/;"	f
sqlite3VdbeIOTraceSql	sqlite3.c	11801;"	d	file:
sqlite3VdbeIdxKeyCompare	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeIdxKeyCompare($/;"	f
sqlite3VdbeIdxRowid	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeIdxRowid(sqlite3 *db, BtCursor *pCur, i64 *rowid){$/;"	f
sqlite3VdbeIntValue	sqlite3.c	/^SQLITE_PRIVATE i64 sqlite3VdbeIntValue(Mem *pMem){$/;"	f
sqlite3VdbeIntegerAffinity	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeIntegerAffinity(Mem *pMem){$/;"	f
sqlite3VdbeJumpHere	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeJumpHere(Vdbe *p, int addr){$/;"	f
sqlite3VdbeLeave	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeLeave(Vdbe *p){$/;"	f
sqlite3VdbeLeave	sqlite3.c	12880;"	d	file:
sqlite3VdbeLinkSubProgram	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeLinkSubProgram(Vdbe *pVdbe, SubProgram *p){$/;"	f
sqlite3VdbeList	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeList($/;"	f
sqlite3VdbeMakeLabel	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMakeLabel(Vdbe *p){$/;"	f
sqlite3VdbeMakeReady	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMakeReady($/;"	f
sqlite3VdbeMemCopy	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemCopy(Mem *pTo, const Mem *pFrom){$/;"	f
sqlite3VdbeMemExpandBlob	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemExpandBlob(Mem *pMem){$/;"	f
sqlite3VdbeMemExpandBlob	sqlite3.c	12903;"	d	file:
sqlite3VdbeMemFinalize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemFinalize(Mem *pMem, FuncDef *pFunc){$/;"	f
sqlite3VdbeMemFromBtree	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemFromBtree($/;"	f
sqlite3VdbeMemGrow	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemGrow(Mem *pMem, int n, int preserve){$/;"	f
sqlite3VdbeMemHandleBom	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemHandleBom(Mem *pMem){$/;"	f
sqlite3VdbeMemIntegerify	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemIntegerify(Mem *pMem){$/;"	f
sqlite3VdbeMemMakeWriteable	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemMakeWriteable(Mem *pMem){$/;"	f
sqlite3VdbeMemMove	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemMove(Mem *pTo, Mem *pFrom){$/;"	f
sqlite3VdbeMemNulTerminate	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemNulTerminate(Mem *pMem){$/;"	f
sqlite3VdbeMemNumerify	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemNumerify(Mem *pMem){$/;"	f
sqlite3VdbeMemPrepareToChange	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemPrepareToChange(Vdbe *pVdbe, Mem *pMem){$/;"	f
sqlite3VdbeMemPrettyPrint	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemPrettyPrint(Mem *pMem, char *zBuf){$/;"	f
sqlite3VdbeMemRealify	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemRealify(Mem *pMem){$/;"	f
sqlite3VdbeMemRelease	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemRelease(Mem *p){$/;"	f
sqlite3VdbeMemReleaseExternal	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemReleaseExternal(Mem *p){$/;"	f
sqlite3VdbeMemSetDouble	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetDouble(Mem *pMem, double val){$/;"	f
sqlite3VdbeMemSetDouble	sqlite3.c	12849;"	d	file:
sqlite3VdbeMemSetInt64	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetInt64(Mem *pMem, i64 val){$/;"	f
sqlite3VdbeMemSetNull	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetNull(Mem *pMem){$/;"	f
sqlite3VdbeMemSetRowSet	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetRowSet(Mem *pMem){$/;"	f
sqlite3VdbeMemSetStr	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemSetStr($/;"	f
sqlite3VdbeMemSetZeroBlob	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetZeroBlob(Mem *pMem, int n){$/;"	f
sqlite3VdbeMemShallowCopy	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemShallowCopy(Mem *pTo, const Mem *pFrom, int srcType){$/;"	f
sqlite3VdbeMemStoreType	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemStoreType(Mem *pMem){$/;"	f
sqlite3VdbeMemStringify	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemStringify(Mem *pMem, int enc){$/;"	f
sqlite3VdbeMemTooBig	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemTooBig(Mem *p){$/;"	f
sqlite3VdbeMemTranslate	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemTranslate(Mem *pMem, u8 desiredEnc){$/;"	f
sqlite3VdbeNoopComment	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeNoopComment(Vdbe *p, const char *zFormat, ...){$/;"	f
sqlite3VdbeParameterIndex	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeParameterIndex(Vdbe *p, const char *zName, int nName){$/;"	f
sqlite3VdbePrintOp	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbePrintOp(FILE *pOut, int pc, Op *pOp){$/;"	f
sqlite3VdbePrintSql	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbePrintSql(Vdbe *p){$/;"	f
sqlite3VdbeRealValue	sqlite3.c	/^SQLITE_PRIVATE double sqlite3VdbeRealValue(Mem *pMem){$/;"	f
sqlite3VdbeRecordCompare	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeRecordCompare($/;"	f
sqlite3VdbeRecordUnpack	sqlite3.c	/^SQLITE_PRIVATE UnpackedRecord *sqlite3VdbeRecordUnpack($/;"	f
sqlite3VdbeReset	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeReset(Vdbe *p){$/;"	f
sqlite3VdbeResetStepResult	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeResetStepResult(Vdbe *p){$/;"	f
sqlite3VdbeResolveLabel	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeResolveLabel(Vdbe *p, int x){$/;"	f
sqlite3VdbeRewind	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeRewind(Vdbe *p){$/;"	f
sqlite3VdbeRunOnlyOnce	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeRunOnlyOnce(Vdbe *p){$/;"	f
sqlite3VdbeSerialGet	sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3VdbeSerialGet($/;"	f
sqlite3VdbeSerialPut	sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3VdbeSerialPut(u8 *buf, int nBuf, Mem *pMem, int file_format){$/;"	f
sqlite3VdbeSerialType	sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3VdbeSerialType(Mem *pMem, int file_format){$/;"	f
sqlite3VdbeSerialTypeLen	sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3VdbeSerialTypeLen(u32 serial_type){$/;"	f
sqlite3VdbeSetChanges	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetChanges(sqlite3 *db, int nChange){$/;"	f
sqlite3VdbeSetColName	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSetColName($/;"	f
sqlite3VdbeSetNumCols	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetNumCols(Vdbe *p, int nResColumn){$/;"	f
sqlite3VdbeSetSql	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetSql(Vdbe *p, const char *z, int n, int isPrepareV2){$/;"	f
sqlite3VdbeSetVarmask	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetVarmask(Vdbe *v, int iVar){$/;"	f
sqlite3VdbeSwap	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSwap(Vdbe *pA, Vdbe *pB){$/;"	f
sqlite3VdbeTakeOpArray	sqlite3.c	/^SQLITE_PRIVATE VdbeOp *sqlite3VdbeTakeOpArray(Vdbe *p, int *pnOp, int *pnMaxArg){$/;"	f
sqlite3VdbeTrace	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeTrace(Vdbe *p, FILE *trace){$/;"	f
sqlite3VdbeUsesBtree	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeUsesBtree(Vdbe *p, int i){$/;"	f
sqlite3ViewGetColumnNames	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ViewGetColumnNames(Parse *pParse, Table *pTable){$/;"	f
sqlite3ViewGetColumnNames	sqlite3.c	11304;"	d	file:
sqlite3VtabArgExtend	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabArgExtend(Parse *pParse, Token *p){$/;"	f
sqlite3VtabArgInit	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabArgInit(Parse *pParse){$/;"	f
sqlite3VtabBegin	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabBegin(sqlite3 *db, VTable *pVTab){$/;"	f
sqlite3VtabBeginParse	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabBeginParse($/;"	f
sqlite3VtabCallConnect	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabCallConnect(Parse *pParse, Table *pTab){$/;"	f
sqlite3VtabCallCreate	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabCallCreate(sqlite3 *db, int iDb, const char *zTab, char **pzErr){$/;"	f
sqlite3VtabCallDestroy	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabCallDestroy(sqlite3 *db, int iDb, const char *zTab){$/;"	f
sqlite3VtabClear	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabClear(sqlite3 *db, Table *p){$/;"	f
sqlite3VtabClear	sqlite3.c	11657;"	d	file:
sqlite3VtabCommit	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabCommit(sqlite3 *db){$/;"	f
sqlite3VtabCommit	sqlite3.c	11660;"	d	file:
sqlite3VtabFinishParse	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabFinishParse(Parse *pParse, Token *pEnd){$/;"	f
sqlite3VtabInSync	sqlite3.c	11661;"	d	file:
sqlite3VtabInSync	sqlite3.c	11675;"	d	file:
sqlite3VtabLock	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabLock(VTable *pVTab){$/;"	f
sqlite3VtabLock	sqlite3.c	11662;"	d	file:
sqlite3VtabMakeWritable	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabMakeWritable(Parse *pParse, Table *pTab){$/;"	f
sqlite3VtabOverloadFunction	sqlite3.c	/^SQLITE_PRIVATE FuncDef *sqlite3VtabOverloadFunction($/;"	f
sqlite3VtabRollback	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabRollback(sqlite3 *db){$/;"	f
sqlite3VtabRollback	sqlite3.c	11659;"	d	file:
sqlite3VtabSavepoint	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabSavepoint(sqlite3 *db, int op, int iSavepoint){$/;"	f
sqlite3VtabSavepoint	sqlite3.c	11665;"	d	file:
sqlite3VtabSync	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabSync(sqlite3 *db, char **pzErrmsg){$/;"	f
sqlite3VtabSync	sqlite3.c	11658;"	d	file:
sqlite3VtabUnlock	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabUnlock(VTable *pVTab){$/;"	f
sqlite3VtabUnlock	sqlite3.c	11663;"	d	file:
sqlite3VtabUnlockList	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabUnlockList(sqlite3 *db){$/;"	f
sqlite3VtabUnlockList	sqlite3.c	11664;"	d	file:
sqlite3WalBeginReadTransaction	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalBeginReadTransaction(Wal *pWal, int *pChanged){$/;"	f
sqlite3WalBeginReadTransaction	sqlite3.c	36715;"	d	file:
sqlite3WalBeginWriteTransaction	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalBeginWriteTransaction(Wal *pWal){$/;"	f
sqlite3WalBeginWriteTransaction	sqlite3.c	36719;"	d	file:
sqlite3WalCallback	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalCallback(Wal *pWal){$/;"	f
sqlite3WalCallback	sqlite3.c	36726;"	d	file:
sqlite3WalCheckpoint	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalCheckpoint($/;"	f
sqlite3WalCheckpoint	sqlite3.c	36725;"	d	file:
sqlite3WalClose	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalClose($/;"	f
sqlite3WalClose	sqlite3.c	36714;"	d	file:
sqlite3WalDbsize	sqlite3.c	/^SQLITE_PRIVATE Pgno sqlite3WalDbsize(Wal *pWal){$/;"	f
sqlite3WalDbsize	sqlite3.c	36718;"	d	file:
sqlite3WalDefaultHook	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalDefaultHook($/;"	f
sqlite3WalEndReadTransaction	sqlite3.c	/^SQLITE_PRIVATE void sqlite3WalEndReadTransaction(Wal *pWal){$/;"	f
sqlite3WalEndReadTransaction	sqlite3.c	36716;"	d	file:
sqlite3WalEndWriteTransaction	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalEndWriteTransaction(Wal *pWal){$/;"	f
sqlite3WalEndWriteTransaction	sqlite3.c	36720;"	d	file:
sqlite3WalExclusiveMode	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalExclusiveMode(Wal *pWal, int op){$/;"	f
sqlite3WalExclusiveMode	sqlite3.c	36727;"	d	file:
sqlite3WalFrames	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalFrames($/;"	f
sqlite3WalFrames	sqlite3.c	36724;"	d	file:
sqlite3WalHeapMemory	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalHeapMemory(Wal *pWal){$/;"	f
sqlite3WalHeapMemory	sqlite3.c	36728;"	d	file:
sqlite3WalLimit	sqlite3.c	/^SQLITE_PRIVATE void sqlite3WalLimit(Wal *pWal, i64 iLimit){$/;"	f
sqlite3WalLimit	sqlite3.c	36713;"	d	file:
sqlite3WalOpen	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalOpen($/;"	f
sqlite3WalOpen	sqlite3.c	36712;"	d	file:
sqlite3WalRead	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalRead($/;"	f
sqlite3WalRead	sqlite3.c	36717;"	d	file:
sqlite3WalSavepoint	sqlite3.c	/^SQLITE_PRIVATE void sqlite3WalSavepoint(Wal *pWal, u32 *aWalData){$/;"	f
sqlite3WalSavepoint	sqlite3.c	36722;"	d	file:
sqlite3WalSavepointUndo	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalSavepointUndo(Wal *pWal, u32 *aWalData){$/;"	f
sqlite3WalSavepointUndo	sqlite3.c	36723;"	d	file:
sqlite3WalTrace	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalTrace = 0;$/;"	v
sqlite3WalUndo	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalUndo(Wal *pWal, int (*xUndo)(void *, Pgno), void *pUndoCtx){$/;"	f
sqlite3WalUndo	sqlite3.c	36721;"	d	file:
sqlite3WalkExpr	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalkExpr(Walker *pWalker, Expr *pExpr){$/;"	f
sqlite3WalkExprList	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalkExprList(Walker *pWalker, ExprList *p){$/;"	f
sqlite3WalkSelect	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalkSelect(Walker *pWalker, Select *p){$/;"	f
sqlite3WalkSelectExpr	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalkSelectExpr(Walker *pWalker, Select *p){$/;"	f
sqlite3WalkSelectFrom	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalkSelectFrom(Walker *pWalker, Select *p){$/;"	f
sqlite3WhereBegin	sqlite3.c	/^SQLITE_PRIVATE WhereInfo *sqlite3WhereBegin($/;"	f
sqlite3WhereEnd	sqlite3.c	/^SQLITE_PRIVATE void sqlite3WhereEnd(WhereInfo *pWInfo){$/;"	f
sqlite3WhereTrace	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WhereTrace = 0;$/;"	v
sqlite3XPrintf	sqlite3.c	/^SQLITE_PRIVATE void sqlite3XPrintf(StrAccum *p, const char *zFormat, ...){$/;"	f
sqlite3_aggregate_context	sqlite3.c	/^SQLITE_API void *sqlite3_aggregate_context(sqlite3_context *p, int nByte){$/;"	f
sqlite3_aggregate_context	sqlite3.c	87253;"	d	file:
sqlite3_aggregate_count	sqlite3.c	/^SQLITE_API int sqlite3_aggregate_count(sqlite3_context *p){$/;"	f
sqlite3_aggregate_count	sqlite3.c	87255;"	d	file:
sqlite3_api_routines	sqlite3.c	/^struct sqlite3_api_routines {$/;"	s	file:
sqlite3_api_routines	sqlite3.c	/^typedef struct sqlite3_api_routines sqlite3_api_routines;$/;"	t	typeref:struct:sqlite3_api_routines	file:
sqlite3_auto_extension	sqlite3.c	/^SQLITE_API int sqlite3_auto_extension(void (*xInit)(void)){$/;"	f
sqlite3_backup	sqlite3.c	/^struct sqlite3_backup {$/;"	s	file:
sqlite3_backup	sqlite3.c	/^typedef struct sqlite3_backup sqlite3_backup;$/;"	t	typeref:struct:sqlite3_backup	file:
sqlite3_backup_finish	sqlite3.c	/^SQLITE_API int sqlite3_backup_finish(sqlite3_backup *p){$/;"	f
sqlite3_backup_finish	sqlite3.c	87418;"	d	file:
sqlite3_backup_init	sqlite3.c	/^SQLITE_API sqlite3_backup *sqlite3_backup_init($/;"	f
sqlite3_backup_init	sqlite3.c	87419;"	d	file:
sqlite3_backup_pagecount	sqlite3.c	/^SQLITE_API int sqlite3_backup_pagecount(sqlite3_backup *p){$/;"	f
sqlite3_backup_pagecount	sqlite3.c	87420;"	d	file:
sqlite3_backup_remaining	sqlite3.c	/^SQLITE_API int sqlite3_backup_remaining(sqlite3_backup *p){$/;"	f
sqlite3_backup_remaining	sqlite3.c	87421;"	d	file:
sqlite3_backup_step	sqlite3.c	/^SQLITE_API int sqlite3_backup_step(sqlite3_backup *p, int nPage){$/;"	f
sqlite3_backup_step	sqlite3.c	87422;"	d	file:
sqlite3_bind_blob	sqlite3.c	/^SQLITE_API int sqlite3_bind_blob($/;"	f
sqlite3_bind_blob	sqlite3.c	87257;"	d	file:
sqlite3_bind_double	sqlite3.c	/^SQLITE_API int sqlite3_bind_double(sqlite3_stmt *pStmt, int i, double rValue){$/;"	f
sqlite3_bind_double	sqlite3.c	87258;"	d	file:
sqlite3_bind_int	sqlite3.c	/^SQLITE_API int sqlite3_bind_int(sqlite3_stmt *p, int i, int iValue){$/;"	f
sqlite3_bind_int	sqlite3.c	87259;"	d	file:
sqlite3_bind_int64	sqlite3.c	/^SQLITE_API int sqlite3_bind_int64(sqlite3_stmt *pStmt, int i, sqlite_int64 iValue){$/;"	f
sqlite3_bind_int64	sqlite3.c	87260;"	d	file:
sqlite3_bind_null	sqlite3.c	/^SQLITE_API int sqlite3_bind_null(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_bind_null	sqlite3.c	87261;"	d	file:
sqlite3_bind_parameter_count	sqlite3.c	/^SQLITE_API int sqlite3_bind_parameter_count(sqlite3_stmt *pStmt){$/;"	f
sqlite3_bind_parameter_count	sqlite3.c	87262;"	d	file:
sqlite3_bind_parameter_index	sqlite3.c	/^SQLITE_API int sqlite3_bind_parameter_index(sqlite3_stmt *pStmt, const char *zName){$/;"	f
sqlite3_bind_parameter_index	sqlite3.c	87263;"	d	file:
sqlite3_bind_parameter_name	sqlite3.c	/^SQLITE_API const char *sqlite3_bind_parameter_name(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_bind_parameter_name	sqlite3.c	87264;"	d	file:
sqlite3_bind_text	sqlite3.c	/^SQLITE_API int sqlite3_bind_text( $/;"	f
sqlite3_bind_text	sqlite3.c	87265;"	d	file:
sqlite3_bind_text16	sqlite3.c	/^SQLITE_API int sqlite3_bind_text16($/;"	f
sqlite3_bind_text16	sqlite3.c	87266;"	d	file:
sqlite3_bind_text16	sqlite3.c	87471;"	d	file:
sqlite3_bind_value	sqlite3.c	/^SQLITE_API int sqlite3_bind_value(sqlite3_stmt *pStmt, int i, const sqlite3_value *pValue){$/;"	f
sqlite3_bind_value	sqlite3.c	87267;"	d	file:
sqlite3_bind_zeroblob	sqlite3.c	/^SQLITE_API int sqlite3_bind_zeroblob(sqlite3_stmt *pStmt, int i, int n){$/;"	f
sqlite3_bind_zeroblob	sqlite3.c	87383;"	d	file:
sqlite3_bind_zeroblob	sqlite3.c	87530;"	d	file:
sqlite3_blob	sqlite3.c	/^typedef struct sqlite3_blob sqlite3_blob;$/;"	t	typeref:struct:sqlite3_blob	file:
sqlite3_blob_bytes	sqlite3.c	/^SQLITE_API int sqlite3_blob_bytes(sqlite3_blob *pBlob){$/;"	f
sqlite3_blob_bytes	sqlite3.c	87384;"	d	file:
sqlite3_blob_bytes	sqlite3.c	87531;"	d	file:
sqlite3_blob_close	sqlite3.c	/^SQLITE_API int sqlite3_blob_close(sqlite3_blob *pBlob){$/;"	f
sqlite3_blob_close	sqlite3.c	87385;"	d	file:
sqlite3_blob_close	sqlite3.c	87532;"	d	file:
sqlite3_blob_open	sqlite3.c	/^SQLITE_API int sqlite3_blob_open($/;"	f
sqlite3_blob_open	sqlite3.c	87386;"	d	file:
sqlite3_blob_open	sqlite3.c	87533;"	d	file:
sqlite3_blob_read	sqlite3.c	/^SQLITE_API int sqlite3_blob_read(sqlite3_blob *pBlob, void *z, int n, int iOffset){$/;"	f
sqlite3_blob_read	sqlite3.c	87387;"	d	file:
sqlite3_blob_read	sqlite3.c	87534;"	d	file:
sqlite3_blob_reopen	sqlite3.c	/^SQLITE_API int sqlite3_blob_reopen(sqlite3_blob *pBlob, sqlite3_int64 iRow){$/;"	f
sqlite3_blob_write	sqlite3.c	/^SQLITE_API int sqlite3_blob_write(sqlite3_blob *pBlob, const void *z, int n, int iOffset){$/;"	f
sqlite3_blob_write	sqlite3.c	87388;"	d	file:
sqlite3_blob_write	sqlite3.c	87535;"	d	file:
sqlite3_busy_handler	sqlite3.c	/^SQLITE_API int sqlite3_busy_handler($/;"	f
sqlite3_busy_handler	sqlite3.c	87268;"	d	file:
sqlite3_busy_timeout	sqlite3.c	/^SQLITE_API int sqlite3_busy_timeout(sqlite3 *db, int ms){$/;"	f
sqlite3_busy_timeout	sqlite3.c	87269;"	d	file:
sqlite3_callback	sqlite3.c	/^typedef int (*sqlite3_callback)(void*,int,char**, char**);$/;"	t	file:
sqlite3_changes	sqlite3.c	/^SQLITE_API int sqlite3_changes(sqlite3 *db){$/;"	f
sqlite3_changes	sqlite3.c	87270;"	d	file:
sqlite3_clear_bindings	sqlite3.c	/^SQLITE_API int sqlite3_clear_bindings(sqlite3_stmt *pStmt){$/;"	f
sqlite3_clear_bindings	sqlite3.c	87382;"	d	file:
sqlite3_close	sqlite3.c	/^SQLITE_API int sqlite3_close(sqlite3 *db){$/;"	f
sqlite3_close	sqlite3.c	87271;"	d	file:
sqlite3_collation_needed	sqlite3.c	/^SQLITE_API int sqlite3_collation_needed($/;"	f
sqlite3_collation_needed	sqlite3.c	87272;"	d	file:
sqlite3_collation_needed16	sqlite3.c	/^SQLITE_API int sqlite3_collation_needed16($/;"	f
sqlite3_collation_needed16	sqlite3.c	87273;"	d	file:
sqlite3_collation_needed16	sqlite3.c	87472;"	d	file:
sqlite3_column_blob	sqlite3.c	/^SQLITE_API const void *sqlite3_column_blob(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_blob	sqlite3.c	87274;"	d	file:
sqlite3_column_bytes	sqlite3.c	/^SQLITE_API int sqlite3_column_bytes(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_bytes	sqlite3.c	87275;"	d	file:
sqlite3_column_bytes16	sqlite3.c	/^SQLITE_API int sqlite3_column_bytes16(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_bytes16	sqlite3.c	87276;"	d	file:
sqlite3_column_count	sqlite3.c	/^SQLITE_API int sqlite3_column_count(sqlite3_stmt *pStmt){$/;"	f
sqlite3_column_count	sqlite3.c	87277;"	d	file:
sqlite3_column_database_name	sqlite3.c	/^SQLITE_API const char *sqlite3_column_database_name(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_database_name	sqlite3.c	87278;"	d	file:
sqlite3_column_database_name	sqlite3.c	87457;"	d	file:
sqlite3_column_database_name16	sqlite3.c	/^SQLITE_API const void *sqlite3_column_database_name16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_database_name16	sqlite3.c	87279;"	d	file:
sqlite3_column_database_name16	sqlite3.c	87458;"	d	file:
sqlite3_column_database_name16	sqlite3.c	87490;"	d	file:
sqlite3_column_decltype	sqlite3.c	/^SQLITE_API const char *sqlite3_column_decltype(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_decltype	sqlite3.c	87280;"	d	file:
sqlite3_column_decltype	sqlite3.c	87502;"	d	file:
sqlite3_column_decltype16	sqlite3.c	/^SQLITE_API const void *sqlite3_column_decltype16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_decltype16	sqlite3.c	87281;"	d	file:
sqlite3_column_decltype16	sqlite3.c	87473;"	d	file:
sqlite3_column_decltype16	sqlite3.c	87501;"	d	file:
sqlite3_column_double	sqlite3.c	/^SQLITE_API double sqlite3_column_double(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_double	sqlite3.c	87282;"	d	file:
sqlite3_column_int	sqlite3.c	/^SQLITE_API int sqlite3_column_int(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_int	sqlite3.c	87283;"	d	file:
sqlite3_column_int64	sqlite3.c	/^SQLITE_API sqlite_int64 sqlite3_column_int64(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_int64	sqlite3.c	87284;"	d	file:
sqlite3_column_name	sqlite3.c	/^SQLITE_API const char *sqlite3_column_name(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_name	sqlite3.c	87285;"	d	file:
sqlite3_column_name16	sqlite3.c	/^SQLITE_API const void *sqlite3_column_name16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_name16	sqlite3.c	87286;"	d	file:
sqlite3_column_name16	sqlite3.c	87474;"	d	file:
sqlite3_column_origin_name	sqlite3.c	/^SQLITE_API const char *sqlite3_column_origin_name(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_origin_name	sqlite3.c	87287;"	d	file:
sqlite3_column_origin_name	sqlite3.c	87461;"	d	file:
sqlite3_column_origin_name16	sqlite3.c	/^SQLITE_API const void *sqlite3_column_origin_name16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_origin_name16	sqlite3.c	87288;"	d	file:
sqlite3_column_origin_name16	sqlite3.c	87462;"	d	file:
sqlite3_column_origin_name16	sqlite3.c	87492;"	d	file:
sqlite3_column_table_name	sqlite3.c	/^SQLITE_API const char *sqlite3_column_table_name(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_table_name	sqlite3.c	87289;"	d	file:
sqlite3_column_table_name	sqlite3.c	87459;"	d	file:
sqlite3_column_table_name16	sqlite3.c	/^SQLITE_API const void *sqlite3_column_table_name16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_table_name16	sqlite3.c	87290;"	d	file:
sqlite3_column_table_name16	sqlite3.c	87460;"	d	file:
sqlite3_column_table_name16	sqlite3.c	87491;"	d	file:
sqlite3_column_text	sqlite3.c	/^SQLITE_API const unsigned char *sqlite3_column_text(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_text	sqlite3.c	87291;"	d	file:
sqlite3_column_text16	sqlite3.c	/^SQLITE_API const void *sqlite3_column_text16(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_text16	sqlite3.c	87292;"	d	file:
sqlite3_column_text16	sqlite3.c	87475;"	d	file:
sqlite3_column_type	sqlite3.c	/^SQLITE_API int sqlite3_column_type(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_type	sqlite3.c	87293;"	d	file:
sqlite3_column_value	sqlite3.c	/^SQLITE_API sqlite3_value *sqlite3_column_value(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_value	sqlite3.c	87294;"	d	file:
sqlite3_commit_hook	sqlite3.c	/^SQLITE_API void *sqlite3_commit_hook($/;"	f
sqlite3_commit_hook	sqlite3.c	87295;"	d	file:
sqlite3_compileoption_get	sqlite3.c	/^SQLITE_API const char *sqlite3_compileoption_get(int N){$/;"	f
sqlite3_compileoption_get	sqlite3.c	87423;"	d	file:
sqlite3_compileoption_used	sqlite3.c	/^SQLITE_API int sqlite3_compileoption_used(const char *zOptName){$/;"	f
sqlite3_compileoption_used	sqlite3.c	87424;"	d	file:
sqlite3_complete	sqlite3.c	/^SQLITE_API int sqlite3_complete(const char *zSql){$/;"	f
sqlite3_complete	sqlite3.c	87296;"	d	file:
sqlite3_complete	sqlite3.c	87496;"	d	file:
sqlite3_complete16	sqlite3.c	/^SQLITE_API int sqlite3_complete16(const void *zSql){$/;"	f
sqlite3_complete16	sqlite3.c	87297;"	d	file:
sqlite3_complete16	sqlite3.c	87476;"	d	file:
sqlite3_complete16	sqlite3.c	87497;"	d	file:
sqlite3_config	sqlite3.c	/^SQLITE_API int sqlite3_config(int op, ...){$/;"	f
sqlite3_context	sqlite3.c	/^struct sqlite3_context {$/;"	s	file:
sqlite3_context	sqlite3.c	/^typedef struct sqlite3_context sqlite3_context;$/;"	t	typeref:struct:sqlite3_context	file:
sqlite3_context_db_handle	sqlite3.c	/^SQLITE_API sqlite3 *sqlite3_context_db_handle(sqlite3_context *p){$/;"	f
sqlite3_context_db_handle	sqlite3.c	87412;"	d	file:
sqlite3_create_collation	sqlite3.c	/^SQLITE_API int sqlite3_create_collation($/;"	f
sqlite3_create_collation	sqlite3.c	87298;"	d	file:
sqlite3_create_collation16	sqlite3.c	/^SQLITE_API int sqlite3_create_collation16($/;"	f
sqlite3_create_collation16	sqlite3.c	87299;"	d	file:
sqlite3_create_collation16	sqlite3.c	87477;"	d	file:
sqlite3_create_collation_v2	sqlite3.c	/^SQLITE_API int sqlite3_create_collation_v2($/;"	f
sqlite3_create_collation_v2	sqlite3.c	87389;"	d	file:
sqlite3_create_function	sqlite3.c	/^SQLITE_API int sqlite3_create_function($/;"	f
sqlite3_create_function	sqlite3.c	87300;"	d	file:
sqlite3_create_function16	sqlite3.c	/^SQLITE_API int sqlite3_create_function16($/;"	f
sqlite3_create_function16	sqlite3.c	87301;"	d	file:
sqlite3_create_function16	sqlite3.c	87478;"	d	file:
sqlite3_create_function_v2	sqlite3.c	/^SQLITE_API int sqlite3_create_function_v2($/;"	f
sqlite3_create_function_v2	sqlite3.c	87425;"	d	file:
sqlite3_create_module	sqlite3.c	/^SQLITE_API int sqlite3_create_module($/;"	f
sqlite3_create_module	sqlite3.c	87302;"	d	file:
sqlite3_create_module	sqlite3.c	87510;"	d	file:
sqlite3_create_module_v2	sqlite3.c	/^SQLITE_API int sqlite3_create_module_v2($/;"	f
sqlite3_create_module_v2	sqlite3.c	87303;"	d	file:
sqlite3_create_module_v2	sqlite3.c	87511;"	d	file:
sqlite3_current_time	sqlite3.c	/^SQLITE_API int sqlite3_current_time = 0;  \/* Fake system time in seconds since 1970. *\/$/;"	v
sqlite3_current_time	sqlite3.c	/^SQLITE_API int sqlite3_current_time = 0;$/;"	v
sqlite3_data_count	sqlite3.c	/^SQLITE_API int sqlite3_data_count(sqlite3_stmt *pStmt){$/;"	f
sqlite3_data_count	sqlite3.c	87304;"	d	file:
sqlite3_db_config	sqlite3.c	/^SQLITE_API int sqlite3_db_config(sqlite3 *db, int op, ...){$/;"	f
sqlite3_db_config	sqlite3.c	87426;"	d	file:
sqlite3_db_handle	sqlite3.c	/^SQLITE_API sqlite3 *sqlite3_db_handle(sqlite3_stmt *pStmt){$/;"	f
sqlite3_db_handle	sqlite3.c	87305;"	d	file:
sqlite3_db_mutex	sqlite3.c	/^SQLITE_API sqlite3_mutex *sqlite3_db_mutex(sqlite3 *db){$/;"	f
sqlite3_db_mutex	sqlite3.c	87427;"	d	file:
sqlite3_db_status	sqlite3.c	/^SQLITE_API int sqlite3_db_status($/;"	f
sqlite3_db_status	sqlite3.c	87428;"	d	file:
sqlite3_debug_mutex	sqlite3.c	/^typedef struct sqlite3_debug_mutex {$/;"	s	file:
sqlite3_debug_mutex	sqlite3.c	/^} sqlite3_debug_mutex;$/;"	t	typeref:struct:sqlite3_debug_mutex	file:
sqlite3_declare_vtab	sqlite3.c	/^SQLITE_API int sqlite3_declare_vtab(sqlite3 *db, const char *zCreateTable){$/;"	f
sqlite3_declare_vtab	sqlite3.c	87306;"	d	file:
sqlite3_declare_vtab	sqlite3.c	87512;"	d	file:
sqlite3_destructor_type	sqlite3.c	/^typedef void (*sqlite3_destructor_type)(void*);$/;"	t	file:
sqlite3_diskfull	sqlite3.c	/^SQLITE_API int sqlite3_diskfull = 0;$/;"	v
sqlite3_diskfull_pending	sqlite3.c	/^SQLITE_API int sqlite3_diskfull_pending = 0;$/;"	v
sqlite3_enable_load_extension	sqlite3.c	/^SQLITE_API int sqlite3_enable_load_extension(sqlite3 *db, int onoff){$/;"	f
sqlite3_enable_shared_cache	sqlite3.c	/^SQLITE_API int sqlite3_enable_shared_cache(int enable){$/;"	f
sqlite3_enable_shared_cache	sqlite3.c	87307;"	d	file:
sqlite3_enable_shared_cache	sqlite3.c	87516;"	d	file:
sqlite3_errcode	sqlite3.c	/^SQLITE_API int sqlite3_errcode(sqlite3 *db){$/;"	f
sqlite3_errcode	sqlite3.c	87308;"	d	file:
sqlite3_errmsg	sqlite3.c	/^SQLITE_API const char *sqlite3_errmsg(sqlite3 *db){$/;"	f
sqlite3_errmsg	sqlite3.c	87309;"	d	file:
sqlite3_errmsg16	sqlite3.c	/^SQLITE_API const void *sqlite3_errmsg16(sqlite3 *db){$/;"	f
sqlite3_errmsg16	sqlite3.c	87310;"	d	file:
sqlite3_errmsg16	sqlite3.c	87479;"	d	file:
sqlite3_exec	sqlite3.c	/^SQLITE_API int sqlite3_exec($/;"	f
sqlite3_exec	sqlite3.c	87311;"	d	file:
sqlite3_expired	sqlite3.c	/^SQLITE_API int sqlite3_expired(sqlite3_stmt *pStmt){$/;"	f
sqlite3_expired	sqlite3.c	87313;"	d	file:
sqlite3_extended_errcode	sqlite3.c	/^SQLITE_API int sqlite3_extended_errcode(sqlite3 *db){$/;"	f
sqlite3_extended_errcode	sqlite3.c	87429;"	d	file:
sqlite3_extended_result_codes	sqlite3.c	/^SQLITE_API int sqlite3_extended_result_codes(sqlite3 *db, int onoff){$/;"	f
sqlite3_extended_result_codes	sqlite3.c	87413;"	d	file:
sqlite3_extension_init	sqlite3.c	/^SQLITE_API int sqlite3_extension_init($/;"	f
sqlite3_file	sqlite3.c	/^struct sqlite3_file {$/;"	s	file:
sqlite3_file	sqlite3.c	/^typedef struct sqlite3_file sqlite3_file;$/;"	t	typeref:struct:sqlite3_file	file:
sqlite3_file_control	sqlite3.c	/^SQLITE_API int sqlite3_file_control(sqlite3 *db, const char *zDbName, int op, void *pArg){$/;"	f
sqlite3_file_control	sqlite3.c	87390;"	d	file:
sqlite3_finalize	sqlite3.c	/^SQLITE_API int sqlite3_finalize(sqlite3_stmt *pStmt){$/;"	f
sqlite3_finalize	sqlite3.c	87315;"	d	file:
sqlite3_found_count	sqlite3.c	/^SQLITE_API int sqlite3_found_count = 0;$/;"	v
sqlite3_free	sqlite3.c	/^SQLITE_API void sqlite3_free(void *p){$/;"	f
sqlite3_free	sqlite3.c	87316;"	d	file:
sqlite3_free_table	sqlite3.c	/^SQLITE_API void sqlite3_free_table($/;"	f
sqlite3_free_table	sqlite3.c	87317;"	d	file:
sqlite3_free_table	sqlite3.c	87525;"	d	file:
sqlite3_fts3_enable_parentheses	sqlite3.c	/^SQLITE_API int sqlite3_fts3_enable_parentheses = 0;$/;"	v
sqlite3_fts3_enable_parentheses	sqlite3.c	116978;"	d	file:
sqlite3_fts3_enable_parentheses	sqlite3.c	116980;"	d	file:
sqlite3_fullsync_count	sqlite3.c	/^SQLITE_API int sqlite3_fullsync_count = 0;$/;"	v
sqlite3_get_autocommit	sqlite3.c	/^SQLITE_API int sqlite3_get_autocommit(sqlite3 *db){$/;"	f
sqlite3_get_autocommit	sqlite3.c	87318;"	d	file:
sqlite3_get_auxdata	sqlite3.c	/^SQLITE_API void *sqlite3_get_auxdata(sqlite3_context *pCtx, int iArg){$/;"	f
sqlite3_get_auxdata	sqlite3.c	87319;"	d	file:
sqlite3_get_table	sqlite3.c	/^SQLITE_API int sqlite3_get_table($/;"	f
sqlite3_get_table	sqlite3.c	87320;"	d	file:
sqlite3_get_table	sqlite3.c	87526;"	d	file:
sqlite3_get_table_cb	sqlite3.c	/^static int sqlite3_get_table_cb(void *pArg, int nCol, char **argv, char **colv){$/;"	f	file:
sqlite3_global_recover	sqlite3.c	/^SQLITE_API int sqlite3_global_recover(void){$/;"	f
sqlite3_global_recover	sqlite3.c	87322;"	d	file:
sqlite3_hostid_num	sqlite3.c	/^SQLITE_API int sqlite3_hostid_num = 0;$/;"	v
sqlite3_index_constraint	sqlite3.c	/^  struct sqlite3_index_constraint {$/;"	s	struct:sqlite3_index_info	file:
sqlite3_index_constraint_usage	sqlite3.c	/^  struct sqlite3_index_constraint_usage {$/;"	s	struct:sqlite3_index_info	file:
sqlite3_index_info	sqlite3.c	/^struct sqlite3_index_info {$/;"	s	file:
sqlite3_index_info	sqlite3.c	/^typedef struct sqlite3_index_info sqlite3_index_info;$/;"	t	typeref:struct:sqlite3_index_info	file:
sqlite3_index_orderby	sqlite3.c	/^  struct sqlite3_index_orderby {$/;"	s	struct:sqlite3_index_info	file:
sqlite3_initialize	sqlite3.c	/^SQLITE_API int sqlite3_initialize(void){$/;"	f
sqlite3_int64	sqlite3.c	/^typedef sqlite_int64 sqlite3_int64;$/;"	t	file:
sqlite3_interrupt	sqlite3.c	/^SQLITE_API void sqlite3_interrupt(sqlite3 *db){$/;"	f
sqlite3_interrupt	sqlite3.c	87324;"	d	file:
sqlite3_interrupt_count	sqlite3.c	/^SQLITE_API int sqlite3_interrupt_count = 0;$/;"	v
sqlite3_io_error_benign	sqlite3.c	/^SQLITE_API int sqlite3_io_error_benign = 0;         \/* True if errors are benign *\/$/;"	v
sqlite3_io_error_hardhit	sqlite3.c	/^SQLITE_API int sqlite3_io_error_hardhit = 0;        \/* Number of non-benign errors *\/$/;"	v
sqlite3_io_error_hit	sqlite3.c	/^SQLITE_API int sqlite3_io_error_hit = 0;            \/* Total number of I\/O Errors *\/$/;"	v
sqlite3_io_error_pending	sqlite3.c	/^SQLITE_API int sqlite3_io_error_pending = 0;        \/* Count down to first I\/O error *\/$/;"	v
sqlite3_io_error_persist	sqlite3.c	/^SQLITE_API int sqlite3_io_error_persist = 0;        \/* True if I\/O errors persist *\/$/;"	v
sqlite3_io_methods	sqlite3.c	/^struct sqlite3_io_methods {$/;"	s	file:
sqlite3_io_methods	sqlite3.c	/^typedef struct sqlite3_io_methods sqlite3_io_methods;$/;"	t	typeref:struct:sqlite3_io_methods	file:
sqlite3_last_insert_rowid	sqlite3.c	/^SQLITE_API sqlite_int64 sqlite3_last_insert_rowid(sqlite3 *db){$/;"	f
sqlite3_last_insert_rowid	sqlite3.c	87325;"	d	file:
sqlite3_libversion	sqlite3.c	/^SQLITE_API const char *sqlite3_libversion(void){ return sqlite3_version; }$/;"	f
sqlite3_libversion	sqlite3.c	87326;"	d	file:
sqlite3_libversion_number	sqlite3.c	/^SQLITE_API int sqlite3_libversion_number(void){ return SQLITE_VERSION_NUMBER; }$/;"	f
sqlite3_libversion_number	sqlite3.c	87327;"	d	file:
sqlite3_like_count	sqlite3.c	/^SQLITE_API int sqlite3_like_count = 0;$/;"	v
sqlite3_limit	sqlite3.c	/^SQLITE_API int sqlite3_limit(sqlite3 *db, int limitId, int newLimit){$/;"	f
sqlite3_limit	sqlite3.c	87414;"	d	file:
sqlite3_load_extension	sqlite3.c	/^SQLITE_API int sqlite3_load_extension($/;"	f
sqlite3_log	sqlite3.c	/^SQLITE_API void sqlite3_log(int iErrCode, const char *zFormat, ...){$/;"	f
sqlite3_log	sqlite3.c	87430;"	d	file:
sqlite3_malloc	sqlite3.c	/^SQLITE_API void *sqlite3_malloc(int n){$/;"	f
sqlite3_malloc	sqlite3.c	87328;"	d	file:
sqlite3_max_blobsize	sqlite3.c	/^SQLITE_API int sqlite3_max_blobsize = 0;$/;"	v
sqlite3_mem_methods	sqlite3.c	/^struct sqlite3_mem_methods {$/;"	s	file:
sqlite3_mem_methods	sqlite3.c	/^typedef struct sqlite3_mem_methods sqlite3_mem_methods;$/;"	t	typeref:struct:sqlite3_mem_methods	file:
sqlite3_memdebug_vfs_oom_test	sqlite3.c	/^SQLITE_API int sqlite3_memdebug_vfs_oom_test = 1;$/;"	v
sqlite3_memory_alarm	sqlite3.c	/^SQLITE_API int sqlite3_memory_alarm($/;"	f
sqlite3_memory_highwater	sqlite3.c	/^SQLITE_API sqlite3_int64 sqlite3_memory_highwater(int resetFlag){$/;"	f
sqlite3_memory_highwater	sqlite3.c	87391;"	d	file:
sqlite3_memory_used	sqlite3.c	/^SQLITE_API sqlite3_int64 sqlite3_memory_used(void){$/;"	f
sqlite3_memory_used	sqlite3.c	87392;"	d	file:
sqlite3_module	sqlite3.c	/^struct sqlite3_module {$/;"	s	file:
sqlite3_module	sqlite3.c	/^typedef struct sqlite3_module sqlite3_module;$/;"	t	typeref:struct:sqlite3_module	file:
sqlite3_mprintf	sqlite3.c	/^SQLITE_API char *sqlite3_mprintf(const char *zFormat, ...){$/;"	f
sqlite3_mprintf	sqlite3.c	87329;"	d	file:
sqlite3_mutex	sqlite3.c	/^struct sqlite3_mutex {$/;"	s	file:
sqlite3_mutex	sqlite3.c	/^typedef struct sqlite3_mutex sqlite3_mutex;$/;"	t	typeref:struct:sqlite3_mutex	file:
sqlite3_mutex_alloc	sqlite3.c	/^SQLITE_API sqlite3_mutex *sqlite3_mutex_alloc(int id){$/;"	f
sqlite3_mutex_alloc	sqlite3.c	87393;"	d	file:
sqlite3_mutex_alloc	sqlite3.c	9243;"	d	file:
sqlite3_mutex_enter	sqlite3.c	/^SQLITE_API void sqlite3_mutex_enter(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_enter	sqlite3.c	87394;"	d	file:
sqlite3_mutex_enter	sqlite3.c	9245;"	d	file:
sqlite3_mutex_free	sqlite3.c	/^SQLITE_API void sqlite3_mutex_free(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_free	sqlite3.c	87395;"	d	file:
sqlite3_mutex_free	sqlite3.c	9244;"	d	file:
sqlite3_mutex_held	sqlite3.c	/^SQLITE_API int sqlite3_mutex_held(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_held	sqlite3.c	9248;"	d	file:
sqlite3_mutex_leave	sqlite3.c	/^SQLITE_API void sqlite3_mutex_leave(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_leave	sqlite3.c	87396;"	d	file:
sqlite3_mutex_leave	sqlite3.c	9247;"	d	file:
sqlite3_mutex_methods	sqlite3.c	/^struct sqlite3_mutex_methods {$/;"	s	file:
sqlite3_mutex_methods	sqlite3.c	/^typedef struct sqlite3_mutex_methods sqlite3_mutex_methods;$/;"	t	typeref:struct:sqlite3_mutex_methods	file:
sqlite3_mutex_notheld	sqlite3.c	/^SQLITE_API int sqlite3_mutex_notheld(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_notheld	sqlite3.c	9249;"	d	file:
sqlite3_mutex_try	sqlite3.c	/^SQLITE_API int sqlite3_mutex_try(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_try	sqlite3.c	87397;"	d	file:
sqlite3_mutex_try	sqlite3.c	9246;"	d	file:
sqlite3_next_stmt	sqlite3.c	/^SQLITE_API sqlite3_stmt *sqlite3_next_stmt(sqlite3 *pDb, sqlite3_stmt *pStmt){$/;"	f
sqlite3_next_stmt	sqlite3.c	87415;"	d	file:
sqlite3_open	sqlite3.c	/^SQLITE_API int sqlite3_open($/;"	f
sqlite3_open	sqlite3.c	87330;"	d	file:
sqlite3_open16	sqlite3.c	/^SQLITE_API int sqlite3_open16($/;"	f
sqlite3_open16	sqlite3.c	87331;"	d	file:
sqlite3_open16	sqlite3.c	87480;"	d	file:
sqlite3_open_file_count	sqlite3.c	/^SQLITE_API int sqlite3_open_file_count = 0;$/;"	v
sqlite3_open_v2	sqlite3.c	/^SQLITE_API int sqlite3_open_v2($/;"	f
sqlite3_open_v2	sqlite3.c	87398;"	d	file:
sqlite3_opentemp_count	sqlite3.c	/^SQLITE_API int sqlite3_opentemp_count = 0;$/;"	v
sqlite3_os_end	sqlite3.c	/^SQLITE_API int sqlite3_os_end(void){ $/;"	f
sqlite3_os_end	sqlite3.c	/^SQLITE_API int sqlite3_os_end(void){$/;"	f
sqlite3_os_init	sqlite3.c	/^SQLITE_API int sqlite3_os_init(void){ $/;"	f
sqlite3_os_init	sqlite3.c	/^SQLITE_API int sqlite3_os_init(void){$/;"	f
sqlite3_os_type	sqlite3.c	/^SQLITE_API int sqlite3_os_type = 0;$/;"	v
sqlite3_os_type	sqlite3.c	/^static int sqlite3_os_type = 0;$/;"	v	file:
sqlite3_overload_function	sqlite3.c	/^SQLITE_API int sqlite3_overload_function($/;"	f
sqlite3_overload_function	sqlite3.c	87379;"	d	file:
sqlite3_pager_readdb_count	sqlite3.c	/^SQLITE_API int sqlite3_pager_readdb_count = 0;    \/* Number of full pages read from DB *\/$/;"	v
sqlite3_pager_writedb_count	sqlite3.c	/^SQLITE_API int sqlite3_pager_writedb_count = 0;   \/* Number of full pages written to DB *\/$/;"	v
sqlite3_pager_writej_count	sqlite3.c	/^SQLITE_API int sqlite3_pager_writej_count = 0;    \/* Number of pages written to journal *\/$/;"	v
sqlite3_pcache	sqlite3.c	/^typedef struct sqlite3_pcache sqlite3_pcache;$/;"	t	typeref:struct:sqlite3_pcache	file:
sqlite3_pcache_methods	sqlite3.c	/^struct sqlite3_pcache_methods {$/;"	s	file:
sqlite3_pcache_methods	sqlite3.c	/^typedef struct sqlite3_pcache_methods sqlite3_pcache_methods;$/;"	t	typeref:struct:sqlite3_pcache_methods	file:
sqlite3_prepare	sqlite3.c	/^SQLITE_API int sqlite3_prepare($/;"	f
sqlite3_prepare	sqlite3.c	87332;"	d	file:
sqlite3_prepare16	sqlite3.c	/^SQLITE_API int sqlite3_prepare16($/;"	f
sqlite3_prepare16	sqlite3.c	87333;"	d	file:
sqlite3_prepare16	sqlite3.c	87481;"	d	file:
sqlite3_prepare16_v2	sqlite3.c	/^SQLITE_API int sqlite3_prepare16_v2($/;"	f
sqlite3_prepare16_v2	sqlite3.c	87335;"	d	file:
sqlite3_prepare16_v2	sqlite3.c	87381;"	d	file:
sqlite3_prepare16_v2	sqlite3.c	87482;"	d	file:
sqlite3_prepare_v2	sqlite3.c	/^SQLITE_API int sqlite3_prepare_v2($/;"	f
sqlite3_prepare_v2	sqlite3.c	87334;"	d	file:
sqlite3_prepare_v2	sqlite3.c	87380;"	d	file:
sqlite3_profile	sqlite3.c	/^SQLITE_API void *sqlite3_profile($/;"	f
sqlite3_profile	sqlite3.c	87336;"	d	file:
sqlite3_profile	sqlite3.c	87520;"	d	file:
sqlite3_progress_handler	sqlite3.c	/^SQLITE_API void sqlite3_progress_handler($/;"	f
sqlite3_progress_handler	sqlite3.c	87337;"	d	file:
sqlite3_progress_handler	sqlite3.c	87506;"	d	file:
sqlite3_query_plan	sqlite3.c	/^SQLITE_API char sqlite3_query_plan[BMS*2*40];  \/* Text of the join *\/$/;"	v
sqlite3_randomness	sqlite3.c	/^SQLITE_API void sqlite3_randomness(int N, void *pBuf){$/;"	f
sqlite3_randomness	sqlite3.c	87411;"	d	file:
sqlite3_realloc	sqlite3.c	/^SQLITE_API void *sqlite3_realloc(void *pOld, int n){$/;"	f
sqlite3_realloc	sqlite3.c	87338;"	d	file:
sqlite3_release_memory	sqlite3.c	/^SQLITE_API int sqlite3_release_memory(int n){$/;"	f
sqlite3_release_memory	sqlite3.c	87399;"	d	file:
sqlite3_reset	sqlite3.c	/^SQLITE_API int sqlite3_reset(sqlite3_stmt *pStmt){$/;"	f
sqlite3_reset	sqlite3.c	87339;"	d	file:
sqlite3_reset_auto_extension	sqlite3.c	/^SQLITE_API void sqlite3_reset_auto_extension(void){$/;"	f
sqlite3_result_blob	sqlite3.c	/^SQLITE_API void sqlite3_result_blob($/;"	f
sqlite3_result_blob	sqlite3.c	87340;"	d	file:
sqlite3_result_double	sqlite3.c	/^SQLITE_API void sqlite3_result_double(sqlite3_context *pCtx, double rVal){$/;"	f
sqlite3_result_double	sqlite3.c	87341;"	d	file:
sqlite3_result_error	sqlite3.c	/^SQLITE_API void sqlite3_result_error(sqlite3_context *pCtx, const char *z, int n){$/;"	f
sqlite3_result_error	sqlite3.c	87342;"	d	file:
sqlite3_result_error16	sqlite3.c	/^SQLITE_API void sqlite3_result_error16(sqlite3_context *pCtx, const void *z, int n){$/;"	f
sqlite3_result_error16	sqlite3.c	87343;"	d	file:
sqlite3_result_error16	sqlite3.c	87483;"	d	file:
sqlite3_result_error_code	sqlite3.c	/^SQLITE_API void sqlite3_result_error_code(sqlite3_context *pCtx, int errCode){$/;"	f
sqlite3_result_error_code	sqlite3.c	87409;"	d	file:
sqlite3_result_error_nomem	sqlite3.c	/^SQLITE_API void sqlite3_result_error_nomem(sqlite3_context *pCtx){$/;"	f
sqlite3_result_error_nomem	sqlite3.c	87400;"	d	file:
sqlite3_result_error_toobig	sqlite3.c	/^SQLITE_API void sqlite3_result_error_toobig(sqlite3_context *pCtx){$/;"	f
sqlite3_result_error_toobig	sqlite3.c	87401;"	d	file:
sqlite3_result_int	sqlite3.c	/^SQLITE_API void sqlite3_result_int(sqlite3_context *pCtx, int iVal){$/;"	f
sqlite3_result_int	sqlite3.c	87344;"	d	file:
sqlite3_result_int64	sqlite3.c	/^SQLITE_API void sqlite3_result_int64(sqlite3_context *pCtx, i64 iVal){$/;"	f
sqlite3_result_int64	sqlite3.c	87345;"	d	file:
sqlite3_result_null	sqlite3.c	/^SQLITE_API void sqlite3_result_null(sqlite3_context *pCtx){$/;"	f
sqlite3_result_null	sqlite3.c	87346;"	d	file:
sqlite3_result_text	sqlite3.c	/^SQLITE_API void sqlite3_result_text($/;"	f
sqlite3_result_text	sqlite3.c	87347;"	d	file:
sqlite3_result_text16	sqlite3.c	/^SQLITE_API void sqlite3_result_text16($/;"	f
sqlite3_result_text16	sqlite3.c	87348;"	d	file:
sqlite3_result_text16	sqlite3.c	87484;"	d	file:
sqlite3_result_text16be	sqlite3.c	/^SQLITE_API void sqlite3_result_text16be($/;"	f
sqlite3_result_text16be	sqlite3.c	87349;"	d	file:
sqlite3_result_text16be	sqlite3.c	87485;"	d	file:
sqlite3_result_text16le	sqlite3.c	/^SQLITE_API void sqlite3_result_text16le($/;"	f
sqlite3_result_text16le	sqlite3.c	87350;"	d	file:
sqlite3_result_text16le	sqlite3.c	87486;"	d	file:
sqlite3_result_value	sqlite3.c	/^SQLITE_API void sqlite3_result_value(sqlite3_context *pCtx, sqlite3_value *pValue){$/;"	f
sqlite3_result_value	sqlite3.c	87351;"	d	file:
sqlite3_result_zeroblob	sqlite3.c	/^SQLITE_API void sqlite3_result_zeroblob(sqlite3_context *pCtx, int n){$/;"	f
sqlite3_result_zeroblob	sqlite3.c	87408;"	d	file:
sqlite3_rollback_hook	sqlite3.c	/^SQLITE_API void *sqlite3_rollback_hook($/;"	f
sqlite3_rollback_hook	sqlite3.c	87352;"	d	file:
sqlite3_rtree_geometry	sqlite3.c	/^struct sqlite3_rtree_geometry {$/;"	s	file:
sqlite3_rtree_geometry	sqlite3.c	/^typedef struct sqlite3_rtree_geometry sqlite3_rtree_geometry;$/;"	t	typeref:struct:sqlite3_rtree_geometry	file:
sqlite3_rtree_geometry_callback	sqlite3.c	/^SQLITE_API int sqlite3_rtree_geometry_callback($/;"	f
sqlite3_search_count	sqlite3.c	/^SQLITE_API int sqlite3_search_count = 0;$/;"	v
sqlite3_set_authorizer	sqlite3.c	/^SQLITE_API int sqlite3_set_authorizer($/;"	f
sqlite3_set_authorizer	sqlite3.c	87353;"	d	file:
sqlite3_set_authorizer	sqlite3.c	87467;"	d	file:
sqlite3_set_auxdata	sqlite3.c	/^SQLITE_API void sqlite3_set_auxdata($/;"	f
sqlite3_set_auxdata	sqlite3.c	87354;"	d	file:
sqlite3_shutdown	sqlite3.c	/^SQLITE_API int sqlite3_shutdown(void){$/;"	f
sqlite3_sleep	sqlite3.c	/^SQLITE_API int sqlite3_sleep(int ms){$/;"	f
sqlite3_sleep	sqlite3.c	87402;"	d	file:
sqlite3_snprintf	sqlite3.c	/^SQLITE_API char *sqlite3_snprintf(int n, char *zBuf, const char *zFormat, ...){$/;"	f
sqlite3_snprintf	sqlite3.c	87355;"	d	file:
sqlite3_soft_heap_limit	sqlite3.c	/^SQLITE_API void sqlite3_soft_heap_limit(int n){$/;"	f
sqlite3_soft_heap_limit	sqlite3.c	87403;"	d	file:
sqlite3_soft_heap_limit64	sqlite3.c	/^SQLITE_API sqlite3_int64 sqlite3_soft_heap_limit64(sqlite3_int64 n){$/;"	f
sqlite3_soft_heap_limit64	sqlite3.c	87431;"	d	file:
sqlite3_sort_count	sqlite3.c	/^SQLITE_API int sqlite3_sort_count = 0;$/;"	v
sqlite3_sourceid	sqlite3.c	/^SQLITE_API const char *sqlite3_sourceid(void){ return SQLITE_SOURCE_ID; }$/;"	f
sqlite3_sourceid	sqlite3.c	87432;"	d	file:
sqlite3_sql	sqlite3.c	/^SQLITE_API const char *sqlite3_sql(sqlite3_stmt *pStmt){$/;"	f
sqlite3_sql	sqlite3.c	87416;"	d	file:
sqlite3_status	sqlite3.c	/^SQLITE_API int sqlite3_status(int op, int *pCurrent, int *pHighwater, int resetFlag){$/;"	f
sqlite3_status	sqlite3.c	87417;"	d	file:
sqlite3_step	sqlite3.c	/^SQLITE_API int sqlite3_step(sqlite3_stmt *pStmt){$/;"	f
sqlite3_step	sqlite3.c	87356;"	d	file:
sqlite3_stmt	sqlite3.c	/^typedef struct sqlite3_stmt sqlite3_stmt;$/;"	t	typeref:struct:sqlite3_stmt	file:
sqlite3_stmt_readonly	sqlite3.c	/^SQLITE_API int sqlite3_stmt_readonly(sqlite3_stmt *pStmt){$/;"	f
sqlite3_stmt_status	sqlite3.c	/^SQLITE_API int sqlite3_stmt_status(sqlite3_stmt *pStmt, int op, int resetFlag){$/;"	f
sqlite3_stmt_status	sqlite3.c	87433;"	d	file:
sqlite3_strnicmp	sqlite3.c	/^SQLITE_API int sqlite3_strnicmp(const char *zLeft, const char *zRight, int N){$/;"	f
sqlite3_strnicmp	sqlite3.c	87434;"	d	file:
sqlite3_sync_count	sqlite3.c	/^SQLITE_API int sqlite3_sync_count = 0;$/;"	v
sqlite3_syscall_ptr	sqlite3.c	/^typedef void (*sqlite3_syscall_ptr)(void);$/;"	t	file:
sqlite3_table_column_metadata	sqlite3.c	/^SQLITE_API int sqlite3_table_column_metadata($/;"	f
sqlite3_table_column_metadata	sqlite3.c	87357;"	d	file:
sqlite3_table_column_metadata	sqlite3.c	87463;"	d	file:
sqlite3_temp_directory	sqlite3.c	/^SQLITE_API char *sqlite3_temp_directory = 0;$/;"	v
sqlite3_temp_directory	sqlite3.c	/^SQLITE_API char *sqlite3_temp_directory;$/;"	v
sqlite3_test_control	sqlite3.c	/^SQLITE_API int sqlite3_test_control(int op, ...){$/;"	f
sqlite3_test_control	sqlite3.c	87410;"	d	file:
sqlite3_thread_cleanup	sqlite3.c	/^SQLITE_API void sqlite3_thread_cleanup(void){$/;"	f
sqlite3_thread_cleanup	sqlite3.c	87358;"	d	file:
sqlite3_threadsafe	sqlite3.c	/^SQLITE_API int sqlite3_threadsafe(void){ return SQLITE_THREADSAFE; }$/;"	f
sqlite3_threadsafe	sqlite3.c	87407;"	d	file:
sqlite3_tokenizer	sqlite3.c	/^struct sqlite3_tokenizer {$/;"	s	file:
sqlite3_tokenizer	sqlite3.c	/^typedef struct sqlite3_tokenizer sqlite3_tokenizer;$/;"	t	typeref:struct:sqlite3_tokenizer	file:
sqlite3_tokenizer_cursor	sqlite3.c	/^struct sqlite3_tokenizer_cursor {$/;"	s	file:
sqlite3_tokenizer_cursor	sqlite3.c	/^typedef struct sqlite3_tokenizer_cursor sqlite3_tokenizer_cursor;$/;"	t	typeref:struct:sqlite3_tokenizer_cursor	file:
sqlite3_tokenizer_module	sqlite3.c	/^struct sqlite3_tokenizer_module {$/;"	s	file:
sqlite3_tokenizer_module	sqlite3.c	/^typedef struct sqlite3_tokenizer_module sqlite3_tokenizer_module;$/;"	t	typeref:struct:sqlite3_tokenizer_module	file:
sqlite3_total_changes	sqlite3.c	/^SQLITE_API int sqlite3_total_changes(sqlite3 *db){$/;"	f
sqlite3_total_changes	sqlite3.c	87359;"	d	file:
sqlite3_trace	sqlite3.c	/^SQLITE_API void *sqlite3_trace(sqlite3 *db, void (*xTrace)(void*,const char*), void *pArg){$/;"	f
sqlite3_trace	sqlite3.c	87360;"	d	file:
sqlite3_trace	sqlite3.c	87521;"	d	file:
sqlite3_transfer_bindings	sqlite3.c	/^SQLITE_API int sqlite3_transfer_bindings(sqlite3_stmt *pFromStmt, sqlite3_stmt *pToStmt){$/;"	f
sqlite3_transfer_bindings	sqlite3.c	87362;"	d	file:
sqlite3_uint64	sqlite3.c	/^typedef sqlite_uint64 sqlite3_uint64;$/;"	t	file:
sqlite3_unlock_notify	sqlite3.c	/^SQLITE_API int sqlite3_unlock_notify($/;"	f
sqlite3_unlock_notify	sqlite3.c	87435;"	d	file:
sqlite3_update_hook	sqlite3.c	/^SQLITE_API void *sqlite3_update_hook($/;"	f
sqlite3_update_hook	sqlite3.c	87364;"	d	file:
sqlite3_uri_parameter	sqlite3.c	/^SQLITE_API const char *sqlite3_uri_parameter(const char *zFilename, const char *zParam){$/;"	f
sqlite3_user_data	sqlite3.c	/^SQLITE_API void *sqlite3_user_data(sqlite3_context *p){$/;"	f
sqlite3_user_data	sqlite3.c	87365;"	d	file:
sqlite3_value	sqlite3.c	/^typedef struct Mem sqlite3_value;$/;"	t	typeref:struct:Mem	file:
sqlite3_value_blob	sqlite3.c	/^SQLITE_API const void *sqlite3_value_blob(sqlite3_value *pVal){$/;"	f
sqlite3_value_blob	sqlite3.c	87366;"	d	file:
sqlite3_value_bytes	sqlite3.c	/^SQLITE_API int sqlite3_value_bytes(sqlite3_value *pVal){$/;"	f
sqlite3_value_bytes	sqlite3.c	87367;"	d	file:
sqlite3_value_bytes16	sqlite3.c	/^SQLITE_API int sqlite3_value_bytes16(sqlite3_value *pVal){$/;"	f
sqlite3_value_bytes16	sqlite3.c	87368;"	d	file:
sqlite3_value_double	sqlite3.c	/^SQLITE_API double sqlite3_value_double(sqlite3_value *pVal){$/;"	f
sqlite3_value_double	sqlite3.c	87369;"	d	file:
sqlite3_value_int	sqlite3.c	/^SQLITE_API int sqlite3_value_int(sqlite3_value *pVal){$/;"	f
sqlite3_value_int	sqlite3.c	87370;"	d	file:
sqlite3_value_int64	sqlite3.c	/^SQLITE_API sqlite_int64 sqlite3_value_int64(sqlite3_value *pVal){$/;"	f
sqlite3_value_int64	sqlite3.c	87371;"	d	file:
sqlite3_value_numeric_type	sqlite3.c	/^SQLITE_API int sqlite3_value_numeric_type(sqlite3_value *pVal){$/;"	f
sqlite3_value_numeric_type	sqlite3.c	87372;"	d	file:
sqlite3_value_text	sqlite3.c	/^SQLITE_API const unsigned char *sqlite3_value_text(sqlite3_value *pVal){$/;"	f
sqlite3_value_text	sqlite3.c	87373;"	d	file:
sqlite3_value_text16	sqlite3.c	/^SQLITE_API const void *sqlite3_value_text16(sqlite3_value* pVal){$/;"	f
sqlite3_value_text16	sqlite3.c	87374;"	d	file:
sqlite3_value_text16	sqlite3.c	87487;"	d	file:
sqlite3_value_text16be	sqlite3.c	/^SQLITE_API const void *sqlite3_value_text16be(sqlite3_value *pVal){$/;"	f
sqlite3_value_text16be	sqlite3.c	87375;"	d	file:
sqlite3_value_text16be	sqlite3.c	87488;"	d	file:
sqlite3_value_text16le	sqlite3.c	/^SQLITE_API const void *sqlite3_value_text16le(sqlite3_value *pVal){$/;"	f
sqlite3_value_text16le	sqlite3.c	87376;"	d	file:
sqlite3_value_text16le	sqlite3.c	87489;"	d	file:
sqlite3_value_type	sqlite3.c	/^SQLITE_API int sqlite3_value_type(sqlite3_value* pVal){$/;"	f
sqlite3_value_type	sqlite3.c	87377;"	d	file:
sqlite3_version	sqlite3.c	/^SQLITE_API const char sqlite3_version[] = SQLITE_VERSION;$/;"	v
sqlite3_vfs	sqlite3.c	/^struct sqlite3_vfs {$/;"	s	file:
sqlite3_vfs	sqlite3.c	/^typedef struct sqlite3_vfs sqlite3_vfs;$/;"	t	typeref:struct:sqlite3_vfs	file:
sqlite3_vfs_find	sqlite3.c	/^SQLITE_API sqlite3_vfs *sqlite3_vfs_find(const char *zVfs){$/;"	f
sqlite3_vfs_find	sqlite3.c	87404;"	d	file:
sqlite3_vfs_register	sqlite3.c	/^SQLITE_API int sqlite3_vfs_register(sqlite3_vfs *pVfs, int makeDflt){$/;"	f
sqlite3_vfs_register	sqlite3.c	87405;"	d	file:
sqlite3_vfs_unregister	sqlite3.c	/^SQLITE_API int sqlite3_vfs_unregister(sqlite3_vfs *pVfs){$/;"	f
sqlite3_vfs_unregister	sqlite3.c	87406;"	d	file:
sqlite3_vmprintf	sqlite3.c	/^SQLITE_API char *sqlite3_vmprintf(const char *zFormat, va_list ap){$/;"	f
sqlite3_vmprintf	sqlite3.c	87378;"	d	file:
sqlite3_vsnprintf	sqlite3.c	/^SQLITE_API char *sqlite3_vsnprintf(int n, char *zBuf, const char *zFormat, va_list ap){$/;"	f
sqlite3_vtab	sqlite3.c	/^struct sqlite3_vtab {$/;"	s	file:
sqlite3_vtab	sqlite3.c	/^typedef struct sqlite3_vtab sqlite3_vtab;$/;"	t	typeref:struct:sqlite3_vtab	file:
sqlite3_vtab_config	sqlite3.c	/^SQLITE_API int sqlite3_vtab_config(sqlite3 *db, int op, ...){$/;"	f
sqlite3_vtab_cursor	sqlite3.c	/^struct sqlite3_vtab_cursor {$/;"	s	file:
sqlite3_vtab_cursor	sqlite3.c	/^typedef struct sqlite3_vtab_cursor sqlite3_vtab_cursor;$/;"	t	typeref:struct:sqlite3_vtab_cursor	file:
sqlite3_vtab_on_conflict	sqlite3.c	/^SQLITE_API int sqlite3_vtab_on_conflict(sqlite3 *db){$/;"	f
sqlite3_wal_autocheckpoint	sqlite3.c	/^SQLITE_API int sqlite3_wal_autocheckpoint(sqlite3 *db, int nFrame){$/;"	f
sqlite3_wal_autocheckpoint	sqlite3.c	87436;"	d	file:
sqlite3_wal_checkpoint	sqlite3.c	/^SQLITE_API int sqlite3_wal_checkpoint(sqlite3 *db, const char *zDb){$/;"	f
sqlite3_wal_checkpoint	sqlite3.c	87437;"	d	file:
sqlite3_wal_checkpoint_v2	sqlite3.c	/^SQLITE_API int sqlite3_wal_checkpoint_v2($/;"	f
sqlite3_wal_hook	sqlite3.c	/^SQLITE_API void *sqlite3_wal_hook($/;"	f
sqlite3_wal_hook	sqlite3.c	87438;"	d	file:
sqlite3_win32_mbcs_to_utf8	sqlite3.c	/^SQLITE_API char *sqlite3_win32_mbcs_to_utf8(const char *zFilename){$/;"	f
sqlite3_win32_utf8_to_mbcs	sqlite3.c	/^SQLITE_API char *sqlite3_win32_utf8_to_mbcs(const char *zFilename){$/;"	f
sqlite3_xferopt_count	sqlite3.c	/^SQLITE_API int sqlite3_xferopt_count;$/;"	v
sqlite3one	sqlite3.c	/^SQLITE_PRIVATE const int sqlite3one = 1;$/;"	v
sqlite3one	sqlite3.c	/^SQLITE_PRIVATE const int sqlite3one;$/;"	v
sqliteAuthBadReturnCode	sqlite3.c	/^static void sqliteAuthBadReturnCode(Parse *pParse){$/;"	f	file:
sqliteDefaultBusyCallback	sqlite3.c	/^static int sqliteDefaultBusyCallback($/;"	f	file:
sqliteDeleteColumnNames	sqlite3.c	/^static void sqliteDeleteColumnNames(sqlite3 *db, Table *pTable){$/;"	f	file:
sqliteErrorFromPosixError	sqlite3.c	/^static int sqliteErrorFromPosixError(int posixError, int sqliteIOErr) {$/;"	f	file:
sqliteHashData	sqlite3.c	7366;"	d	file:
sqliteHashFirst	sqlite3.c	7364;"	d	file:
sqliteHashNext	sqlite3.c	7365;"	d	file:
sqliteProcessJoin	sqlite3.c	/^static int sqliteProcessJoin(Parse *pParse, Select *p){$/;"	f	file:
sqliteViewResetAll	sqlite3.c	/^static void sqliteViewResetAll(sqlite3 *db, int idx){$/;"	f	file:
sqliteViewResetAll	sqlite3.c	79187;"	d	file:
sqlite_int64	sqlite3.c	/^  typedef SQLITE_INT64_TYPE sqlite_int64;$/;"	t	file:
sqlite_int64	sqlite3.c	/^  typedef __int64 sqlite_int64;$/;"	t	file:
sqlite_int64	sqlite3.c	/^  typedef long long int sqlite_int64;$/;"	t	file:
sqlite_uint64	sqlite3.c	/^  typedef unsigned SQLITE_INT64_TYPE sqlite_uint64;$/;"	t	file:
sqlite_uint64	sqlite3.c	/^  typedef unsigned __int64 sqlite_uint64;$/;"	t	file:
sqlite_uint64	sqlite3.c	/^  typedef unsigned long long int sqlite_uint64;$/;"	t	file:
srand	CRandom.cpp	/^void CRandom::srand (long unsigned i) {$/;"	f	class:CRandom
star_oh	sqlite3.c	/^static int star_oh(const char *z){$/;"	f	file:
startEndFlag	sqlite3.c	/^  unsigned char startEndFlag;       \/* 1=rel to end of fork, 0=rel to start *\/$/;"	m	struct:ByteRangeLockPB2	file:
startTime	sqlite3.c	/^  i64 startTime;          \/* Time when query started - used for profiling *\/$/;"	m	struct:Vdbe	file:
state	ModelParams.cpp	/^vector<string> HMM_PP::ModelParams::HiddenStateParams::state(const vector<uint>& s) const {$/;"	f	class:HMM_PP::ModelParams::HiddenStateParams
state	ModelParams.cpp	/^vector<uint> HMM_PP::ModelParams::HiddenStateParams::state(const vector<string>& s) const {$/;"	f	class:HMM_PP::ModelParams::HiddenStateParams
stateno	sqlite3.c	/^  YYACTIONTYPE stateno;  \/* The state-number *\/$/;"	m	struct:yyStackEntry	file:
status	sqlite3.c	/^  int (*status)(int,int*,int*,int);$/;"	m	struct:sqlite3_api_routines	file:
stem	sqlite3.c	/^static int stem($/;"	f	file:
step	sqlite3.c	/^  int  (*step)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
step	sqlwrap.cpp	/^bool SQL::step(sqlite3_stmt* stmt) {$/;"	f	class:SQL
step_list	sqlite3.c	/^  TriggerStep *step_list; \/* Link list of trigger program steps             *\/$/;"	m	struct:Trigger	file:
stmt_status	sqlite3.c	/^  int (*stmt_status)(sqlite3_stmt*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
strHash	sqlite3.c	/^static unsigned int strHash(const char *z, int nKey){$/;"	f	file:
strftimeFunc	sqlite3.c	/^static void strftimeFunc($/;"	f	file:
strnicmp	sqlite3.c	/^  int (*strnicmp)(const char*,const char*,int);$/;"	m	struct:sqlite3_api_routines	file:
subjInMemory	sqlite3.c	/^  u8 subjInMemory;            \/* True to use in-memory sub-journals *\/$/;"	m	struct:Pager	file:
subjRequiresPage	sqlite3.c	/^static int subjRequiresPage(PgHdr *pPg){$/;"	f	file:
subjournalPage	sqlite3.c	/^static int subjournalPage(PgHdr *pPg){$/;"	f	file:
substExpr	sqlite3.c	/^static Expr *substExpr($/;"	f	file:
substExprList	sqlite3.c	/^static void substExprList($/;"	f	file:
substSelect	sqlite3.c	/^static void substSelect($/;"	f	file:
substrFunc	sqlite3.c	/^static void substrFunc($/;"	f	file:
sumFinalize	sqlite3.c	/^static void sumFinalize(sqlite3_context *context){$/;"	f	file:
sumStep	sqlite3.c	/^static void sumStep(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
suppressErr	sqlite3.c	/^  u8 suppressErr;               \/* Do not issue error messages if true *\/$/;"	m	struct:sqlite3	file:
swapMixedEndianFloat	sqlite3.c	60203;"	d	file:
swapMixedEndianFloat	sqlite3.c	60205;"	d	file:
switchLockProxyPath	sqlite3.c	/^static int switchLockProxyPath(unixFile *pFile, const char *path) {$/;"	f	file:
syncFlags	sqlite3.c	/^  u8 syncFlags;               \/* SYNC_NORMAL or SYNC_FULL otherwise *\/$/;"	m	struct:Pager	file:
syncJournal	sqlite3.c	/^static int syncJournal(Pager *pPager, int newHdr){$/;"	f	file:
synchronous	sqlwrap.cpp	/^void SQL::synchronous(bool b) {$/;"	f	class:SQL
synthCollSeq	sqlite3.c	/^static int synthCollSeq(sqlite3 *db, CollSeq *pColl){$/;"	f	file:
sz	sqlite3.c	/^  u16 sz;                 \/* Size of each buffer in bytes *\/$/;"	m	struct:Lookaside	file:
szAtom	sqlite3.c	/^  int szAtom;      \/* Smallest possible allocation in bytes *\/$/;"	m	struct:Mem5Global	file:
szChunk	sqlite3.c	/^  int szChunk;                        \/* Configured by FCNTL_CHUNK_SIZE *\/$/;"	m	struct:unixFile	file:
szChunk	sqlite3.c	/^  int szChunk;              \/* Chunk size configured by FCNTL_CHUNK_SIZE *\/$/;"	m	struct:os2File	file:
szChunk	sqlite3.c	/^  int szChunk;            \/* Chunk size configured by FCNTL_CHUNK_SIZE *\/$/;"	m	struct:winFile	file:
szExtra	sqlite3.c	/^  int szExtra;                        \/* Size of extra space for each page *\/$/;"	m	struct:PCache	file:
szLookaside	sqlite3.c	/^  int szLookaside;                  \/* Default lookaside buffer size *\/$/;"	m	struct:Sqlite3Config	file:
szMaster	sqlite3.c	/^  u32 szMaster;$/;"	m	struct:Mem3Global	file:
szOsFile	sqlite3.c	/^  int szOsFile;            \/* Size of subclassed sqlite3_file *\/$/;"	m	struct:sqlite3_vfs	file:
szPage	sqlite3.c	/^  int szPage;                         \/* Size of allocated pages in bytes *\/$/;"	m	struct:PCache1	file:
szPage	sqlite3.c	/^  int szPage;                         \/* Size of every page in this cache *\/$/;"	m	struct:PCache	file:
szPage	sqlite3.c	/^  int szPage;                       \/* Size of each page in pPage[] *\/$/;"	m	struct:Sqlite3Config	file:
szPage	sqlite3.c	/^  u16 szPage;                     \/* Database page size in bytes. 1==64K *\/$/;"	m	struct:WalIndexHdr	file:
szPage	sqlite3.c	/^  u32 szPage;                \/* Database page size *\/$/;"	m	struct:Wal	file:
szRegion	sqlite3.c	/^  int szRegion;              \/* Size of shared-memory regions *\/$/;"	m	struct:os2ShmNode	file:
szRegion	sqlite3.c	/^  int szRegion;              \/* Size of shared-memory regions *\/$/;"	m	struct:unixShmNode	file:
szRegion	sqlite3.c	/^  int szRegion;              \/* Size of shared-memory regions *\/$/;"	m	struct:winShmNode	file:
szScratch	sqlite3.c	/^  int szScratch;                    \/* Size of each scratch buffer *\/$/;"	m	struct:Sqlite3Config	file:
szSlot	sqlite3.c	/^  int szSlot;                    \/* Size of each free slot *\/$/;"	m	struct:PCacheGlobal	file:
tabFlags	sqlite3.c	/^  u8 tabFlags;         \/* Mask of TF_* values *\/$/;"	m	struct:Table	file:
table	sqlite3.c	/^  char *table;            \/* The table or view to which the trigger applies *\/$/;"	m	struct:Trigger	file:
tableAndColumnIndex	sqlite3.c	/^static int tableAndColumnIndex($/;"	f	file:
tableOfTrigger	sqlite3.c	/^static Table *tableOfTrigger(Trigger *pTrigger){$/;"	f	file:
table_column_metadata	sqlite3.c	/^  int  (*table_column_metadata)(sqlite3*,const char*,const char*,const char*,char const**,char const**,int*,int*,int*);$/;"	m	struct:sqlite3_api_routines	file:
table_exists	sqlwrap.cpp	/^bool SQL::table_exists(const string& table_name) {$/;"	f	class:SQL
target	sqlite3.c	/^  Token target;        \/* Target table for DELETE, UPDATE, INSERT *\/$/;"	m	struct:TriggerStep	file:
targetSrcList	sqlite3.c	/^static SrcList *targetSrcList($/;"	f	file:
tblHash	sqlite3.c	/^  Hash tblHash;        \/* All tables indexed by name *\/$/;"	m	struct:Schema	file:
tempFile	sqlite3.c	/^  u8 tempFile;                \/* zFilename is a temporary file *\/$/;"	m	struct:Pager	file:
tempReg	sqlite3.c	/^    u8 tempReg;           \/* iReg is a temp register that needs to be freed *\/$/;"	m	struct:Parse::yColCache	file:
temp_store	sqlite3.c	/^  u8 temp_store;                \/* 1: file 2: memory 0: default *\/$/;"	m	struct:sqlite3	file:
termCanDriveIndex	sqlite3.c	/^static int termCanDriveIndex($/;"	f	file:
testFunc	sqlite3.c	/^static void testFunc($/;"	f	file:
testRtreeCell	sqlite3.c	/^static int testRtreeCell(Rtree *pRtree, RtreeCursor *pCursor, int *pbEof){$/;"	f	file:
testRtreeEntry	sqlite3.c	/^static int testRtreeEntry(Rtree *pRtree, RtreeCursor *pCursor, int *pbEof){$/;"	f	file:
testRtreeGeom	sqlite3.c	/^static int testRtreeGeom($/;"	f	file:
test_control	sqlite3.c	/^  int (*test_control)(int, ...);$/;"	m	struct:sqlite3_api_routines	file:
test_fts3_node_chunk_threshold	sqlite3.c	/^int test_fts3_node_chunk_threshold = (4*1024)*4;$/;"	v
test_fts3_node_chunksize	sqlite3.c	/^int test_fts3_node_chunksize = (4*1024);$/;"	v
testcase	sqlite3.c	111856;"	d	file:
testcase	sqlite3.c	465;"	d	file:
testcase	sqlite3.c	467;"	d	file:
thread_cleanup	sqlite3.c	/^  void  (*thread_cleanup)(void);$/;"	m	struct:sqlite3_api_routines	file:
threadid	sqlite3.c	24749;"	d	file:
threadid	sqlite3.c	24751;"	d	file:
timeFunc	sqlite3.c	/^static void timeFunc($/;"	f	file:
tkCREATE	sqlite3.c	107590;"	d	file:
tkEND	sqlite3.c	107593;"	d	file:
tkEXPLAIN	sqlite3.c	107589;"	d	file:
tkOTHER	sqlite3.c	107587;"	d	file:
tkSEMI	sqlite3.c	107585;"	d	file:
tkTEMP	sqlite3.c	107591;"	d	file:
tkTRIGGER	sqlite3.c	107592;"	d	file:
tkWS	sqlite3.c	107586;"	d	file:
tmask	sqlite3.c	86071;"	d	file:
tnum	sqlite3.c	/^  int tnum;            \/* Root BTree node for this table (see note above) *\/$/;"	m	struct:Table	file:
tnum	sqlite3.c	/^  int tnum;        \/* Page containing root of this index in database file *\/$/;"	m	struct:Index	file:
token	sqlite3.c	/^  void *token;                  \/* id that may be used to recursive triggers *\/$/;"	m	struct:SubProgram	file:
token	sqlite3.c	/^  void *token;            \/* Copy of SubProgram.token *\/$/;"	m	struct:VdbeFrame	file:
tooBig	sqlite3.c	/^  u8   tooBig;         \/* Becomes true if string size exceeds limits *\/$/;"	m	struct:StrAccum	file:
totalAlloc	sqlite3.c	/^  u64 totalAlloc;     \/* Total of all malloc calls - includes internal frag *\/$/;"	m	struct:Mem5Global	file:
totalExcess	sqlite3.c	/^  u64 totalExcess;    \/* Total internal fragmentation *\/$/;"	m	struct:Mem5Global	file:
totalFinalize	sqlite3.c	/^static void totalFinalize(sqlite3_context *context){$/;"	f	file:
total_changes	sqlite3.c	/^  int  (*total_changes)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
total_changes	sqlite3.c	/^static void total_changes($/;"	f	file:
tr_tm	sqlite3.c	/^  u8 tr_tm;               \/* One of TRIGGER_BEFORE, TRIGGER_AFTER *\/$/;"	m	struct:Trigger	file:
trace	sqlite3.c	/^  FILE *trace;            \/* Write an execution trace here, if not NULL *\/$/;"	m	struct:Vdbe	file:
trace	sqlite3.c	/^  int trace;                 \/* True to trace changes *\/$/;"	m	struct:sqlite3_mutex	file:
trace	sqlite3.c	/^  void * (*trace)(sqlite3*,void(*xTrace)(void*,const char*),void*);$/;"	m	struct:sqlite3_api_routines	file:
trace	sqlite3.c	/^ int   trace;       \/* True to trace changes *\/$/;"	m	struct:sqlite3_mutex	file:
transCntrChng	sqlite3.c	/^  unsigned char transCntrChng;   \/* True if the transaction counter changed *\/$/;"	m	struct:unixFile	file:
transferJoinMarkings	sqlite3.c	/^static void transferJoinMarkings(Expr *pDerived, Expr *pBase){$/;"	f	file:
transferParseError	sqlite3.c	/^static void transferParseError(Parse *pTo, Parse *pFrom){$/;"	f	file:
transfer_bindings	sqlite3.c	/^  int  (*transfer_bindings)(sqlite3_stmt*,sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
transitionFunc	HomogeneousModelParams.cpp	/^BaseReal HMM_PP::HomogeneousModelParams::transitionFunc(const uint i, const uint j, const uint t1, const uint t2) const {$/;"	f	class:HMM_PP::HomogeneousModelParams
transitionFunc	Model.cpp	/^BaseReal HMM_PP::Model::transitionFunc(const uint i, const uint j, const uint t1, const uint t2) const {$/;"	f	class:HMM_PP::Model
transitionMatrix	Model.cpp	/^HMM_PP::NamedMatrix<real>* HMM_PP::Model::transitionMatrix(const uint t1, const uint t2) const {$/;"	f	class:HMM_PP::Model
transitionMatrixTranspose	Model.cpp	/^HMM_PP::NamedMatrix<real>* HMM_PP::Model::transitionMatrixTranspose(const uint t1, const uint t2) const {$/;"	f	class:HMM_PP::Model
trigHash	sqlite3.c	/^  Hash trigHash;       \/* All triggers indexed by name *\/$/;"	m	struct:Schema	file:
triggerStepAllocate	sqlite3.c	/^static TriggerStep *triggerStepAllocate($/;"	f	file:
trimFunc	sqlite3.c	/^static void trimFunc($/;"	f	file:
type	sqlite3.c	/^  etByte type;             \/* Conversion paradigm *\/$/;"	m	struct:et_info	file:
type	sqlite3.c	/^  u8  type;           \/* One of SQLITE_NULL, SQLITE_TEXT, SQLITE_INTEGER, etc *\/$/;"	m	struct:Mem	file:
type	sqlite3.c	/^  u8 type;              \/* One of the SQLITE_COLL_... values below *\/$/;"	m	struct:CollSeq	file:
type	sqlite3.c	/^struct AttachKey { int type;  Token key; };$/;"	m	struct:AttachKey	file:
typeToCategory	CategoricalData.cpp	/^string HMM_PP::CategoricalData::typeToCategory(const uint i) {$/;"	f	class:HMM_PP::CategoricalData
typeofFunc	sqlite3.c	/^static void typeofFunc($/;"	f	file:
tz	sqlite3.c	/^  int tz;            \/* Timezone offset in minutes *\/$/;"	m	struct:DateTime	file:
u	sqlite3.c	/^  } u;$/;"	m	struct:Bitvec	typeref:union:Bitvec::__anon16	file:
u	sqlite3.c	/^  } u;$/;"	m	struct:Expr	typeref:union:Expr::__anon4	file:
u	sqlite3.c	/^  } u;$/;"	m	struct:IndexSample	typeref:union:IndexSample::__anon3	file:
u	sqlite3.c	/^  } u;$/;"	m	struct:Mem	typeref:union:Mem::__anon11	file:
u	sqlite3.c	/^  } u;$/;"	m	struct:Mem3Block	typeref:union:Mem3Block::__anon13	file:
u	sqlite3.c	/^  } u;$/;"	m	struct:Walker	typeref:union:Walker::__anon10	file:
u	sqlite3.c	/^  } u;$/;"	m	struct:WhereLevel	typeref:union:WhereLevel::__anon7	file:
u	sqlite3.c	/^  } u;$/;"	m	struct:WherePlan	typeref:union:WherePlan::__anon6	file:
u	sqlite3.c	/^  } u;$/;"	m	struct:WhereTerm	typeref:union:WhereTerm::__anon17	file:
u1	sqlite3.c	/^  } u1;$/;"	m	struct:sqlite3	typeref:union:sqlite3::__anon2	file:
u16	sqlite3.c	/^typedef UINT16_TYPE u16;           \/* 2-byte unsigned integer *\/$/;"	t	file:
u32	sqlite3.c	/^typedef UINT32_TYPE u32;           \/* 4-byte unsigned integer *\/$/;"	t	file:
u32	sqlite3.c	/^typedef unsigned int u32;         \/* 4-byte unsigned integer *\/$/;"	t	file:
u32	sqlite3.c	/^typedef unsigned int u32;$/;"	t	file:
u64	sqlite3.c	/^typedef sqlite3_uint64 u64;       \/* 8-byte unsigned integer *\/$/;"	t	file:
u64	sqlite3.c	/^typedef sqlite_uint64 u64;         \/* 8-byte unsigned integer *\/$/;"	t	file:
u8	sqlite3.c	/^typedef UINT8_TYPE u8;             \/* 1-byte unsigned integer *\/$/;"	t	file:
u8	sqlite3.c	/^typedef unsigned char u8;         \/* 1-byte (or larger) unsigned integer *\/$/;"	t	file:
u8	sqlite3.c	/^typedef unsigned char u8;$/;"	t	file:
ucUtf8	sqlite3.c	/^static UconvObject ucUtf8 = NULL; \/* convert between UTF-8 and UCS-2 *\/$/;"	v	file:
uclCp	sqlite3.c	/^static UconvObject uclCp = NULL;  \/* convert between local codepage and UCS-2 *\/$/;"	v	file:
unLockFlag	sqlite3.c	/^  unsigned char unLockFlag;         \/* 1 = unlock, 0 = lock *\/$/;"	m	struct:ByteRangeLockPB2	file:
unicodeToMbcs	sqlite3.c	/^static char *unicodeToMbcs(const WCHAR *zWideFilename){$/;"	f	file:
unicodeToUtf8	sqlite3.c	/^static char *unicodeToUtf8(const WCHAR *zWideFilename){$/;"	f	file:
univarNorm	ModelParams.cpp	/^BaseReal HMM_PP::ModelParams::univarNorm(const BaseReal x, const BaseReal m, const BaseReal sd) {$/;"	f	class:HMM_PP::ModelParams
unixAccess	sqlite3.c	/^static int unixAccess($/;"	f	file:
unixCheckReservedLock	sqlite3.c	/^static int unixCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:
unixClose	sqlite3.c	/^static int unixClose(sqlite3_file *id){$/;"	f	file:
unixCurrentTime	sqlite3.c	/^static int unixCurrentTime(sqlite3_vfs *NotUsed, double *prNow){$/;"	f	file:
unixCurrentTimeInt64	sqlite3.c	/^static int unixCurrentTimeInt64(sqlite3_vfs *NotUsed, sqlite3_int64 *piNow){$/;"	f	file:
unixDelete	sqlite3.c	/^static int unixDelete($/;"	f	file:
unixDeviceCharacteristics	sqlite3.c	/^static int unixDeviceCharacteristics(sqlite3_file *NotUsed){$/;"	f	file:
unixDlClose	sqlite3.c	/^static void unixDlClose(sqlite3_vfs *NotUsed, void *pHandle){$/;"	f	file:
unixDlClose	sqlite3.c	29779;"	d	file:
unixDlError	sqlite3.c	/^static void unixDlError(sqlite3_vfs *NotUsed, int nBuf, char *zBufOut){$/;"	f	file:
unixDlError	sqlite3.c	29777;"	d	file:
unixDlOpen	sqlite3.c	/^static void *unixDlOpen(sqlite3_vfs *NotUsed, const char *zFilename){$/;"	f	file:
unixDlOpen	sqlite3.c	29776;"	d	file:
unixDlSym	sqlite3.c	/^static void (*unixDlSym(sqlite3_vfs *NotUsed, void *p, const char*zSym))(void){$/;"	f	file:
unixDlSym	sqlite3.c	29778;"	d	file:
unixEnterMutex	sqlite3.c	/^static void unixEnterMutex(void){$/;"	f	file:
unixFile	sqlite3.c	/^struct unixFile {$/;"	s	file:
unixFile	sqlite3.c	/^typedef struct unixFile unixFile;$/;"	t	typeref:struct:unixFile	file:
unixFileControl	sqlite3.c	/^static int unixFileControl(sqlite3_file *id, int op, void *pArg){$/;"	f	file:
unixFileId	sqlite3.c	/^struct unixFileId {$/;"	s	file:
unixFileLock	sqlite3.c	/^static int unixFileLock(unixFile *pFile, struct flock *pLock){$/;"	f	file:
unixFileSize	sqlite3.c	/^static int unixFileSize(sqlite3_file *id, i64 *pSize){$/;"	f	file:
unixFullPathname	sqlite3.c	/^static int unixFullPathname($/;"	f	file:
unixGetLastError	sqlite3.c	/^static int unixGetLastError(sqlite3_vfs *NotUsed, int NotUsed2, char *NotUsed3){$/;"	f	file:
unixGetSystemCall	sqlite3.c	/^static sqlite3_syscall_ptr unixGetSystemCall($/;"	f	file:
unixGetTempname	sqlite3.c	/^static int unixGetTempname(int nBuf, char *zBuf){$/;"	f	file:
unixInodeInfo	sqlite3.c	/^struct unixInodeInfo {$/;"	s	file:
unixInodeInfo	sqlite3.c	/^typedef struct unixInodeInfo unixInodeInfo;   \/* An i-node *\/$/;"	t	typeref:struct:unixInodeInfo	file:
unixLeaveMutex	sqlite3.c	/^static void unixLeaveMutex(void){$/;"	f	file:
unixLock	sqlite3.c	/^static int unixLock(sqlite3_file *id, int eFileLock){$/;"	f	file:
unixLogError	sqlite3.c	25448;"	d	file:
unixLogErrorAtLine	sqlite3.c	/^static int unixLogErrorAtLine($/;"	f	file:
unixMutexHeld	sqlite3.c	/^static int unixMutexHeld(void) {$/;"	f	file:
unixNextSystemCall	sqlite3.c	/^static const char *unixNextSystemCall(sqlite3_vfs *p, const char *zName){$/;"	f	file:
unixOpen	sqlite3.c	/^static int unixOpen($/;"	f	file:
unixOpenSharedMemory	sqlite3.c	/^static int unixOpenSharedMemory(unixFile *pDbFd){$/;"	f	file:
unixRandomness	sqlite3.c	/^static int unixRandomness(sqlite3_vfs *NotUsed, int nBuf, char *zBuf){$/;"	f	file:
unixRead	sqlite3.c	/^static int unixRead($/;"	f	file:
unixSectorSize	sqlite3.c	/^static int unixSectorSize(sqlite3_file *NotUsed){$/;"	f	file:
unixSetSystemCall	sqlite3.c	/^static int unixSetSystemCall($/;"	f	file:
unixShm	sqlite3.c	/^struct unixShm {$/;"	s	file:
unixShm	sqlite3.c	/^typedef struct unixShm unixShm;               \/* Connection shared memory *\/$/;"	t	typeref:struct:unixShm	file:
unixShmBarrier	sqlite3.c	/^static void unixShmBarrier($/;"	f	file:
unixShmBarrier	sqlite3.c	28622;"	d	file:
unixShmLock	sqlite3.c	/^static int unixShmLock($/;"	f	file:
unixShmLock	sqlite3.c	28621;"	d	file:
unixShmMap	sqlite3.c	/^static int unixShmMap($/;"	f	file:
unixShmMap	sqlite3.c	28620;"	d	file:
unixShmNode	sqlite3.c	/^struct unixShmNode {$/;"	s	file:
unixShmNode	sqlite3.c	/^typedef struct unixShmNode unixShmNode;       \/* Shared memory instance *\/$/;"	t	typeref:struct:unixShmNode	file:
unixShmPurge	sqlite3.c	/^static void unixShmPurge(unixFile *pFd){$/;"	f	file:
unixShmSystemLock	sqlite3.c	/^static int unixShmSystemLock($/;"	f	file:
unixShmUnmap	sqlite3.c	/^static int unixShmUnmap($/;"	f	file:
unixShmUnmap	sqlite3.c	28623;"	d	file:
unixSleep	sqlite3.c	/^static int unixSleep(sqlite3_vfs *NotUsed, int microseconds){$/;"	f	file:
unixSync	sqlite3.c	/^static int unixSync(sqlite3_file *id, int flags){$/;"	f	file:
unixTempFileDir	sqlite3.c	/^static const char *unixTempFileDir(void){$/;"	f	file:
unixTruncate	sqlite3.c	/^static int unixTruncate(sqlite3_file *id, i64 nByte){$/;"	f	file:
unixUnlock	sqlite3.c	/^static int unixUnlock(sqlite3_file *id, int eFileLock){$/;"	f	file:
unixWrite	sqlite3.c	/^static int unixWrite($/;"	f	file:
unix_syscall	sqlite3.c	/^static struct unix_syscall {$/;"	s	file:
unlikely	sqlite3.c	536;"	d	file:
unlikely	sqlite3.c	539;"	d	file:
unlockBtreeIfUnused	sqlite3.c	/^static void unlockBtreeIfUnused(BtShared *pBt){$/;"	f	file:
unlockBtreeMutex	sqlite3.c	/^static void unlockBtreeMutex(Btree *p){$/;"	f	file:
unlockReadLock	sqlite3.c	/^static int unlockReadLock( os2File *id ){$/;"	f	file:
unlockReadLock	sqlite3.c	/^static int unlockReadLock(winFile *pFile){$/;"	f	file:
unlock_notify	sqlite3.c	/^  int (*unlock_notify)(sqlite3*,void(*)(void**,int),void*);$/;"	m	struct:sqlite3_api_routines	file:
untestedTerms	sqlite3.c	/^  u8 untestedTerms;    \/* Not all WHERE terms resolved by outer loop *\/$/;"	m	struct:WhereInfo	file:
unused	sqlite3.c	/^  u32 unused;                     \/* Unused (padding) field *\/$/;"	m	struct:WalIndexHdr	file:
updateAccumulator	sqlite3.c	/^static void updateAccumulator(Parse *pParse, AggInfo *pAggInfo){$/;"	f	file:
updateEmission	UnivariateCategoricalModelParams.cpp	/^void HMM_PP::UnivariateCategoricalModelParams::updateEmission(const HMM_PP::InferredDataFit* infer) {$/;"	f	class:HMM_PP::UnivariateCategoricalModelParams
updateEmission	UnivariateQuantitativeModelParams.cpp	/^void HMM_PP::UnivariateQuantitativeModelParams::updateEmission(const HMM_PP::InferredDataFit* infer) {$/;"	f	class:HMM_PP::UnivariateQuantitativeModelParams
updateMapping	sqlite3.c	/^static int updateMapping($/;"	f	file:
updateMaxBlobsize	sqlite3.c	/^static void updateMaxBlobsize(Mem *p){$/;"	f	file:
updateTransition	HomogeneousModelParams.cpp	/^void HMM_PP::HomogeneousModelParams::updateTransition(const HMM_PP::InferredDataFit* infer) {$/;"	f	class:HMM_PP::HomogeneousModelParams
updateVirtualTable	sqlite3.c	/^static void updateVirtualTable($/;"	f	file:
update_hook	sqlite3.c	/^  void * (*update_hook)(sqlite3*,void(*)(void*,int ,char const*,char const*,sqlite_int64),void*);$/;"	m	struct:sqlite3_api_routines	file:
upperFunc	sqlite3.c	/^static void upperFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
usable	sqlite3.c	/^     unsigned char usable;     \/* True if this constraint is usable *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	file:
usableSize	sqlite3.c	/^  u32 usableSize;       \/* Number of usable bytes on each page *\/$/;"	m	struct:BtShared	file:
useJournal	sqlite3.c	/^  u8 useJournal;              \/* Use a rollback journal on this file *\/$/;"	m	struct:Pager	file:
useMalloc	sqlite3.c	/^  u8   useMalloc;      \/* 0: none,  1: sqlite3DbMalloc,  2: sqlite3_malloc *\/$/;"	m	struct:StrAccum	file:
useRandomRowid	sqlite3.c	/^  Bool useRandomRowid;  \/* Generate new record numbers semi-randomly *\/$/;"	m	struct:VdbeCursor	file:
useSortingIdx	sqlite3.c	/^  u8 useSortingIdx;       \/* In direct mode, reference the sorting index rather$/;"	m	struct:AggInfo	file:
used	sqlite3.c	/^  Bitmask used;      \/* Bitmask of cursors used by this plan *\/$/;"	m	struct:WhereCost	file:
usedAsColumnCache	sqlite3.c	/^static int usedAsColumnCache(Parse *pParse, int iFrom, int iTo){$/;"	f	file:
user_data	sqlite3.c	/^  void * (*user_data)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
usesStmtJournal	sqlite3.c	/^  u8 usesStmtJournal;     \/* True if uses a statement journal *\/$/;"	m	struct:Vdbe	file:
utf8ToUnicode	sqlite3.c	/^static WCHAR *utf8ToUnicode(const char *zFilename){$/;"	f	file:
v	sqlite3.c	/^  Vdbe *v;                   \/* Vdbe to iterate through the opcodes of *\/$/;"	m	struct:VdbeOpIter	file:
v	sqlite3.c	/^  Vdbe *v;                \/* VM this frame belongs to *\/$/;"	m	struct:VdbeFrame	file:
v	sqlite3.c	/^  i64 v;                        \/* ROWID value for this entry *\/$/;"	m	struct:RowSetEntry	file:
vacuumFinalize	sqlite3.c	/^static int vacuumFinalize(sqlite3 *db, sqlite3_stmt *pStmt, char **pzErrMsg){$/;"	f	file:
validHMS	sqlite3.c	/^  char validHMS;     \/* True (1) if h,m,s are valid *\/$/;"	m	struct:DateTime	file:
validJD	sqlite3.c	/^  char validJD;      \/* True (1) if iJD is valid *\/$/;"	m	struct:DateTime	file:
validNKey	sqlite3.c	/^  u8 validNKey;             \/* True if info.nKey is valid *\/$/;"	m	struct:BtCursor	file:
validTZ	sqlite3.c	/^  char validTZ;      \/* True (1) if tz is valid *\/$/;"	m	struct:DateTime	file:
validYMD	sqlite3.c	/^  char validYMD;     \/* True (1) if Y,M,D are valid *\/$/;"	m	struct:DateTime	file:
value	sqlite3.c	/^  struct {int value; int mask;} yy215;$/;"	m	struct:__anon18::__anon19	file:
valueFromExpr	sqlite3.c	/^static int valueFromExpr($/;"	f	file:
value_blob	sqlite3.c	/^  const void * (*value_blob)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_bytes	sqlite3.c	/^  int  (*value_bytes)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_bytes16	sqlite3.c	/^  int  (*value_bytes16)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_double	sqlite3.c	/^  double  (*value_double)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_int	sqlite3.c	/^  int  (*value_int)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_int64	sqlite3.c	/^  sqlite_int64  (*value_int64)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_numeric_type	sqlite3.c	/^  int  (*value_numeric_type)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_text	sqlite3.c	/^  const unsigned char * (*value_text)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_text16	sqlite3.c	/^  const void * (*value_text16)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_text16be	sqlite3.c	/^  const void * (*value_text16be)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_text16le	sqlite3.c	/^  const void * (*value_text16le)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_type	sqlite3.c	/^  int  (*value_type)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
vdbeCommit	sqlite3.c	/^static int vdbeCommit(sqlite3 *db, Vdbe *p){$/;"	f	file:
vdbeExecCnt	sqlite3.c	/^  int vdbeExecCnt;              \/* Number of nested calls to VdbeExec() *\/$/;"	m	struct:sqlite3	file:
vdbeFreeOpArray	sqlite3.c	/^static void vdbeFreeOpArray(sqlite3 *db, Op *aOp, int nOp){$/;"	f	file:
vdbeSafety	sqlite3.c	/^static int vdbeSafety(Vdbe *p){$/;"	f	file:
vdbeSafetyNotNull	sqlite3.c	/^static int vdbeSafetyNotNull(Vdbe *p){$/;"	f	file:
vdbeUnbind	sqlite3.c	/^static int vdbeUnbind(Vdbe *p, int i){$/;"	f	file:
versionFunc	sqlite3.c	/^static void versionFunc($/;"	f	file:
vfsFlags	sqlite3.c	/^  u32 vfsFlags;               \/* Flags for sqlite3_vfs.xOpen() *\/$/;"	m	struct:Pager	file:
vfsList	sqlite3.c	/^static sqlite3_vfs * SQLITE_WSD vfsList = 0;$/;"	v	file:
vfsList	sqlite3.c	14491;"	d	file:
vfsUnlink	sqlite3.c	/^static void vfsUnlink(sqlite3_vfs *pVfs){$/;"	f	file:
vfs_find	sqlite3.c	/^  sqlite3_vfs *(*vfs_find)(const char*);$/;"	m	struct:sqlite3_api_routines	file:
vfs_register	sqlite3.c	/^  int (*vfs_register)(sqlite3_vfs*,int);$/;"	m	struct:sqlite3_api_routines	file:
vfs_unregister	sqlite3.c	/^  int (*vfs_unregister)(sqlite3_vfs*);$/;"	m	struct:sqlite3_api_routines	file:
viterbi	InferredDataFit.cpp	/^void HMM_PP::InferredDataFit::viterbi() {$/;"	f	class:HMM_PP::InferredDataFit
vmask	sqlite3.c	/^  Bitmask vmask;           \/* Bitmask identifying virtual table cursors *\/$/;"	m	struct:WhereClause	file:
vmprintf	sqlite3.c	/^  char *(*vmprintf)(const char*,va_list);$/;"	m	struct:sqlite3_api_routines	file:
vtabBestIndex	sqlite3.c	/^static int vtabBestIndex(Parse *pParse, Table *pTab, sqlite3_index_info *p){$/;"	f	file:
vtabCallConstructor	sqlite3.c	/^static int vtabCallConstructor($/;"	f	file:
vtabDisconnectAll	sqlite3.c	/^static VTable *vtabDisconnectAll(sqlite3 *db, Table *p){$/;"	f	file:
vtabOnConflict	sqlite3.c	/^  u8 vtabOnConflict;            \/* Value to return for s3_vtab_on_conflict() *\/$/;"	m	struct:sqlite3	file:
vxworksFileId	sqlite3.c	/^struct vxworksFileId {$/;"	s	file:
vxworksFileList	sqlite3.c	/^static struct vxworksFileId *vxworksFileList = 0;$/;"	v	typeref:struct:vxworksFileId	file:
vxworksFindFileId	sqlite3.c	/^static struct vxworksFileId *vxworksFindFileId(const char *zAbsoluteName){$/;"	f	file:
vxworksReleaseFileId	sqlite3.c	/^static void vxworksReleaseFileId(struct vxworksFileId *pId){$/;"	f	file:
vxworksSimplifyName	sqlite3.c	/^static int vxworksSimplifyName(char *z, int n){$/;"	f	file:
walBusyLock	sqlite3.c	/^static int walBusyLock($/;"	f	file:
walCheckpoint	sqlite3.c	/^static int walCheckpoint($/;"	f	file:
walChecksumBytes	sqlite3.c	/^static void walChecksumBytes($/;"	f	file:
walCkptInfo	sqlite3.c	/^static volatile WalCkptInfo *walCkptInfo(Wal *pWal){$/;"	f	file:
walCleanupHash	sqlite3.c	/^static void walCleanupHash(Wal *pWal){$/;"	f	file:
walDecodeFrame	sqlite3.c	/^static int walDecodeFrame($/;"	f	file:
walEncodeFrame	sqlite3.c	/^static void walEncodeFrame($/;"	f	file:
walFrameOffset	sqlite3.c	44025;"	d	file:
walFramePage	sqlite3.c	/^static int walFramePage(u32 iFrame){$/;"	f	file:
walFramePgno	sqlite3.c	/^static u32 walFramePgno(Wal *pWal, u32 iFrame){$/;"	f	file:
walHash	sqlite3.c	/^static int walHash(u32 iPage){$/;"	f	file:
walHashGet	sqlite3.c	/^static int walHashGet($/;"	f	file:
walIndexAppend	sqlite3.c	/^static int walIndexAppend(Wal *pWal, u32 iFrame, u32 iPage){$/;"	f	file:
walIndexClose	sqlite3.c	/^static void walIndexClose(Wal *pWal, int isDelete){$/;"	f	file:
walIndexHdr	sqlite3.c	/^static volatile WalIndexHdr *walIndexHdr(Wal *pWal){$/;"	f	file:
walIndexPage	sqlite3.c	/^static int walIndexPage(Wal *pWal, int iPage, volatile u32 **ppPage){$/;"	f	file:
walIndexReadHdr	sqlite3.c	/^static int walIndexReadHdr(Wal *pWal, int *pChanged){$/;"	f	file:
walIndexRecover	sqlite3.c	/^static int walIndexRecover(Wal *pWal){$/;"	f	file:
walIndexTryHdr	sqlite3.c	/^static int walIndexTryHdr(Wal *pWal, int *pChanged){$/;"	f	file:
walIndexWriteHdr	sqlite3.c	/^static void walIndexWriteHdr(Wal *pWal){$/;"	f	file:
walIteratorFree	sqlite3.c	/^static void walIteratorFree(WalIterator *p){$/;"	f	file:
walIteratorInit	sqlite3.c	/^static int walIteratorInit(Wal *pWal, WalIterator **pp){$/;"	f	file:
walIteratorNext	sqlite3.c	/^static int walIteratorNext($/;"	f	file:
walLockExclusive	sqlite3.c	/^static int walLockExclusive(Wal *pWal, int lockIdx, int n){$/;"	f	file:
walLockName	sqlite3.c	/^static const char *walLockName(int lockIdx){$/;"	f	file:
walLockShared	sqlite3.c	/^static int walLockShared(Wal *pWal, int lockIdx){$/;"	f	file:
walMerge	sqlite3.c	/^static void walMerge($/;"	f	file:
walMergesort	sqlite3.c	/^static void walMergesort($/;"	f	file:
walNextHash	sqlite3.c	/^static int walNextHash(int iPriorHash){$/;"	f	file:
walPagesize	sqlite3.c	/^static int walPagesize(Wal *pWal){$/;"	f	file:
walRestartLog	sqlite3.c	/^static int walRestartLog(Wal *pWal){$/;"	f	file:
walShmBarrier	sqlite3.c	/^static void walShmBarrier(Wal *pWal){$/;"	f	file:
walTryBeginRead	sqlite3.c	/^static int walTryBeginRead(Wal *pWal, int *pChanged, int useWal, int cnt){$/;"	f	file:
walUnlockExclusive	sqlite3.c	/^static void walUnlockExclusive(Wal *pWal, int lockIdx, int n){$/;"	f	file:
walUnlockShared	sqlite3.c	/^static void walUnlockShared(Wal *pWal, int lockIdx){$/;"	f	file:
wal_autocheckpoint	sqlite3.c	/^  int (*wal_autocheckpoint)(sqlite3*,int);$/;"	m	struct:sqlite3_api_routines	file:
wal_checkpoint	sqlite3.c	/^  int (*wal_checkpoint)(sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
wal_hook	sqlite3.c	/^  void *(*wal_hook)(sqlite3*,int(*)(void*,sqlite3*,const char*,int),void*);$/;"	m	struct:sqlite3_api_routines	file:
wantToLock	sqlite3.c	/^  int wantToLock;    \/* Number of nested calls to sqlite3BtreeEnter() *\/$/;"	m	struct:Btree	file:
wc	sqlite3.c	/^  WhereClause wc;          \/* Decomposition into subterms *\/$/;"	m	struct:WhereOrInfo	file:
wc	sqlite3.c	/^  WhereClause wc;          \/* The subexpression broken out *\/$/;"	m	struct:WhereAndInfo	file:
wctrlFlags	sqlite3.c	/^  u16 wctrlFlags;      \/* Flags originally passed to sqlite3WhereBegin() *\/$/;"	m	struct:WhereInfo	file:
whereAndInfoDelete	sqlite3.c	/^static void whereAndInfoDelete(sqlite3 *db, WhereAndInfo *p){$/;"	f	file:
whereClauseClear	sqlite3.c	/^static void whereClauseClear(WhereClause *pWC){$/;"	f	file:
whereClauseInit	sqlite3.c	/^static void whereClauseInit($/;"	f	file:
whereClauseInsert	sqlite3.c	/^static int whereClauseInsert(WhereClause *pWC, Expr *p, u8 wtFlags){$/;"	f	file:
whereEqualScanEst	sqlite3.c	/^static int whereEqualScanEst($/;"	f	file:
whereForeignKeys	sqlite3.c	/^static char *whereForeignKeys(Parse *pParse, Table *pTab){$/;"	f	file:
whereInScanEst	sqlite3.c	/^static int whereInScanEst($/;"	f	file:
whereInfoFree	sqlite3.c	/^static void whereInfoFree(sqlite3 *db, WhereInfo *pWInfo){$/;"	f	file:
whereOrInfoDelete	sqlite3.c	/^static void whereOrInfoDelete(sqlite3 *db, WhereOrInfo *p){$/;"	f	file:
whereOrName	sqlite3.c	/^static char *whereOrName(sqlite3 *db, char *zWhere, char *zConstant){$/;"	f	file:
whereRangeRegion	sqlite3.c	/^static int whereRangeRegion($/;"	f	file:
whereRangeScanEst	sqlite3.c	/^static int whereRangeScanEst($/;"	f	file:
whereSplit	sqlite3.c	/^static void whereSplit(WhereClause *pWC, Expr *pExpr, int op){$/;"	f	file:
whereTempTriggers	sqlite3.c	/^static char *whereTempTriggers(Parse *pParse, Table *pTab){$/;"	f	file:
winAccess	sqlite3.c	/^static int winAccess($/;"	f	file:
winCheckReservedLock	sqlite3.c	/^static int winCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:
winClose	sqlite3.c	/^static int winClose(sqlite3_file *id){$/;"	f	file:
winCurrentTime	sqlite3.c	/^int winCurrentTime(sqlite3_vfs *pVfs, double *prNow){$/;"	f
winCurrentTimeInt64	sqlite3.c	/^static int winCurrentTimeInt64(sqlite3_vfs *pVfs, sqlite3_int64 *piNow){$/;"	f	file:
winDelete	sqlite3.c	/^static int winDelete($/;"	f	file:
winDeviceCharacteristics	sqlite3.c	/^static int winDeviceCharacteristics(sqlite3_file *id){$/;"	f	file:
winDlClose	sqlite3.c	/^void winDlClose(sqlite3_vfs *pVfs, void *pHandle){$/;"	f
winDlClose	sqlite3.c	34067;"	d	file:
winDlError	sqlite3.c	/^static void winDlError(sqlite3_vfs *pVfs, int nBuf, char *zBufOut){$/;"	f	file:
winDlError	sqlite3.c	34065;"	d	file:
winDlOpen	sqlite3.c	/^static void *winDlOpen(sqlite3_vfs *pVfs, const char *zFilename){$/;"	f	file:
winDlOpen	sqlite3.c	34064;"	d	file:
winDlSym	sqlite3.c	/^void (*winDlSym(sqlite3_vfs *pVfs, void *pHandle, const char *zSymbol))(void){$/;"	f
winDlSym	sqlite3.c	34066;"	d	file:
winFile	sqlite3.c	/^struct winFile {$/;"	s	file:
winFile	sqlite3.c	/^typedef struct winFile winFile;$/;"	t	typeref:struct:winFile	file:
winFileControl	sqlite3.c	/^static int winFileControl(sqlite3_file *id, int op, void *pArg){$/;"	f	file:
winFileSize	sqlite3.c	/^static int winFileSize(sqlite3_file *id, sqlite3_int64 *pSize){$/;"	f	file:
winFullPathname	sqlite3.c	/^static int winFullPathname($/;"	f	file:
winGetLastError	sqlite3.c	/^static int winGetLastError(sqlite3_vfs *pVfs, int nBuf, char *zBuf){$/;"	f	file:
winIoMethod	sqlite3.c	/^static const sqlite3_io_methods winIoMethod = {$/;"	v	file:
winLock	sqlite3.c	/^static int winLock(sqlite3_file *id, int locktype){$/;"	f	file:
winLogError	sqlite3.c	31799;"	d	file:
winLogErrorAtLine	sqlite3.c	/^static int winLogErrorAtLine($/;"	f	file:
winMutexAlloc	sqlite3.c	/^static sqlite3_mutex *winMutexAlloc(int iType){$/;"	f	file:
winMutexEnd	sqlite3.c	/^static int winMutexEnd(void){ $/;"	f	file:
winMutexEnter	sqlite3.c	/^static void winMutexEnter(sqlite3_mutex *p){$/;"	f	file:
winMutexFree	sqlite3.c	/^static void winMutexFree(sqlite3_mutex *p){$/;"	f	file:
winMutexHeld	sqlite3.c	/^static int winMutexHeld(sqlite3_mutex *p){$/;"	f	file:
winMutexInit	sqlite3.c	/^static int winMutexInit(void){ $/;"	f	file:
winMutexLeave	sqlite3.c	/^static void winMutexLeave(sqlite3_mutex *p){$/;"	f	file:
winMutexNotheld	sqlite3.c	/^static int winMutexNotheld(sqlite3_mutex *p){$/;"	f	file:
winMutexNotheld2	sqlite3.c	/^static int winMutexNotheld2(sqlite3_mutex *p, DWORD tid){$/;"	f	file:
winMutexTry	sqlite3.c	/^static int winMutexTry(sqlite3_mutex *p){$/;"	f	file:
winMutex_isInit	sqlite3.c	/^static int winMutex_isInit = 0;$/;"	v	file:
winMutex_lock	sqlite3.c	/^static long winMutex_lock = 0;$/;"	v	file:
winMutex_staticMutexes	sqlite3.c	/^static sqlite3_mutex winMutex_staticMutexes[6] = {$/;"	v	file:
winOpen	sqlite3.c	/^static int winOpen($/;"	f	file:
winOpenSharedMemory	sqlite3.c	/^static int winOpenSharedMemory(winFile *pDbFd){$/;"	f	file:
winRandomness	sqlite3.c	/^static int winRandomness(sqlite3_vfs *pVfs, int nBuf, char *zBuf){$/;"	f	file:
winRead	sqlite3.c	/^static int winRead($/;"	f	file:
winSectorSize	sqlite3.c	/^static int winSectorSize(sqlite3_file *id){$/;"	f	file:
winShm	sqlite3.c	/^struct winShm {$/;"	s	file:
winShm	sqlite3.c	/^typedef struct winShm winShm;           \/* A connection to shared-memory *\/$/;"	t	typeref:struct:winShm	file:
winShmBarrier	sqlite3.c	/^static void winShmBarrier($/;"	f	file:
winShmBarrier	sqlite3.c	33372;"	d	file:
winShmEnterMutex	sqlite3.c	/^static void winShmEnterMutex(void){$/;"	f	file:
winShmLeaveMutex	sqlite3.c	/^static void winShmLeaveMutex(void){$/;"	f	file:
winShmLock	sqlite3.c	/^static int winShmLock($/;"	f	file:
winShmLock	sqlite3.c	33371;"	d	file:
winShmMap	sqlite3.c	/^static int winShmMap($/;"	f	file:
winShmMap	sqlite3.c	33370;"	d	file:
winShmMutexHeld	sqlite3.c	/^static int winShmMutexHeld(void) {$/;"	f	file:
winShmNode	sqlite3.c	/^struct winShmNode {$/;"	s	file:
winShmNode	sqlite3.c	/^typedef struct winShmNode winShmNode;   \/* A region of shared-memory *\/$/;"	t	typeref:struct:winShmNode	file:
winShmNodeList	sqlite3.c	/^static winShmNode *winShmNodeList = 0;$/;"	v	file:
winShmPurge	sqlite3.c	/^static void winShmPurge(sqlite3_vfs *pVfs, int deleteFlag){$/;"	f	file:
winShmSystemLock	sqlite3.c	/^static int winShmSystemLock($/;"	f	file:
winShmUnmap	sqlite3.c	/^static int winShmUnmap($/;"	f	file:
winShmUnmap	sqlite3.c	33373;"	d	file:
winSleep	sqlite3.c	/^static int winSleep(sqlite3_vfs *pVfs, int microsec){$/;"	f	file:
winSync	sqlite3.c	/^static int winSync(sqlite3_file *id, int flags){$/;"	f	file:
winSysInfo	sqlite3.c	/^SYSTEM_INFO winSysInfo;$/;"	v
winTruncate	sqlite3.c	/^static int winTruncate(sqlite3_file *id, sqlite3_int64 nByte){$/;"	f	file:
winUnlock	sqlite3.c	/^static int winUnlock(sqlite3_file *id, int locktype){$/;"	f	file:
winWrite	sqlite3.c	/^static int winWrite($/;"	f	file:
winceCreateLock	sqlite3.c	/^static BOOL winceCreateLock(const char *zFilename, winFile *pFile){$/;"	f	file:
winceDestroyLock	sqlite3.c	/^static void winceDestroyLock(winFile *pFile){$/;"	f	file:
winceLock	sqlite3.c	/^typedef struct winceLock {$/;"	s	file:
winceLock	sqlite3.c	/^} winceLock;$/;"	t	typeref:struct:winceLock	file:
winceLockFile	sqlite3.c	/^static BOOL winceLockFile($/;"	f	file:
winceLockFileEx	sqlite3.c	/^static BOOL winceLockFileEx($/;"	f	file:
winceMutexAcquire	sqlite3.c	/^static void winceMutexAcquire(HANDLE h){$/;"	f	file:
winceMutexRelease	sqlite3.c	31875;"	d	file:
winceUnlockFile	sqlite3.c	/^static BOOL winceUnlockFile($/;"	f	file:
wrFlag	sqlite3.c	/^  u8 wrFlag;                \/* True if writable *\/$/;"	m	struct:BtCursor	file:
write32bits	sqlite3.c	/^static int write32bits(sqlite3_file *fd, i64 offset, u32 val){$/;"	f	file:
writeCoord	sqlite3.c	/^static int writeCoord(u8 *p, RtreeCoord *pCoord){$/;"	f	file:
writeInt16	sqlite3.c	/^static int writeInt16(u8 *p, int i){$/;"	f	file:
writeInt64	sqlite3.c	/^static int writeInt64(u8 *p, i64 i){$/;"	f	file:
writeJournalHdr	sqlite3.c	/^static int writeJournalHdr(Pager *pPager){$/;"	f	file:
writeLock	sqlite3.c	/^  u8 writeLock;              \/* True if in a write transaction *\/$/;"	m	struct:Wal	file:
writeMask	sqlite3.c	/^  yDbMask writeMask;   \/* Start a write transaction on these databases *\/$/;"	m	struct:Parse	file:
writeMasterJournal	sqlite3.c	/^static int writeMasterJournal(Pager *pPager, const char *zMaster){$/;"	f	file:
writeVdbeCnt	sqlite3.c	/^  int writeVdbeCnt;             \/* Number of active VDBEs that are writing *\/$/;"	m	struct:sqlite3	file:
wsFlags	sqlite3.c	/^  u32 wsFlags;                   \/* WHERE_* flags that describe the strategy *\/$/;"	m	struct:WherePlan	file:
wsdAutoext	sqlite3.c	87972;"	d	file:
wsdAutoext	sqlite3.c	87975;"	d	file:
wsdAutoextInit	sqlite3.c	87970;"	d	file:
wsdAutoextInit	sqlite3.c	87974;"	d	file:
wsdHooks	sqlite3.c	14626;"	d	file:
wsdHooks	sqlite3.c	14629;"	d	file:
wsdHooksInit	sqlite3.c	14624;"	d	file:
wsdHooksInit	sqlite3.c	14628;"	d	file:
wsdPrng	sqlite3.c	19873;"	d	file:
wsdStat	sqlite3.c	12929;"	d	file:
wsdStat	sqlite3.c	12932;"	d	file:
wsdStatInit	sqlite3.c	12928;"	d	file:
wsdStatInit	sqlite3.c	12931;"	d	file:
wtFlags	sqlite3.c	/^  u8 wtFlags;             \/* TERM_xxx bit flags.  See below *\/$/;"	m	struct:WhereTerm	file:
x	sqlite3.c	/^  } x;$/;"	m	struct:Expr	typeref:union:Expr::__anon5	file:
xAccess	sqlite3.c	/^  int (*xAccess)(sqlite3_vfs*, const char *zName, int flags, int *pResOut);$/;"	m	struct:sqlite3_vfs	file:
xAuth	sqlite3.c	/^  int (*xAuth)(void*,int,const char*,const char*,const char*,const char*);$/;"	m	struct:sqlite3	file:
xBacktrace	sqlite3.c	/^  void (*xBacktrace)(int, int, void **);$/;"	m	struct:__anon12	file:
xBegin	sqlite3.c	/^  int (*xBegin)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xBenignBegin	sqlite3.c	/^  void (*xBenignBegin)(void);$/;"	m	struct:BenignMallocHooks	file:
xBenignEnd	sqlite3.c	/^  void (*xBenignEnd)(void);$/;"	m	struct:BenignMallocHooks	file:
xBestIndex	sqlite3.c	/^  int (*xBestIndex)(sqlite3_vtab *pVTab, sqlite3_index_info*);$/;"	m	struct:sqlite3_module	file:
xBusyHandler	sqlite3.c	/^  int (*xBusyHandler)(void*); \/* Function to call when busy *\/$/;"	m	struct:Pager	file:
xCachesize	sqlite3.c	/^  void (*xCachesize)(sqlite3_pcache*, int nCachesize);$/;"	m	struct:sqlite3_pcache_methods	file:
xCheckReservedLock	sqlite3.c	/^  int (*xCheckReservedLock)(sqlite3_file*, int *pResOut);$/;"	m	struct:sqlite3_io_methods	file:
xClose	sqlite3.c	/^  int (*xClose)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	file:
xClose	sqlite3.c	/^  int (*xClose)(sqlite3_tokenizer_cursor *pCursor);$/;"	m	struct:sqlite3_tokenizer_module	file:
xClose	sqlite3.c	/^  int (*xClose)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module	file:
xCmp	sqlite3.c	/^  int (*xCmp)(void*,int, const void*, int, const void*);$/;"	m	struct:CollSeq	file:
xCodec	sqlite3.c	/^  void *(*xCodec)(void*,void*,Pgno,int); \/* Routine for en\/decoding data *\/$/;"	m	struct:Pager	file:
xCodecFree	sqlite3.c	/^  void (*xCodecFree)(void*);             \/* Destructor for the codec *\/$/;"	m	struct:Pager	file:
xCodecSizeChng	sqlite3.c	/^  void (*xCodecSizeChng)(void*,int,int); \/* Notify of page size changes *\/$/;"	m	struct:Pager	file:
xCollNeeded	sqlite3.c	/^  void(*xCollNeeded)(void*,sqlite3*,int eTextRep,const char*);$/;"	m	struct:sqlite3	file:
xCollNeeded16	sqlite3.c	/^  void(*xCollNeeded16)(void*,sqlite3*,int eTextRep,const void*);$/;"	m	struct:sqlite3	file:
xColumn	sqlite3.c	/^  int (*xColumn)(sqlite3_vtab_cursor*, sqlite3_context*, int);$/;"	m	struct:sqlite3_module	file:
xCommit	sqlite3.c	/^  int (*xCommit)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xCommitCallback	sqlite3.c	/^  int (*xCommitCallback)(void*);    \/* Invoked at every commit. *\/$/;"	m	struct:sqlite3	file:
xConnect	sqlite3.c	/^  int (*xConnect)(sqlite3*, void *pAux,$/;"	m	struct:sqlite3_module	file:
xCreate	sqlite3.c	/^  int (*xCreate)($/;"	m	struct:sqlite3_tokenizer_module	file:
xCreate	sqlite3.c	/^  int (*xCreate)(sqlite3*, void *pAux,$/;"	m	struct:sqlite3_module	file:
xCreate	sqlite3.c	/^  sqlite3_pcache *(*xCreate)(int szPage, int bPurgeable);$/;"	m	struct:sqlite3_pcache_methods	file:
xCurrentTime	sqlite3.c	/^  int (*xCurrentTime)(sqlite3_vfs*, double*);$/;"	m	struct:sqlite3_vfs	file:
xCurrentTimeInt64	sqlite3.c	/^  int (*xCurrentTimeInt64)(sqlite3_vfs*, sqlite3_int64*);$/;"	m	struct:sqlite3_vfs	file:
xDel	sqlite3.c	/^  void (*xDel)(void *);  \/* If not null, call this function to delete Mem.z *\/$/;"	m	struct:Mem	file:
xDel	sqlite3.c	/^  void (*xDel)(void*);  \/* Destructor for pUser *\/$/;"	m	struct:CollSeq	file:
xDelUser	sqlite3.c	/^  void (*xDelUser)(void *);       \/* Called by SQLite to clean up pUser *\/$/;"	m	struct:sqlite3_rtree_geometry	file:
xDelete	sqlite3.c	/^    void (*xDelete)(void *);      \/* Destructor for the aux data *\/$/;"	m	struct:VdbeFunc::AuxData	file:
xDelete	sqlite3.c	/^  int (*xDelete)(sqlite3_vfs*, const char *zName, int syncDir);$/;"	m	struct:sqlite3_vfs	file:
xDestroy	sqlite3.c	/^  int (*xDestroy)(sqlite3_tokenizer *pTokenizer);$/;"	m	struct:sqlite3_tokenizer_module	file:
xDestroy	sqlite3.c	/^  int (*xDestroy)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xDestroy	sqlite3.c	/^  void (*xDestroy)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods	file:
xDestroy	sqlite3.c	/^  void (*xDestroy)(void *);            \/* Module destructor function *\/$/;"	m	struct:Module	file:
xDestroy	sqlite3.c	/^  void (*xDestroy)(void *);$/;"	m	struct:FuncDestructor	file:
xDeviceCharacteristics	sqlite3.c	/^  int (*xDeviceCharacteristics)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	file:
xDisconnect	sqlite3.c	/^  int (*xDisconnect)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xDlClose	sqlite3.c	/^  void (*xDlClose)(sqlite3_vfs*, void*);$/;"	m	struct:sqlite3_vfs	file:
xDlError	sqlite3.c	/^  void (*xDlError)(sqlite3_vfs*, int nByte, char *zErrMsg);$/;"	m	struct:sqlite3_vfs	file:
xDlOpen	sqlite3.c	/^  void *(*xDlOpen)(sqlite3_vfs*, const char *zFilename);$/;"	m	struct:sqlite3_vfs	file:
xEof	sqlite3.c	/^  int (*xEof)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module	file:
xExprCallback	sqlite3.c	/^  int (*xExprCallback)(Walker*, Expr*);     \/* Callback for expressions *\/$/;"	m	struct:Walker	file:
xFetch	sqlite3.c	/^  void *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);$/;"	m	struct:sqlite3_pcache_methods	file:
xFileControl	sqlite3.c	/^  int (*xFileControl)(sqlite3_file*, int op, void *pArg);$/;"	m	struct:sqlite3_io_methods	file:
xFileSize	sqlite3.c	/^  int (*xFileSize)(sqlite3_file*, sqlite3_int64 *pSize);$/;"	m	struct:sqlite3_io_methods	file:
xFilter	sqlite3.c	/^  int (*xFilter)(sqlite3_vtab_cursor*, int idxNum, const char *idxStr,$/;"	m	struct:sqlite3_module	file:
xFinalize	sqlite3.c	/^  void (*xFinalize)(sqlite3_context*);                \/* Aggregate finalizer *\/$/;"	m	struct:FuncDef	file:
xFindFunction	sqlite3.c	/^  int (*xFindFunction)(sqlite3_vtab *pVtab, int nArg, const char *zName,$/;"	m	struct:sqlite3_module	file:
xFree	sqlite3.c	/^  void (*xFree)(void*);          \/* Free a prior allocation *\/$/;"	m	struct:sqlite3_mem_methods	file:
xFree	sqlite3.c	/^static void xFree(void *p){$/;"	f	file:
xFreeSchema	sqlite3.c	/^  void (*xFreeSchema)(void*);  \/* Destructor for BtShared.pSchema *\/$/;"	m	struct:BtShared	file:
xFullPathname	sqlite3.c	/^  int (*xFullPathname)(sqlite3_vfs*, const char *zName, int nOut, char *zOut);$/;"	m	struct:sqlite3_vfs	file:
xFunc	sqlite3.c	/^  int (*xFunc)(void *,int);  \/* The busy callback *\/$/;"	m	struct:BusyHandler	file:
xFunc	sqlite3.c	/^  void (*xFunc)(sqlite3_context*,int,sqlite3_value**); \/* Regular function *\/$/;"	m	struct:FuncDef	file:
xGeom	sqlite3.c	/^  int (*xGeom)(sqlite3_rtree_geometry *, int, double *, int *);$/;"	m	struct:RtreeConstraint	file:
xGeom	sqlite3.c	/^  int (*xGeom)(sqlite3_rtree_geometry *, int, double *, int *);$/;"	m	struct:RtreeGeomCallback	file:
xGeom	sqlite3.c	/^  int (*xGeom)(sqlite3_rtree_geometry *, int, double *, int *);$/;"	m	struct:RtreeMatchArg	file:
xGetLastError	sqlite3.c	/^  int (*xGetLastError)(sqlite3_vfs*, int, char *);$/;"	m	struct:sqlite3_vfs	file:
xGetSystemCall	sqlite3.c	/^  sqlite3_syscall_ptr (*xGetSystemCall)(sqlite3_vfs*, const char *zName);$/;"	m	struct:sqlite3_vfs	file:
xInit	sqlite3.c	/^  int (*xInit)(void*);           \/* Initialize the memory allocator *\/$/;"	m	struct:sqlite3_mem_methods	file:
xInit	sqlite3.c	/^  int (*xInit)(void*);$/;"	m	struct:sqlite3_pcache_methods	file:
xLock	sqlite3.c	/^  int (*xLock)(sqlite3_file*, int);$/;"	m	struct:sqlite3_io_methods	file:
xLog	sqlite3.c	/^  void (*xLog)(void*,int,const char*); \/* Function for logging *\/$/;"	m	struct:Sqlite3Config	file:
xMalloc	sqlite3.c	/^  void *(*xMalloc)(int);         \/* Memory allocation function *\/$/;"	m	struct:sqlite3_mem_methods	file:
xMutexAlloc	sqlite3.c	/^  sqlite3_mutex *(*xMutexAlloc)(int);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexEnd	sqlite3.c	/^  int (*xMutexEnd)(void);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexEnter	sqlite3.c	/^  void (*xMutexEnter)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexFree	sqlite3.c	/^  void (*xMutexFree)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexHeld	sqlite3.c	/^  int (*xMutexHeld)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexInit	sqlite3.c	/^  int (*xMutexInit)(void);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexLeave	sqlite3.c	/^  void (*xMutexLeave)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexNotheld	sqlite3.c	/^  int (*xMutexNotheld)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexTry	sqlite3.c	/^  int (*xMutexTry)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xNext	sqlite3.c	/^  int (*xNext)($/;"	m	struct:sqlite3_tokenizer_module	file:
xNext	sqlite3.c	/^  int (*xNext)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module	file:
xNextSystemCall	sqlite3.c	/^  const char *(*xNextSystemCall)(sqlite3_vfs*, const char *zName);$/;"	m	struct:sqlite3_vfs	file:
xOpen	sqlite3.c	/^  int (*xOpen)($/;"	m	struct:sqlite3_tokenizer_module	file:
xOpen	sqlite3.c	/^  int (*xOpen)(sqlite3_vfs*, const char *zName, sqlite3_file*,$/;"	m	struct:sqlite3_vfs	file:
xOpen	sqlite3.c	/^  int (*xOpen)(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor);$/;"	m	struct:sqlite3_module	file:
xPagecount	sqlite3.c	/^  int (*xPagecount)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods	file:
xProfile	sqlite3.c	/^  void (*xProfile)(void*,const char*,u64);  \/* Profiling function *\/$/;"	m	struct:sqlite3	file:
xProgress	sqlite3.c	/^  int (*xProgress)(void *);     \/* The progress callback *\/$/;"	m	struct:sqlite3	file:
xRandomness	sqlite3.c	/^  int (*xRandomness)(sqlite3_vfs*, int nByte, char *zOut);$/;"	m	struct:sqlite3_vfs	file:
xRead	sqlite3.c	/^  int (*xRead)(sqlite3_file*, void*, int iAmt, sqlite3_int64 iOfst);$/;"	m	struct:sqlite3_io_methods	file:
xRealloc	sqlite3.c	/^  void *(*xRealloc)(void*,int);  \/* Resize an allocation *\/$/;"	m	struct:sqlite3_mem_methods	file:
xReiniter	sqlite3.c	/^  void (*xReiniter)(DbPage*); \/* Call this routine when reloading pages *\/$/;"	m	struct:Pager	file:
xRekey	sqlite3.c	/^  void (*xRekey)(sqlite3_pcache*, void*, unsigned oldKey, unsigned newKey);$/;"	m	struct:sqlite3_pcache_methods	file:
xRelease	sqlite3.c	/^  int (*xRelease)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module	file:
xRename	sqlite3.c	/^  int (*xRename)(sqlite3_vtab *pVtab, const char *zNew);$/;"	m	struct:sqlite3_module	file:
xRollback	sqlite3.c	/^  int (*xRollback)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xRollbackCallback	sqlite3.c	/^  void (*xRollbackCallback)(void*); \/* Invoked at every commit. *\/$/;"	m	struct:sqlite3	file:
xRollbackTo	sqlite3.c	/^  int (*xRollbackTo)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module	file:
xRoundup	sqlite3.c	/^  int (*xRoundup)(int);          \/* Round up request size to allocation size *\/$/;"	m	struct:sqlite3_mem_methods	file:
xRowid	sqlite3.c	/^  int (*xRowid)(sqlite3_vtab_cursor*, sqlite3_int64 *pRowid);$/;"	m	struct:sqlite3_module	file:
xSavepoint	sqlite3.c	/^  int (*xSavepoint)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module	file:
xSectorSize	sqlite3.c	/^  int (*xSectorSize)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	file:
xSelectCallback	sqlite3.c	/^  int (*xSelectCallback)(Walker*,Select*);  \/* Callback for SELECTs *\/$/;"	m	struct:Walker	file:
xSetSystemCall	sqlite3.c	/^  int (*xSetSystemCall)(sqlite3_vfs*, const char *zName, sqlite3_syscall_ptr);$/;"	m	struct:sqlite3_vfs	file:
xShmBarrier	sqlite3.c	/^  void (*xShmBarrier)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	file:
xShmLock	sqlite3.c	/^  int (*xShmLock)(sqlite3_file*, int offset, int n, int flags);$/;"	m	struct:sqlite3_io_methods	file:
xShmMap	sqlite3.c	/^  int (*xShmMap)(sqlite3_file*, int iPg, int pgsz, int, void volatile**);$/;"	m	struct:sqlite3_io_methods	file:
xShmUnmap	sqlite3.c	/^  int (*xShmUnmap)(sqlite3_file*, int deleteFlag);$/;"	m	struct:sqlite3_io_methods	file:
xShutdown	sqlite3.c	/^  void (*xShutdown)(void*);      \/* Deinitialize the memory allocator *\/$/;"	m	struct:sqlite3_mem_methods	file:
xShutdown	sqlite3.c	/^  void (*xShutdown)(void*);$/;"	m	struct:sqlite3_pcache_methods	file:
xSize	sqlite3.c	/^  int (*xSize)(void*);           \/* Return the size of an allocation *\/$/;"	m	struct:sqlite3_mem_methods	file:
xSleep	sqlite3.c	/^  int (*xSleep)(sqlite3_vfs*, int microseconds);$/;"	m	struct:sqlite3_vfs	file:
xStep	sqlite3.c	/^  void (*xStep)(sqlite3_context*,int,sqlite3_value**); \/* Aggregate step *\/$/;"	m	struct:FuncDef	file:
xStress	sqlite3.c	/^  int (*xStress)(void*,PgHdr*);       \/* Call to try make a page clean *\/$/;"	m	struct:PCache	file:
xSync	sqlite3.c	/^  int (*xSync)(sqlite3_file*, int flags);$/;"	m	struct:sqlite3_io_methods	file:
xSync	sqlite3.c	/^  int (*xSync)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xTrace	sqlite3.c	/^  void (*xTrace)(void*,const char*);        \/* Trace function *\/$/;"	m	struct:sqlite3	file:
xTruncate	sqlite3.c	/^  int (*xTruncate)(sqlite3_file*, sqlite3_int64 size);$/;"	m	struct:sqlite3_io_methods	file:
xTruncate	sqlite3.c	/^  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);$/;"	m	struct:sqlite3_pcache_methods	file:
xUnlock	sqlite3.c	/^  int (*xUnlock)(sqlite3_file*, int);$/;"	m	struct:sqlite3_io_methods	file:
xUnlockNotify	sqlite3.c	/^  void (*xUnlockNotify)(void **, int);  \/* Unlock notify callback *\/$/;"	m	struct:sqlite3	file:
xUnpin	sqlite3.c	/^  void (*xUnpin)(sqlite3_pcache*, void*, int discard);$/;"	m	struct:sqlite3_pcache_methods	file:
xUpdate	sqlite3.c	/^  int (*xUpdate)(sqlite3_vtab *, int, sqlite3_value **, sqlite3_int64 *);$/;"	m	struct:sqlite3_module	file:
xUpdateCallback	sqlite3.c	/^  void (*xUpdateCallback)(void*,int, const char*,const char*,sqlite_int64);$/;"	m	struct:sqlite3	file:
xWalCallback	sqlite3.c	/^  int (*xWalCallback)(void *, sqlite3 *, const char *, int);$/;"	m	struct:sqlite3	file:
xWrite	sqlite3.c	/^  int (*xWrite)(sqlite3_file*, const void*, int iAmt, sqlite3_int64 iOfst);$/;"	m	struct:sqlite3_io_methods	file:
xferCompatibleCollation	sqlite3.c	/^static int xferCompatibleCollation(const char *z1, const char *z2){$/;"	f	file:
xferCompatibleIndex	sqlite3.c	/^static int xferCompatibleIndex(Index *pDest, Index *pSrc){$/;"	f	file:
xferOptimization	sqlite3.c	/^static int xferOptimization($/;"	f	file:
xthreadsafe	sqlite3.c	/^  int (*xthreadsafe)(void);$/;"	m	struct:sqlite3_api_routines	file:
yColCache	sqlite3.c	/^  struct yColCache {$/;"	s	struct:Parse	file:
yDbMask	sqlite3.c	/^  typedef sqlite3_uint64 yDbMask;$/;"	t	file:
yDbMask	sqlite3.c	/^  typedef unsigned int yDbMask;$/;"	t	file:
ynVar	sqlite3.c	/^typedef i16 ynVar;$/;"	t	file:
ynVar	sqlite3.c	/^typedef int ynVar;$/;"	t	file:
yy0	sqlite3.c	/^  sqlite3ParserTOKENTYPE yy0;$/;"	m	union:__anon18	file:
yy118	sqlite3.c	/^  ExprSpan yy118;$/;"	m	union:__anon18	file:
yy203	sqlite3.c	/^  TriggerStep* yy203;$/;"	m	union:__anon18	file:
yy210	sqlite3.c	/^  u8 yy210;$/;"	m	union:__anon18	file:
yy215	sqlite3.c	/^  struct {int value; int mask;} yy215;$/;"	m	union:__anon18	typeref:struct:__anon18::__anon19	file:
yy259	sqlite3.c	/^  SrcList* yy259;$/;"	m	union:__anon18	file:
yy292	sqlite3.c	/^  struct LimitVal yy292;$/;"	m	union:__anon18	typeref:struct:__anon18::LimitVal	file:
yy314	sqlite3.c	/^  Expr* yy314;$/;"	m	union:__anon18	file:
yy322	sqlite3.c	/^  ExprList* yy322;$/;"	m	union:__anon18	file:
yy342	sqlite3.c	/^  struct LikeOp yy342;$/;"	m	union:__anon18	typeref:struct:__anon18::LikeOp	file:
yy384	sqlite3.c	/^  IdList* yy384;$/;"	m	union:__anon18	file:
yy387	sqlite3.c	/^  Select* yy387;$/;"	m	union:__anon18	file:
yy4	sqlite3.c	/^  int yy4;$/;"	m	union:__anon18	file:
yy90	sqlite3.c	/^  struct TrigEvent yy90;$/;"	m	union:__anon18	typeref:struct:__anon18::TrigEvent	file:
yyFallback	sqlite3.c	/^static const YYCODETYPE yyFallback[] = {$/;"	v	file:
yyGrowStack	sqlite3.c	/^static void yyGrowStack(yyParser *p){$/;"	f	file:
yyParser	sqlite3.c	/^struct yyParser {$/;"	s	file:
yyParser	sqlite3.c	/^typedef struct yyParser yyParser;$/;"	t	typeref:struct:yyParser	file:
yyRuleInfo	sqlite3.c	/^} yyRuleInfo[] = {$/;"	v	typeref:struct:__anon20	file:
yyRuleName	sqlite3.c	/^static const char *const yyRuleName[] = {$/;"	v	file:
yyStackEntry	sqlite3.c	/^struct yyStackEntry {$/;"	s	file:
yyStackEntry	sqlite3.c	/^typedef struct yyStackEntry yyStackEntry;$/;"	t	typeref:struct:yyStackEntry	file:
yyStackOverflow	sqlite3.c	/^static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){$/;"	f	file:
yyTokenName	sqlite3.c	/^static const char *const yyTokenName[] = { $/;"	v	file:
yyTraceFILE	sqlite3.c	/^static FILE *yyTraceFILE = 0;$/;"	v	file:
yyTracePrompt	sqlite3.c	/^static char *yyTracePrompt = 0;$/;"	v	file:
yy_accept	sqlite3.c	/^static void yy_accept($/;"	f	file:
yy_action	sqlite3.c	/^static const YYACTIONTYPE yy_action[] = {$/;"	v	file:
yy_default	sqlite3.c	/^static const YYACTIONTYPE yy_default[] = {$/;"	v	file:
yy_destructor	sqlite3.c	/^static void yy_destructor($/;"	f	file:
yy_find_reduce_action	sqlite3.c	/^static int yy_find_reduce_action($/;"	f	file:
yy_find_shift_action	sqlite3.c	/^static int yy_find_shift_action($/;"	f	file:
yy_lookahead	sqlite3.c	/^static const YYCODETYPE yy_lookahead[] = {$/;"	v	file:
yy_parse_failed	sqlite3.c	/^static void yy_parse_failed($/;"	f	file:
yy_pop_parser_stack	sqlite3.c	/^static int yy_pop_parser_stack(yyParser *pParser){$/;"	f	file:
yy_reduce	sqlite3.c	/^static void yy_reduce($/;"	f	file:
yy_reduce_ofst	sqlite3.c	/^static const short yy_reduce_ofst[] = {$/;"	v	file:
yy_shift	sqlite3.c	/^static void yy_shift($/;"	f	file:
yy_shift_ofst	sqlite3.c	/^static const short yy_shift_ofst[] = {$/;"	v	file:
yy_syntax_error	sqlite3.c	/^static void yy_syntax_error($/;"	f	file:
yyerrcnt	sqlite3.c	/^  int yyerrcnt;                 \/* Shifts left before out of the error *\/$/;"	m	struct:yyParser	file:
yyidx	sqlite3.c	/^  int yyidx;                    \/* Index of top element in stack *\/$/;"	m	struct:yyParser	file:
yyidxMax	sqlite3.c	/^  int yyidxMax;                 \/* Maximum value of yyidx *\/$/;"	m	struct:yyParser	file:
yyinit	sqlite3.c	/^  int yyinit;$/;"	m	union:__anon18	file:
yystack	sqlite3.c	/^  yyStackEntry *yystack;        \/* The parser's stack *\/$/;"	m	struct:yyParser	file:
yystksz	sqlite3.c	/^  int yystksz;                  \/* Current side of the stack *\/$/;"	m	struct:yyParser	file:
yytestcase	sqlite3.c	103339;"	d	file:
yytestcase	sqlite3.c	103546;"	d	file:
yyzerominor	sqlite3.c	/^static const YYMINORTYPE yyzerominor = { 0 };$/;"	v	file:
z	sqlite3.c	/^    char *z;               \/* Pointer to data for string (char array) types *\/$/;"	m	union:VdbeOp::__anon1	file:
z	sqlite3.c	/^    char *z;        \/* Value if eType is SQLITE_TEXT or SQLITE_BLOB *\/$/;"	m	union:IndexSample::__anon3	file:
z	sqlite3.c	/^  char *z;                        \/* Pointer to buffer containing string *\/$/;"	m	struct:StrBuffer	file:
z	sqlite3.c	/^  char *z;                        \/* Text of the token *\/$/;"	m	struct:Fts3PhraseToken	file:
z	sqlite3.c	/^  char *z;            \/* String or BLOB value *\/$/;"	m	struct:Mem	file:
z	sqlite3.c	/^  const char *z;     \/* Text of the token.  Not NULL-terminated! *\/$/;"	m	struct:Token	file:
zAlias	sqlite3.c	/^    char *zAlias;     \/* The "B" part of a "A AS B" phrase.  zName is the "A" *\/$/;"	m	struct:SrcList::SrcList_item	file:
zAuthContext	sqlite3.c	/^  const char *zAuthContext;   \/* Put saved Parse.zAuthContext here *\/$/;"	m	struct:AuthContext	file:
zAuthContext	sqlite3.c	/^  const char *zAuthContext; \/* The 6th parameter to db->xAuth callbacks *\/$/;"	m	struct:Parse	file:
zBase	sqlite3.c	/^  char *zBase;         \/* A base allocation.  Not from malloc. *\/$/;"	m	struct:StrAccum	file:
zBuf	sqlite3.c	/^  char *zBuf;                     \/* Space to buffer journal writes *\/$/;"	m	struct:JournalFile	file:
zBuffer	sqlite3.c	/^  char *zBuffer;$/;"	m	struct:IcuCursor	file:
zCanonicalName	sqlite3.c	/^  char *zCanonicalName;         \/* Canonical filename *\/$/;"	m	struct:vxworksFileId	file:
zChunk	sqlite3.c	/^  u8 zChunk[JOURNAL_CHUNKSIZE];   \/* Content of this chunk *\/$/;"	m	struct:FileChunk	file:
zCol	sqlite3.c	/^    char *zCol;        \/* Name of column in zTo.  If 0 use PRIMARY KEY *\/$/;"	m	struct:FKey::sColMap	file:
zColAff	sqlite3.c	/^  char *zColAff;       \/* String defining the affinity of each column *\/$/;"	m	struct:Table	file:
zColAff	sqlite3.c	/^  char *zColAff;   \/* String defining the affinity of each column *\/$/;"	m	struct:Index	file:
zColl	sqlite3.c	/^  char *zColl;     \/* Collating sequence.  If NULL, use the default *\/$/;"	m	struct:Column	file:
zComment	sqlite3.c	/^  char *zComment;          \/* Comment to improve readability *\/$/;"	m	struct:VdbeOp	file:
zData	sqlite3.c	/^  u8 *zData;$/;"	m	struct:RtreeNode	file:
zDatabase	sqlite3.c	/^    char *zDatabase;  \/* Name of database holding this table *\/$/;"	m	struct:SrcList::SrcList_item	file:
zDatabase	sqlite3.c	/^  const char *zDatabase;$/;"	m	struct:analysisInfo	file:
zDb	sqlite3.c	/^  char *zDb;                  \/* Name of database containing r-tree table *\/$/;"	m	struct:Rtree	file:
zDb	sqlite3.c	/^  const char *zDb;                \/* logical database name *\/$/;"	m	struct:Fts3Table	file:
zDb	sqlite3.c	/^  const char *zDb;    \/* Make sure all objects are contained in this database *\/$/;"	m	struct:DbFixer	file:
zDeleteOnClose	sqlite3.c	/^  WCHAR *zDeleteOnClose;  \/* Name of file to delete when closing *\/$/;"	m	struct:winFile	file:
zDflt	sqlite3.c	/^  char *zDflt;     \/* Original text of the default value *\/$/;"	m	struct:Column	file:
zEnd	sqlite3.c	/^  const char *zEnd;     \/* One character past the end of input text *\/$/;"	m	struct:ExprSpan	file:
zErrMsg	sqlite3.c	/^  char *zErrMsg;                  \/* Error message from sqlite3_mprintf() *\/$/;"	m	struct:sqlite3_vtab	file:
zErrMsg	sqlite3.c	/^  char *zErrMsg;                \/* Most recent error message (UTF-8 encoded) *\/$/;"	m	struct:sqlite3	file:
zErrMsg	sqlite3.c	/^  char *zErrMsg;          \/* Error message written here *\/$/;"	m	struct:Vdbe	file:
zErrMsg	sqlite3.c	/^  char *zErrMsg;       \/* An error message *\/$/;"	m	struct:Parse	file:
zErrMsg	sqlite3.c	/^  char *zErrMsg;     \/* Error message text, if an error occurs *\/$/;"	m	struct:TabResult	file:
zErrMsg16	sqlite3.c	/^  char *zErrMsg16;              \/* Most recent error message (UTF-16 encoded) *\/$/;"	m	struct:sqlite3	file:
zFilename	sqlite3.c	/^  char *zFilename;            \/* Name of the database file *\/$/;"	m	struct:Pager	file:
zFilename	sqlite3.c	/^  char *zFilename;           \/* Name of the file *\/$/;"	m	struct:winShmNode	file:
zFilename	sqlite3.c	/^  char *zFilename;           \/* Name of the mmapped file *\/$/;"	m	struct:unixShmNode	file:
zFullPathCp	sqlite3.c	/^  char *zFullPathCp;        \/* Full path name of this file *\/$/;"	m	struct:os2File	file:
zIndex	sqlite3.c	/^    char *zIndex;     \/* Identifier from "INDEXED BY <zIndex>" clause *\/$/;"	m	struct:SrcList::SrcList_item	file:
zInput	sqlite3.c	/^  const char *zInput;          \/* input we are tokenizing *\/$/;"	m	struct:porter_tokenizer_cursor	file:
zJournal	sqlite3.c	/^  char *zJournal;             \/* Name of the journal file *\/$/;"	m	struct:Pager	file:
zJournal	sqlite3.c	/^  const char *zJournal;           \/* Name of the journal file *\/$/;"	m	struct:JournalFile	file:
zLocale	sqlite3.c	/^  char *zLocale;$/;"	m	struct:IcuTokenizer	file:
zMagicHeader	sqlite3.c	/^static const char zMagicHeader[] = SQLITE_FILE_HEADER;$/;"	v	file:
zMalloc	sqlite3.c	/^  char *zMalloc;                  \/* Malloc'd space (possibly) used for zTerm *\/$/;"	m	struct:SegmentNode	file:
zMalloc	sqlite3.c	/^  char *zMalloc;                  \/* Malloc'd space (possibly) used for zTerm *\/$/;"	m	struct:SegmentWriter	file:
zMalloc	sqlite3.c	/^  char *zMalloc;      \/* Dynamic buffer allocated by sqlite3_malloc() *\/$/;"	m	struct:Mem	file:
zMatchinfo	sqlite3.c	/^  char *zMatchinfo;               \/* Matchinfo specification *\/$/;"	m	struct:Fts3Cursor	file:
zName	sqlite3.c	/^    char *zName;           \/* Token associated with this expression *\/$/;"	m	struct:ExprList::ExprList_item	file:
zName	sqlite3.c	/^    char *zName;      \/* Name of the identifier *\/$/;"	m	struct:IdList::IdList_item	file:
zName	sqlite3.c	/^    char *zName;      \/* Name of the table *\/$/;"	m	struct:SrcList::SrcList_item	file:
zName	sqlite3.c	/^  char *zName;                        \/* Savepoint name (nul-terminated) *\/$/;"	m	struct:Savepoint	file:
zName	sqlite3.c	/^  char *zName;                \/* Name of r-tree table *\/ $/;"	m	struct:Rtree	file:
zName	sqlite3.c	/^  char *zName;            \/* The name of the trigger                        *\/$/;"	m	struct:Trigger	file:
zName	sqlite3.c	/^  char *zName;          \/* Name of the collating sequence, UTF-8 encoded *\/$/;"	m	struct:CollSeq	file:
zName	sqlite3.c	/^  char *zName;         \/* Name of the table or view *\/$/;"	m	struct:Table	file:
zName	sqlite3.c	/^  char *zName;         \/* Name of this database *\/$/;"	m	struct:Db	file:
zName	sqlite3.c	/^  char *zName;         \/* SQL name of the function. *\/$/;"	m	struct:FuncDef	file:
zName	sqlite3.c	/^  char *zName;     \/* Name of this column *\/$/;"	m	struct:Column	file:
zName	sqlite3.c	/^  char *zName;     \/* Name of this index *\/$/;"	m	struct:Index	file:
zName	sqlite3.c	/^  const char *zName;                   \/* Name passed to create_module() *\/$/;"	m	struct:Module	file:
zName	sqlite3.c	/^  const char *zName;              \/* virtual table name *\/$/;"	m	struct:Fts3Table	file:
zName	sqlite3.c	/^  const char *zName;            \/* Name of the sytem call *\/$/;"	m	struct:unix_syscall	file:
zName	sqlite3.c	/^  const char *zName;       \/* Name of this virtual file system *\/$/;"	m	struct:sqlite3_vfs	file:
zName	sqlite3.c	/^  const char *zName;   \/* Name of the table *\/$/;"	m	struct:TableLock	file:
zPath	sqlite3.c	/^  const char *zPath;                  \/* Name of the file *\/$/;"	m	struct:unixFile	file:
zPath	sqlite3.c	/^  const char *zPath;      \/* Full pathname of this file *\/$/;"	m	struct:winFile	file:
zPool	sqlite3.c	/^  u8 *zPool;       \/* Memory available to be allocated *\/$/;"	m	struct:Mem5Global	file:
zReadExprlist	sqlite3.c	/^  char *zReadExprlist;$/;"	m	struct:Fts3Table	file:
zSegmentsTbl	sqlite3.c	/^  char *zSegmentsTbl;             \/* Name of %_segments table *\/$/;"	m	struct:Fts3Table	file:
zSpan	sqlite3.c	/^    char *zSpan;           \/* Original text of the expression *\/$/;"	m	struct:ExprList::ExprList_item	file:
zSql	sqlite3.c	/^  char *zSql;             \/* Text of the SQL statement that generated this *\/$/;"	m	struct:Vdbe	file:
zStart	sqlite3.c	/^  const char *zStart;   \/* First character of input text *\/$/;"	m	struct:ExprSpan	file:
zStop	sqlite3.c	/^  char *zStop;$/;"	m	struct:Fts3auxCursor	file:
zTail	sqlite3.c	/^  const char *zTail;   \/* All SQL text past the last semicolon parsed *\/$/;"	m	struct:Parse	file:
zTerm	sqlite3.c	/^  char *zTerm;                    \/* Pointer to current term *\/$/;"	m	struct:Fts3SegReader	file:
zTerm	sqlite3.c	/^  char *zTerm;                    \/* Pointer to previous term buffer *\/$/;"	m	struct:SegmentNode	file:
zTerm	sqlite3.c	/^  char *zTerm;                    \/* Pointer to previous term buffer *\/$/;"	m	struct:SegmentWriter	file:
zTerm	sqlite3.c	/^  char *zTerm;                    \/* Pointer to term buffer *\/$/;"	m	struct:Fts3MultiSegReader	file:
zTerm	sqlite3.c	/^  const char *zTerm;$/;"	m	struct:Fts3SegFilter	file:
zText	sqlite3.c	/^  char *zText;         \/* The string collected so far *\/$/;"	m	struct:StrAccum	file:
zTitle	sqlite3.c	/^  char zTitle[100];  \/* The title text *\/$/;"	m	struct:__anon12	file:
zTo	sqlite3.c	/^  char *zTo;        \/* Name of table that the key points to (aka: Parent) *\/$/;"	m	struct:FKey	file:
zToken	sqlite3.c	/^    char *zToken;          \/* Token value. Zero terminated and dequoted *\/$/;"	m	union:Expr::__anon4	file:
zToken	sqlite3.c	/^  char *zToken;                \/* storage for current token *\/$/;"	m	struct:porter_tokenizer_cursor	file:
zType	sqlite3.c	/^  char *zType;     \/* Data type for this column *\/$/;"	m	struct:Column	file:
zType	sqlite3.c	/^  const char *zType;  \/* Type of the container - used for error messages *\/$/;"	m	struct:DbFixer	file:
zWal	sqlite3.c	/^  char *zWal;                 \/* File name for write-ahead log *\/$/;"	m	struct:Pager	file:
zWalName	sqlite3.c	/^  const char *zWalName;      \/* Name of WAL file *\/$/;"	m	struct:Wal	file:
zWriteExprlist	sqlite3.c	/^  char *zWriteExprlist;$/;"	m	struct:Fts3Table	file:
zeroJournalHdr	sqlite3.c	/^static int zeroJournalHdr(Pager *pPager, int doTruncate){$/;"	f	file:
zeroPage	sqlite3.c	/^static void zeroPage(MemPage *pPage, int flags){$/;"	f	file:
zeroblobFunc	sqlite3.c	/^static void zeroblobFunc($/;"	f	file:
zeroed	sqlite3.c	/^  Bool zeroed;          \/* True if zeroed out and ready for reuse *\/$/;"	m	struct:VdbeCursor	file:
~CategoricalData	CategoricalData.cpp	/^HMM_PP::CategoricalData::~CategoricalData() {$/;"	f	class:HMM_PP::CategoricalData
~Data	Data.cpp	/^HMM_PP::Data::~Data() {$/;"	f	class:HMM_PP::Data
~HomogeneousModelParams	HomogeneousModelParams.cpp	/^HMM_PP::HomogeneousModelParams::~HomogeneousModelParams() {$/;"	f	class:HMM_PP::HomogeneousModelParams
~InferredDataFit	InferredDataFit.cpp	/^HMM_PP::InferredDataFit::~InferredDataFit() {$/;"	f	class:HMM_PP::InferredDataFit
~Model	Model.cpp	/^HMM_PP::Model::~Model() {$/;"	f	class:HMM_PP::Model
~ModelFromStream	ModelFromStream.cpp	/^HMM_PP::ModelFromStream::~ModelFromStream() {$/;"	f	class:HMM_PP::ModelFromStream
~ModelFromStreamNoStorage	ModelFromStreamNoStorage.cpp	/^HMM_PP::ModelFromStreamNoStorage::~ModelFromStreamNoStorage() {$/;"	f	class:HMM_PP::ModelFromStreamNoStorage
~ModelParams	ModelParams.cpp	/^HMM_PP::ModelParams::~ModelParams() {$/;"	f	class:HMM_PP::ModelParams
~ModelWithDB	ModelWithDB.cpp	/^HMM_PP::ModelWithDB::~ModelWithDB() {$/;"	f	class:HMM_PP::ModelWithDB
~MultivariateCategoricalData	MultivariateCategoricalData.cpp	/^HMM_PP::MultivariateCategoricalData::~MultivariateCategoricalData() {$/;"	f	class:HMM_PP::MultivariateCategoricalData
~MultivariateQuantitativeData	MultivariateQuantitativeData.cpp	/^HMM_PP::MultivariateQuantitativeData::~MultivariateQuantitativeData() {$/;"	f	class:HMM_PP::MultivariateQuantitativeData
~UnivariateCategoricalData	UnivariateCategoricalData.cpp	/^HMM_PP::UnivariateCategoricalData::~UnivariateCategoricalData() {$/;"	f	class:HMM_PP::UnivariateCategoricalData
~istreamLineReader	utils.cpp	/^HMM_PP::istreamLineReader::~istreamLineReader() {$/;"	f	class:HMM_PP::istreamLineReader
~ostreamWriter	utils.cpp	/^HMM_PP::ostreamWriter::~ostreamWriter() {$/;"	f	class:HMM_PP::ostreamWriter
